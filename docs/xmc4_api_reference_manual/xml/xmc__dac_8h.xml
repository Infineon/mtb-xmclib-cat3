<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="xmc__dac_8h" kind="file" language="C++">
    <compoundname>xmc_dac.h</compoundname>
    <includes local="yes">xmc_common.h</includes>
    <incdepgraph>
      <node id="30">
        <label>xmc_common.h</label>
      </node>
      <node id="29">
        <label>xmc_dac.h</label>
        <link refid="xmc__dac_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_x_m_c___d_a_c___c_h___c_o_n_f_i_g__t" prot="public">XMC_DAC_CH_CONFIG_t</innerclass>
    <innerclass refid="struct_x_m_c___d_a_c__t" prot="public">XMC_DAC_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___d_a_c_1gafc2efa750fdd4aedbaa5be736a28400e" prot="public" static="no">
        <name>XMC_DAC0</name>
        <initializer>((<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *)DAC_BASE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DAC module register base </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="116" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gab813b33cdf9d40f046283a1b4e6feea4" prot="public" static="no">
        <name>XMC_DAC_DACCFG_NEGATE_Msk</name>
        <initializer>(0x10000000UL) /*&lt; DAC negation enable mask in XMC44 device */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="118" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga66217cfe3a783cdb0103e0ad86817e5f" prot="public" static="no">
        <name>XMC_DAC_IS_CHANNEL_VALID</name>
        <param><defname>CH</defname></param>
        <initializer>(CH &lt; <ref refid="group___d_a_c_1gaca090211fa47a1235a81308382f7241c" kindref="member">XMC_DAC_NO_CHANNELS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="127" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga2ea47447513a439b8cb61098456eff23" prot="public" static="no">
        <name>XMC_DAC_IS_DAC_VALID</name>
        <param><defname>PTR</defname></param>
        <initializer>((PTR) == <ref refid="group___d_a_c_1gafc2efa750fdd4aedbaa5be736a28400e" kindref="member">XMC_DAC0</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="126" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga999b18a418cf42fc5306d9bdd3460dc7" prot="public" static="no">
        <name>XMC_DAC_IS_MODE_VALID</name>
        <param><defname>MODE</defname></param>
        <initializer>((MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cab60cc89d056f1e994f95e5cf0ab3ee3f" kindref="member">XMC_DAC_CH_MODE_IDLE</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caebed4f6d5058ad45ab0a93322898a102" kindref="member">XMC_DAC_CH_MODE_SINGLE</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca9dae61c469e47cd75be8a9e9689d8393" kindref="member">XMC_DAC_CH_MODE_DATA</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca00245fd95505e05d1c3cc6670265fef0" kindref="member">XMC_DAC_CH_MODE_PATTERN</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caf63f03eca43e965fba40285cb92e3e62" kindref="member">XMC_DAC_CH_MODE_NOISE</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cac6e5937740ac5cc3200c5f590e091fbf" kindref="member">XMC_DAC_CH_MODE_RAMP</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="137" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gaf4b72f33f37ade76e586364d47542bee" prot="public" static="no">
        <name>XMC_DAC_IS_OUTPUT_SCALE_VALID</name>
        <param><defname>SCALE</defname></param>
        <initializer>((SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007ae98552d53e632106ecf1ce567b570a47" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_NONE</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a01ebb295f7321fddbaa3ec0a969bdad6" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_2</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a7e8a6467c766097010ce1c173715dbc8" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_4</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007aae6733f0486d9c306e749f222ef32e86" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_8</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a985ee78289a117a0f2277f8293385e50" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_16</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a6bcf2a549695fde6da39e76711f13f69" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_32</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a3d0fc15564713d3176a85f326c3c100a" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_64</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007af6b6551310573ea15e033fa2220ccea9" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_128</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a81b76aa6cd1039295158077f779bcfbe" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_2</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a097c24e5d23da7a32ae91d98ba51cc8e" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_4</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a677b0dc54045bcec45ed017b90585726" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_8</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a66927dc300c8176b545bb8b3ac886ef2" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_16</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a43798edd742ce7279d2604f9e9c51a44" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_32</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a23006b4a49f768550ba7ca5928344281" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_64</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007afed3adc5704981d3b3efab55fea9842a" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_128</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="143" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gada64ad16bfc8f312f56378244d2a1344" prot="public" static="no">
        <name>XMC_DAC_IS_TRIGGER_VALID</name>
        <param><defname>TRIGGER</defname></param>
        <initializer>((TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaf3c5c5c663d068867d11158e19e0c6e2" kindref="member">XMC_DAC_CH_TRIGGER_INTERNAL</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaae8546e01f01037086fe41be6aeb3a07a" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaa13dab51ee1d83ec23cfbe90deed07cb" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa333a073d7997ad313e648b396c6fdbea" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa44cd76b8737807422c8759b6ee6b8897" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa2cfc68d782d6639fcfe359b7b9f1dee3" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa0dd9de57bceb55915b0af6cb99fcfdac" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa5dd09d96ded088ce1f261e3446207a4d" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaad533a56154220c6844903436e8cc03a2" kindref="member">XMC_DAC_CH_TRIGGER_SOFTWARE</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="128" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gaca090211fa47a1235a81308382f7241c" prot="public" static="no">
        <name>XMC_DAC_NO_CHANNELS</name>
        <initializer>(2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DAC maximum channels </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="119" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga98fe05010708becbd4f109ccee7088b3" prot="public" static="no">
        <name>XMC_DAC_PATTERN_RECTANGLE</name>
        <initializer>{31U, 31U, 31U, 31U, 31U, 31U, 31U, 31U, 31U}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>First quarter Rectangle waveform samples </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="124" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga13c819b94bc1c769a4c879825accd83d" prot="public" static="no">
        <name>XMC_DAC_PATTERN_SINE</name>
        <initializer>{0U, 6U, 12U, 17U, 22U, 26U, 29U, 30U, 31U}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>First quarter Sine waveform samples </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="123" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gacb2705c3a364d91468f4a4f47f7d5145" prot="public" static="no">
        <name>XMC_DAC_PATTERN_TRIANGLE</name>
        <initializer>{0U, 4U, 8U, 12U, 16U, 19U, 23U, 27U, 31U}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>First quarter Triangle waveform samples </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="122" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gaed680bf1e0aacea27ca505c00822eef9" prot="public" static="no">
        <name>XMC_DAC_SAMPLES_PER_PERIOD</name>
        <initializer>(32U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DAC samples per period in pattern mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="120" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___d_a_c_1gabed6dedd39e5a4e8b5b88c780de85ea9" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_DATA_TYPE_t</name>
        <enumvalue id="group___d_a_c_1ggabed6dedd39e5a4e8b5b88c780de85ea9a515ff00c5ccd8b9565257a0771347583" prot="public">
          <name>XMC_DAC_CH_DATA_TYPE_UNSIGNED</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input data is unsigned </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggabed6dedd39e5a4e8b5b88c780de85ea9a3258da7e193fc755383c480a337037ff" prot="public">
          <name>XMC_DAC_CH_DATA_TYPE_SIGNED</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input data is signed </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data type of the input data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="219" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1gab145218c4b905bdd94c85811b8ec7a2c" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_MODE_t</name>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cab60cc89d056f1e994f95e5cf0ab3ee3f" prot="public">
          <name>XMC_DAC_CH_MODE_IDLE</name>
          <initializer>= 0x0U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DAC is disabled </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caebed4f6d5058ad45ab0a93322898a102" prot="public">
          <name>XMC_DAC_CH_MODE_SINGLE</name>
          <initializer>= 0x1U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Single value mode - single data value is updated and maintained </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca9dae61c469e47cd75be8a9e9689d8393" prot="public">
          <name>XMC_DAC_CH_MODE_DATA</name>
          <initializer>= 0x2U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data mode - continuous data processing </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca00245fd95505e05d1c3cc6670265fef0" prot="public">
          <name>XMC_DAC_CH_MODE_PATTERN</name>
          <initializer>= 0x3U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Pattern mode - inbuilt pattern waveform generation - Sine, Triangle, Rectangle </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caf63f03eca43e965fba40285cb92e3e62" prot="public">
          <name>XMC_DAC_CH_MODE_NOISE</name>
          <initializer>= 0x4U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Noise mode - pseudo-random noise generation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cac6e5937740ac5cc3200c5f590e091fbf" prot="public">
          <name>XMC_DAC_CH_MODE_RAMP</name>
          <initializer>= 0x5U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ramp mode - ramp generation </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Operating modes of DAC </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="180" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="179" bodyend="188"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1gaf5e272a25affac666157d497783ccb2b" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_OUTPUT_NEGATION_t</name>
        <enumvalue id="group___d_a_c_1ggaf5e272a25affac666157d497783ccb2ba356969170b9cf3b7f70fd82d9bfe373a" prot="public">
          <name>XMC_DAC_CH_OUTPUT_NEGATION_DISABLED</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>XMC_DAC_CH_OUTPUT_NEGATION_DISABLED </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggaf5e272a25affac666157d497783ccb2ba42549ee202f4c08f9e638656ae320dbb" prot="public">
          <name>XMC_DAC_CH_OUTPUT_NEGATION_ENABLED</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>XMC_DAC_CH_OUTPUT_NEGATION_ENABLED </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Negation of input data (applicable only for XMC44 device) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="265" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_OUTPUT_SCALE_t</name>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007ae98552d53e632106ecf1ce567b570a47" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_NONE</name>
          <initializer>=
    0x0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No scaling </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a01ebb295f7321fddbaa3ec0a969bdad6" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_2</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x1U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a7e8a6467c766097010ce1c173715dbc8" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_4</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x2U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 4 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007aae6733f0486d9c306e749f222ef32e86" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_8</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x3U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 8 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a985ee78289a117a0f2277f8293385e50" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_16</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x4U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 16 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a6bcf2a549695fde6da39e76711f13f69" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_32</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x5U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 32 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a3d0fc15564713d3176a85f326c3c100a" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_64</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x6U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 64 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007af6b6551310573ea15e033fa2220ccea9" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_128</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x7U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 128 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a81b76aa6cd1039295158077f779bcfbe" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_2</name>
          <initializer>=
    0x1U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a097c24e5d23da7a32ae91d98ba51cc8e" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_4</name>
          <initializer>=
    0x2U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 4 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a677b0dc54045bcec45ed017b90585726" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_8</name>
          <initializer>=
    0x3U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 8 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a66927dc300c8176b545bb8b3ac886ef2" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_16</name>
          <initializer>=
    0x4U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 16 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a43798edd742ce7279d2604f9e9c51a44" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_32</name>
          <initializer>=
    0x5U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 32 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a23006b4a49f768550ba7ca5928344281" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_64</name>
          <initializer>=
    0x6U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 64 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007afed3adc5704981d3b3efab55fea9842a" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_128</name>
          <initializer>=
    0x7U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 128 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scaling of the input data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="228" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="227" bodyend="259"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1gaf1e4fb1ca9c2bad0de893feee98e6228" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t</name>
        <enumvalue id="group___d_a_c_1ggaf1e4fb1ca9c2bad0de893feee98e6228a4ae92975858953559259477d7de9274c" prot="public">
          <name>XMC_DAC_CH_PATTERN_SIGN_OUTPUT_DISABLED</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sign output signal generation is disabled </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggaf1e4fb1ca9c2bad0de893feee98e6228a4735536396880c1868745af9944ad12a" prot="public">
          <name>XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sign output signal generation is enabled </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output sign signal for the Pattern Generation Mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="274" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="273" bodyend="277"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_STATUS_t</name>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4da4143bb37824ebceee0c840d12ed980ef" prot="public">
          <name>XMC_DAC_CH_STATUS_OK</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status is ok, no error detected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dab37b65d8effd30615d9e519bf684e647" prot="public">
          <name>XMC_DAC_CH_STATUS_ERROR</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error detected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dab66a1d8173c7ca28c3f23d41f9bde504" prot="public">
          <name>XMC_DAC_CH_STATUS_BUSY</name>
          <initializer>= 2U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DAC is busy </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dae5e20892a46f623543cddfc268d55cf6" prot="public">
          <name>XMC_DAC_CH_STATUS_ERROR_FREQ2LOW</name>
          <initializer>= 3U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Frequency can&apos;t be configured. Frequency is to low. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dabceea708468c56846195fb5a6336527b" prot="public">
          <name>XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH</name>
          <initializer>= 4U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Frequency can&apos;t be configured. Frequency is to high. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return types of the API&apos;s </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="168" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="167" bodyend="174"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_TRIGGER_t</name>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaf3c5c5c663d068867d11158e19e0c6e2" prot="public">
          <name>XMC_DAC_CH_TRIGGER_INTERNAL</name>
          <initializer>=
    (0x0U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal trigger as per frequency divider value </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaae8546e01f01037086fe41be6aeb3a07a" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | 0x0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from CCU80 Interrupt SR1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaa13dab51ee1d83ec23cfbe90deed07cb" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x2U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from CCU40 Interrupt SR1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa333a073d7997ad313e648b396c6fdbea" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x3U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from CCU41 Interrupt SR1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa44cd76b8737807422c8759b6ee6b8897" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x4U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from pin 2.9 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa2cfc68d782d6639fcfe359b7b9f1dee3" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x5U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from pin 2.8 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa0dd9de57bceb55915b0af6cb99fcfdac" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x6U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from USIC-0 DX1 Input Signal </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa5dd09d96ded088ce1f261e3446207a4d" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x7U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from USIC-1 DX1 Input Signal </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaad533a56154220c6844903436e8cc03a2" prot="public">
          <name>XMC_DAC_CH_TRIGGER_SOFTWARE</name>
          <initializer>=
    (0x2U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Software trigger </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigger sources for the data update </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="194" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="193" bodyend="213"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___d_a_c_1ga7612bd7d9cc0ff5168d9db256442f894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_DisableEvent</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_DisableEvent</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables service request by clearing <emphasis>SREN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gac2e2a705070f03534b1b91ea873b0aab" kindref="member">XMC_DAC_CH_EnableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1147" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1147" bodyend="1153"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gac8fe5610029750fe602088229eb3337c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_DisableOutput</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_DisableOutput</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Channel <emphasis>channel</emphasis> output is disabled by clearing the <emphasis>ANAEN</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title></title><para>A call to this API stops driving the converted digital input to its output.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" kindref="member">XMC_DAC_CH_EnableOutput()</ref>, <ref refid="group___d_a_c_1ga18bb5866a5a41077e678ff8c7c6de58c" kindref="member">XMC_DAC_CH_IsOutputEnabled()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="543" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="543" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga901c74dfd9e06a0bdb4ead0d87bb4f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_DisableOutputNegation</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_DisableOutputNegation</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Description:</title><para>Disables output negation.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Negation is disabled by clearing <emphasis>NEGATE</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Negation feature is not applicable for XMC45 devices. Calling this API in XMC45 devices doesn&apos;t have any effect.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga8bf98abf89180297539722636ed9d51d" kindref="member">XMC_DAC_CH_EnableOutputNegation()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1281" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1281" bodyend="1287"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga1b40c57534700d37e8b70c2ea2f2eea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_DisablePatternSignOutput</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_DisablePatternSignOutput</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables output sign information for Pattern Mode.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Sign output is disabled by clearing <emphasis>SIGNEN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / DAC1CFG0 register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode()</ref>, <ref refid="group___d_a_c_1ga973af2e272600c5eeb163ee83579c738" kindref="member">XMC_DAC_CH_EnablePatternSignOutput()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="792" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="792" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gac2e2a705070f03534b1b91ea873b0aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_EnableEvent</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_EnableEvent</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables service request by setting <emphasis>SREN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1). Trigger signal is generated upon conversion of each data.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>The service request signal can be connected to NVIC, DMA.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga7612bd7d9cc0ff5168d9db256442f894" kindref="member">XMC_DAC_CH_DisableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1126" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1126" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_EnableOutput</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_EnableOutput</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Channel <emphasis>channel</emphasis> output is enabled by setting the <emphasis>ANAEN</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para><emphasis>tSTARTUP</emphasis> time for DAC analog output starts after the <emphasis>ANAEN</emphasis> bit is set to one. After the expiry of the startup time the default value is driven to DAC output and a new value can be written.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gac8fe5610029750fe602088229eb3337c" kindref="member">XMC_DAC_CH_DisableOutput()</ref>, <ref refid="group___d_a_c_1ga18bb5866a5a41077e678ff8c7c6de58c" kindref="member">XMC_DAC_CH_IsOutputEnabled()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="519" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="519" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga8bf98abf89180297539722636ed9d51d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_EnableOutputNegation</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_EnableOutputNegation</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Description:</title><para>Enables output negation.</para>
</simplesect>
<simplesect kind="par"><title></title><para>By negating the DAC value is converted to its two&apos;s complement values. Can be used in Ramp mode to generate negative ramp. Negation in enabled by setting <emphasis>NEGATE</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Negation feature is not applicable for XMC45 devices. Calling this API in XMC45 devices doesn&apos;t have any effect.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga901c74dfd9e06a0bdb4ead0d87bb4f71" kindref="member">XMC_DAC_CH_DisableOutputNegation()</ref>, <ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1256" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1256" bodyend="1262"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga973af2e272600c5eeb163ee83579c738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_EnablePatternSignOutput</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_EnablePatternSignOutput</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the output sign information for Pattern Mode.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Sign output is enabled by setting <emphasis>SIGNEN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / DAC1CFG0 register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode()</ref>, <ref refid="group___d_a_c_1ga1b40c57534700d37e8b70c2ea2f2eea3" kindref="member">XMC_DAC_CH_DisablePatternSignOutput()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="764" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="764" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga08350c8116ed004dd36f5ba0902df12d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_t</ref></type>
        <definition>XMC_DAC_CH_OUTPUT_SCALE_t XMC_DAC_CH_GetOutputScale</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_GetOutputScale</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_OUTPUT_SCALE_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns scaling information for the data. The input data could be either up-scaled (multiplied), down-scaled (divided) or without scaling (as is).<linebreak/>
Scaling factor is determined by reading bit-fields <emphasis>MULDIV</emphasis> and <emphasis>SCALE</emphasis> of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1229" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1229" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga3cd25ca6afe7a138dcb5bb42c449db0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t XMC_DAC_CH_GetRampStart</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_GetRampStart</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Gets the ramp start value by reading <emphasis>DATA0</emphasis> bit-field of <emphasis>DAC0DATA</emphasis> register (for channel 0) / <emphasis>DATA1</emphasis> bit-field of <emphasis>DAC1DATA</emphasis> register (for channel 1). If the ramp counter reaches its stop value, it restarts from the start value with the next trigger pulse.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Ramp mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gaf692f5b60cf4c74192b554ec88254aab" kindref="member">XMC_DAC_CH_SetRampStart()</ref>, <ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref>, <ref refid="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" kindref="member">XMC_DAC_CH_GetRampStop()</ref>, <ref refid="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" kindref="member">XMC_DAC_CH_SetRampStop()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="846" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="846" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t XMC_DAC_CH_GetRampStop</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_GetRampStop</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Gets the ramp stop value by reading <emphasis>DATA0</emphasis> bit-field of <emphasis>DAC01DATA</emphasis> register (for channel 0) / <emphasis>DATA1</emphasis> bit-field of <emphasis>DAC01DATA</emphasis> register (for channel 1). If the ramp counter reaches its stop value, it restarts from the start value with the next trigger pulse.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Ramp mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" kindref="member">XMC_DAC_CH_SetRampStop()</ref>, <ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref>, <ref refid="group___d_a_c_1ga3cd25ca6afe7a138dcb5bb42c449db0f" kindref="member">XMC_DAC_CH_GetRampStart()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="900" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="900" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_Init</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)</argsstring>
        <name>XMC_DAC_CH_Init</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_DAC_CH_CONFIG_t</ref> *const</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the DAC channel configuration structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Initialises and configures the DAC <emphasis>channel</emphasis> with the configuration date pointed by <emphasis>config</emphasis>.</para>
</simplesect>
<simplesect kind="par"><title></title><para>DAC channel is initialised by configuring the registers <emphasis>DAC0CFG0</emphasis> and <emphasis>DAC0CFG1</emphasis> registers (for channel 0) / <emphasis>DAC1CFG0</emphasis> and <emphasis>DAC1CFG1</emphasis> registers (for channel 1). It enables the channel output by calling <ref refid="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" kindref="member">XMC_DAC_CH_EnableOutput()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga200437bd896ff475b50a8aa30aea0b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_DAC_CH_IsFifoEmpty</definition>
        <argsstring>(const XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_IsFifoEmpty</name>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool<linebreak/>
true - if FIFO is empty<linebreak/>
false - if FIFO is not empty</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns FIFO status.</para>
</simplesect>
<simplesect kind="par"><title></title><para>FIFIO empty status is determined by reading <emphasis>FIFOEMP</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga73e8d8035927fad18c69a6adf9451ace" kindref="member">XMC_DAC_CH_IsFifoFull()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1333" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1333" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga73e8d8035927fad18c69a6adf9451ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_DAC_CH_IsFifoFull</definition>
        <argsstring>(const XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_IsFifoFull</name>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool<linebreak/>
true - if FIFO is full<linebreak/>
false - if FIFO is not full</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns FIFO status.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title></title><para>FIFIO full status is determined by reading <emphasis>FIFOFUL</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga200437bd896ff475b50a8aa30aea0b42" kindref="member">XMC_DAC_CH_IsFifoEmpty()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1307" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1307" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga18bb5866a5a41077e678ff8c7c6de58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_DAC_CH_IsOutputEnabled</definition>
        <argsstring>(const XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_IsOutputEnabled</name>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <linebreak/>
 true - if analog output is enabled <linebreak/>
 false - if analog output is disabled <linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the status of DAC analog output.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Channel <emphasis>channel</emphasis> output enabled or disabled is determined by reading the <emphasis>ANAEN</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" kindref="member">XMC_DAC_CH_EnableOutput()</ref>, <ref refid="group___d_a_c_1gac8fe5610029750fe602088229eb3337c" kindref="member">XMC_DAC_CH_DisableOutput()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="569" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="569" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_SetFrequency</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Waveform frequency in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>frequency</emphasis> of DAC channel.</para>
</simplesect>
<simplesect kind="par"><title></title><para>The value <emphasis>frequency</emphasis> acts as clock divider. The smallest <emphasis>frequency</emphasis> divider value is 16. A valid <emphasis>frequency</emphasis> value should be within the range XMC_DAC_MIN_FREQ_DIVIDER to XMC_DAC_MAX_FREQ_DIVIDER. A value outside this range is considered as in valid and API returns error. Frequency <emphasis>frequency</emphasis> is configured by setting <emphasis>FREQ</emphasis> bit-field of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API only for Single value mode, Data mode and Noise mode. Call <ref refid="group___d_a_c_1gabdf995111daf8c4495bf1d2ef2ce58e3" kindref="member">XMC_DAC_CH_SetRampFrequency()</ref> in case of Ramp mode and <ref refid="group___d_a_c_1ga592cefaf4c5cc8e2cd83a1fa5472845d" kindref="member">XMC_DAC_CH_SetPatternFrequency()</ref> in case of Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gabdf995111daf8c4495bf1d2ef2ce58e3" kindref="member">XMC_DAC_CH_SetRampFrequency()</ref>, <ref refid="group___d_a_c_1ga592cefaf4c5cc8e2cd83a1fa5472845d" kindref="member">XMC_DAC_CH_SetPatternFrequency()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="955" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga1774217be659f37d640d13d48816762f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)</argsstring>
        <name>XMC_DAC_CH_SetMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1gab145218c4b905bdd94c85811b8ec7a2c" kindref="member">XMC_DAC_CH_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC operation mode</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the operating <emphasis>mode</emphasis> for the <emphasis>channel</emphasis> by setting the <emphasis>MODE</emphasis> bit-field of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1). Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1023" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1023" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga1e1f75defe221c0db5b4133ca927e574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetOutputOffset</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint8_t offset)</argsstring>
        <name>XMC_DAC_CH_SetOutputOffset</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the offset value.<linebreak/>
Offset range:0 - 255<linebreak/>
interpreted as : -128 to 127 (twos complement) in signed mode and 0 to 255 in unsigned mode.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Scaling can be applied to the output data after adding the <emphasis>offset</emphasis> value.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Channel <emphasis>channel</emphasis> <emphasis>offset</emphasis> value is loaded to the bit-field <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1177" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1177" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetOutputScale</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_OUTPUT_SCALE_t scale)</argsstring>
        <name>XMC_DAC_CH_SetOutputScale</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_t</ref></type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data scaling</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Data of the <emphasis>channel</emphasis> is scaled.</para>
</simplesect>
<simplesect kind="par"><title></title><para>The data can either be scaled up-scaled (multiplied), down-scaled (divided) or no scaling (as is) based on the value of <emphasis>scale</emphasis>. Scaling is configured by setting bit-fields <emphasis>MULDIV</emphasis> and <emphasis>SCALE</emphasis> of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga08350c8116ed004dd36f5ba0902df12d" kindref="member">XMC_DAC_CH_GetOutputScale()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1204" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1204" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gab3c155e1596241e323a06bd449674410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetPattern</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint8_t *const pattern)</argsstring>
        <name>XMC_DAC_CH_SetPattern</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint8_t *const</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>The data for the Pattern mode is written to the <emphasis>DAC0PATL</emphasis> and <emphasis>DAC0PATH</emphasis> registers. The API is called by <ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga973af2e272600c5eeb163ee83579c738" kindref="member">XMC_DAC_CH_EnablePatternSignOutput()</ref>, <ref refid="group___d_a_c_1ga1b40c57534700d37e8b70c2ea2f2eea3" kindref="member">XMC_DAC_CH_DisablePatternSignOutput()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga592cefaf4c5cc8e2cd83a1fa5472845d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetPatternFrequency</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_SetPatternFrequency</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>frequency</emphasis> of DAC channel by calling <ref refid="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" kindref="member">XMC_DAC_CH_SetFrequency()</ref>.</para>
</simplesect>
<simplesect kind="par"><title></title><para>For the Pattern mode, the <emphasis>frequency</emphasis> of operation depends on the total number of sample points <emphasis>XMC_DAC_SAMPLES_PER_PERIOD</emphasis>. Frequency <emphasis>frequency</emphasis> is multiplied by the total number of sample points, so that each trigger instance converts all the sample points of the pattern.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API only if the <emphasis>channel</emphasis> is set to Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; DAC samples per period in pattern mode </para>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1001" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1001" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gabdf995111daf8c4495bf1d2ef2ce58e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_SetRampFrequency</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>[Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>frequency</emphasis> of DAC channel by calling <ref refid="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" kindref="member">XMC_DAC_CH_SetFrequency()</ref>.</para>
</simplesect>
<simplesect kind="par"><title></title><para>For the Ramp mode, the <emphasis>frequency</emphasis> of operation depends on the total number of sample points (<emphasis>stop</emphasis> - <emphasis>start</emphasis>). Frequency <emphasis>frequency</emphasis> is multiplied by the total number of sample points, so that each trigger instance converts all the sample points of ramp.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API only if the <emphasis>channel</emphasis> is set to Ramp mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="978" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gaf692f5b60cf4c74192b554ec88254aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetRampStart</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)</argsstring>
        <name>XMC_DAC_CH_SetRampStart</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Ramp start point [0-4095]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the ramp start value by writing to the register <emphasis>DAC0DATA</emphasis> (for <emphasis>channel</emphasis> 0) or <emphasis>DAC1DATA</emphasis> (for <emphasis>channel</emphasis> 1). If the ramp counter reaches its stop value, it restarts from the <emphasis>start</emphasis> value with the next trigger pulse. Ensure <emphasis>start</emphasis> value is lower than the stop value.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Ramp mode. Start value is a 12 bit data.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga3cd25ca6afe7a138dcb5bb42c449db0f" kindref="member">XMC_DAC_CH_GetRampStart()</ref>, <ref refid="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" kindref="member">XMC_DAC_CH_GetRampStop()</ref>, <ref refid="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" kindref="member">XMC_DAC_CH_SetRampStop()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="821" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="821" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetRampStop</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)</argsstring>
        <name>XMC_DAC_CH_SetRampStop</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Ramp stop point [0-4095]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the ramp stop value by writing to the bit-field <emphasis>DATA0</emphasis> (for <emphasis>channel</emphasis> 0) or <emphasis>DATA1</emphasis> (for <emphasis>channel</emphasis> 1) of <emphasis>DAC01DATA</emphasis> register. If the ramp counter reaches its <emphasis>stop</emphasis> value, it restarts from the start value with the next trigger pulse. Ensure <emphasis>stop</emphasis> value is higher than the start value.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Ramp mode. Stop value is a 12 bit data.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" kindref="member">XMC_DAC_CH_GetRampStop()</ref>, <ref refid="group___d_a_c_1gaf692f5b60cf4c74192b554ec88254aab" kindref="member">XMC_DAC_CH_SetRampStart()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="874" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="874" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga5b0260c72dc3e2772c589ec48ffd2c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetSignedDataType</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_SetSignedDataType</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel&apos;s</emphasis> data to signed type by setting <emphasis>SIGN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1). The data for the conversion would then be treated as signed data type.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Offset and scaling can be applied to the data by calling <ref refid="group___d_a_c_1ga1e1f75defe221c0db5b4133ca927e574" kindref="member">XMC_DAC_CH_SetOutputOffset()</ref>, <ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gae4aae1cc510efc383a66eb5c9d258769" kindref="member">XMC_DAC_CH_SetUnsignedDataType()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1050" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1050" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gac96c41befd18976b555d134013f231c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetTrigger</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)</argsstring>
        <name>XMC_DAC_CH_SetTrigger</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Trigger source</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Selects the <emphasis>trigger</emphasis> source for the <emphasis>channel</emphasis> by configuring the bits TRIGSEL &amp; TRIGMOD of CFG register.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Channel <emphasis>channel</emphasis> trigger source is selected by <emphasis>TRIGSEL</emphasis> bit-field of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / DAC1CFG1 register(for channel 1). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="922" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="922" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gae4aae1cc510efc383a66eb5c9d258769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetUnsignedDataType</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_SetUnsignedDataType</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel&apos;s</emphasis> data to unsigned type by clearing <emphasis>SIGN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1). The data for the conversion would then be treated as unsigned data type.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Offset and scaling can be applied to the data by calling <ref refid="group___d_a_c_1ga1e1f75defe221c0db5b4133ca927e574" kindref="member">XMC_DAC_CH_SetOutputOffset()</ref>, <ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga5b0260c72dc3e2772c589ec48ffd2c80" kindref="member">XMC_DAC_CH_SetSignedDataType()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1075" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1075" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga9620b8278dcabb391d7cf8b2b69f8311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SoftwareTrigger</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_SoftwareTrigger</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>A call to this API generates a trigger pulse by setting <emphasis>SWTRIG</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1), provided the <emphasis>TRIGMOD</emphasis> bit of CFG register is set to <emphasis>XMC_DAC_CH_TRIGGER_SOFTWARE</emphasis>.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>If the <emphasis>channel</emphasis> is set to simultaneous data mode, SWTRIG bit of <emphasis>channel</emphasis> 1 is not valid. Only <emphasis>SWTRIG</emphasis> bit of channel 0 is used for channel 1.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gac96c41befd18976b555d134013f231c3" kindref="member">XMC_DAC_CH_SetTrigger()</ref>, <ref refid="group___d_a_c_1gac2e2a705070f03534b1b91ea873b0aab" kindref="member">XMC_DAC_CH_EnableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1101" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1101" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_StartDataMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points update trigger </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Waveform frequency [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t status</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Data mode. Trigger and frequency are configured.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call <ref refid="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" kindref="member">XMC_DAC_CH_Write()</ref> API to write the data. Call <ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode()</ref> to switch to Simultaneous data mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref>, <ref refid="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" kindref="member">XMC_DAC_CH_Write()</ref>, <ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga8cdc0d2ae0c0d3e0ad8ed6babcbd4c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_StartNoiseMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points update trigger </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Waveform frequency in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t status</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Noise mode. Trigger and frequency are configured. On a <emphasis>trigger</emphasis> the DAC starts converting and drives to <emphasis>channel</emphasis> output.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="720" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartPatternMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint8_t *const pattern, const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output, const XMC_DAC_CH_TRIGGER_t trigger, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_StartPatternMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint8_t *const</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1gaf1e4fb1ca9c2bad0de893feee98e6228" kindref="member">XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t</ref></type>
          <declname>sign_output</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Data table of a pattern </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign_output</parametername>
</parameternamelist>
<parameterdescription>
<para>Sign information of the waveform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points update trigger </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Waveform frequency in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t status</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Pattern mode. Trigger, frequency, sign output and data are configured. On a <emphasis>trigger</emphasis>, the <emphasis>pattern</emphasis> values are converted and driven to <emphasis>channel</emphasis> output.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref>, <ref refid="group___d_a_c_1ga1b40c57534700d37e8b70c2ea2f2eea3" kindref="member">XMC_DAC_CH_DisablePatternSignOutput()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartRampMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start, const uint16_t stop, const XMC_DAC_CH_TRIGGER_t trigger, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_StartRampMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Start point of the ramp [0-4095] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Stop point of the ramp [0-4095] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points update trigger </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Ramp frequency in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t status</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Ramp mode. Trigger, frequency, start and stop values are configured. On a <emphasis>trigger</emphasis> ramp values are converted and driven to <emphasis>channel</emphasis> output. Start and stop have the range of [0-4095]. Stop should be equal or greater than start.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>If the ramp counter reaches its <emphasis>stop</emphasis> value, it restarts from the <emphasis>start</emphasis> value with the next trigger pulse.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref>, <ref refid="group___d_a_c_1ga3cd25ca6afe7a138dcb5bb42c449db0f" kindref="member">XMC_DAC_CH_GetRampStart()</ref>, <ref refid="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" kindref="member">XMC_DAC_CH_GetRampStop()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga6c8a12197978db3edc3216444faee6b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_StartSingleValueMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Single Value Mode by calling <ref refid="group___d_a_c_1ga1774217be659f37d640d13d48816762f" kindref="member">XMC_DAC_CH_SetMode()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call <ref refid="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" kindref="member">XMC_DAC_CH_Write()</ref> API to write the data.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" kindref="member">XMC_DAC_CH_Write()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_Write</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t data)</argsstring>
        <name>XMC_DAC_CH_Write</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written [0-4095]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Writes the <emphasis>data</emphasis> to the <emphasis>channel&apos;s</emphasis> DATA register.</para>
</simplesect>
<simplesect kind="par"><title></title><para>The <emphasis>data</emphasis> is then converted and driven to the output. If the trigger is set, On a trigger event the data in DATA register is converted and driven to <emphasis>channel</emphasis> output. Data <emphasis>data</emphasis> is written to the <emphasis>channel</emphasis> by loading <emphasis>data</emphasis> to <emphasis>DATA0</emphasis> bit-field of <emphasis>DAC0DATA</emphasis> (for channel 0) / <emphasis>DATA1</emphasis> bit-field of <emphasis>DAC1DATA</emphasis> register (for channel 1). data has the range of [0-4095].</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>The API can be used for Single Value Mode, Data Mode (Individual) &amp; Ramp Mode. Call <ref refid="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" kindref="member">XMC_DAC_CH_EnableOutput()</ref> API to enable analog output.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga6c8a12197978db3edc3216444faee6b8" kindref="member">XMC_DAC_CH_StartSingleValueMode()</ref>, <ref refid="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" kindref="member">XMC_DAC_CH_StartDataMode()</ref>, <ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="601" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="601" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga67de176f36749cba8a65ad1b9815f0dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_Disable</definition>
        <argsstring>(XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_Disable</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables DAC clock and resets DAC.</para>
</simplesect>
<simplesect kind="par"><title></title><para>DAC clock is disabled by setting <emphasis>DAC</emphasis> bit of <emphasis>CGATSET1</emphasis> register. DAC is reset by setting <emphasis>DACRS</emphasis> bit of <emphasis>PRSET1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gafdcd0136ab6dfc0d98d463136765ab69" kindref="member">XMC_DAC_IsEnabled()</ref>, <ref refid="group___d_a_c_1gab97383cd03ebb21046c403c5c835f55c" kindref="member">XMC_DAC_Enable()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gab9668535a4a093bd1a3eb36cbc474a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_DisableSimultaneousDataMode</definition>
        <argsstring>(XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_DisableSimultaneousDataMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>DAC switches to independent data mode from simultaneous Data mode.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Independent data mode is the default data mode. Simultaneous data mode is disabled by clearing <emphasis>DATMOD</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" kindref="member">XMC_DAC_CH_StartDataMode()</ref>, <ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="453" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="453" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gab97383cd03ebb21046c403c5c835f55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_Enable</definition>
        <argsstring>(XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_Enable</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables DAC clock and releases DAC reset.<linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title></title><para>Enabling DAC is the first step of DAC initialisation. This API is called by <ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref>. DAC clock is enabled by setting <emphasis>DAC</emphasis> bit of <emphasis>CGATCLR1</emphasis> register. DAC reset is released by setting <emphasis>DACRS</emphasis> bit of <emphasis>PRCLR1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gafdcd0136ab6dfc0d98d463136765ab69" kindref="member">XMC_DAC_IsEnabled()</ref>, <ref refid="group___d_a_c_1ga67de176f36749cba8a65ad1b9815f0dd" kindref="member">XMC_DAC_Disable()</ref>, <ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_EnableSimultaneousDataMode</definition>
        <argsstring>(XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_EnableSimultaneousDataMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>DAC switches to Simultaneous data mode from Independent data mode.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Independent data mode is the default data mode. Simultaneous data mode is enabled by setting <emphasis>DATMOD</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Set channel 0 and channel 1 to Data mode before calling this API.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga6c8a12197978db3edc3216444faee6b8" kindref="member">XMC_DAC_CH_StartSingleValueMode()</ref>, <ref refid="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" kindref="member">XMC_DAC_CH_StartDataMode()</ref>, <ref refid="group___d_a_c_1ga81b11cead3aaabed68b046d40628f89d" kindref="member">XMC_DAC_SimultaneousWrite()</ref>, <ref refid="group___d_a_c_1gab9668535a4a093bd1a3eb36cbc474a9f" kindref="member">XMC_DAC_DisableSimultaneousDataMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="430" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="430" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gafdcd0136ab6dfc0d98d463136765ab69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_DAC_IsEnabled</definition>
        <argsstring>(const XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_IsEnabled</name>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool<linebreak/>
 true - if DAC is enabled<linebreak/>
 false - if DAC is disabled</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the state of the DAC.</para>
</simplesect>
<simplesect kind="par"><title></title><para>DAC enabled status is determined by referring to <emphasis>DACRS</emphasis> bit of <emphasis>PRSTAT1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gab97383cd03ebb21046c403c5c835f55c" kindref="member">XMC_DAC_Enable()</ref>, <ref refid="group___d_a_c_1ga67de176f36749cba8a65ad1b9815f0dd" kindref="member">XMC_DAC_Disable()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga81b11cead3aaabed68b046d40628f89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_SimultaneousWrite</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint16_t data0, const uint16_t data1)</argsstring>
        <name>XMC_DAC_SimultaneousWrite</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>data0</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>data1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data0</parametername>
</parameternamelist>
<parameterdescription>
<para>Data for DAC channel 0 [0-4095] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data1</parametername>
</parameternamelist>
<parameterdescription>
<para>Data for DAC channel 1 [0-4095]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>The data (<emphasis>data0</emphasis> &amp; <emphasis>data1</emphasis>) to be converted by channel 0 &amp; channel 1 are updated to <emphasis>DATA1</emphasis> bit-fields of <emphasis>DAC01DATA</emphasis> register. data0 and data1 have the range of [0-4095].</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Channel 0 and Channel 1 should be set to simultaneous data mode before calling this API.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="478" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="478" bodyend="483"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="date"><para>2012-12-16 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="63"><highlight class="preprocessor">#ifndef<sp/>XMC_DAC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_DAC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>HEADER<sp/>FILES</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xmc_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DAC<sp/>peripheral<sp/>is<sp/>not<sp/>available<sp/>on<sp/>XMC1X<sp/>devices.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>MACROS</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_DAC0<sp/>((XMC_DAC_t<sp/>*)DAC_BASE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor">#define<sp/>XMC_DAC_DACCFG_NEGATE_Msk<sp/>(0x10000000UL)<sp/></highlight><highlight class="comment">/*&lt;<sp/>DAC<sp/>negation<sp/>enable<sp/>mask<sp/>in<sp/>XMC44<sp/>device<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_DAC_NO_CHANNELS<sp/>(2U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor">#define<sp/>XMC_DAC_SAMPLES_PER_PERIOD<sp/>(32U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor">#define<sp/>XMC_DAC_PATTERN_TRIANGLE<sp/><sp/>{0U,<sp/>4U,<sp/>8U,<sp/>12U,<sp/>16U,<sp/>19U,<sp/>23U,<sp/>27U,<sp/>31U}<sp/></highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor">#define<sp/>XMC_DAC_PATTERN_SINE<sp/><sp/><sp/><sp/><sp/><sp/>{0U,<sp/>6U,<sp/>12U,<sp/>17U,<sp/>22U,<sp/>26U,<sp/>29U,<sp/>30U,<sp/>31U}<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor">#define<sp/>XMC_DAC_PATTERN_RECTANGLE<sp/>{31U,<sp/>31U,<sp/>31U,<sp/>31U,<sp/>31U,<sp/>31U,<sp/>31U,<sp/>31U,<sp/>31U}<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor">#define<sp/>XMC_DAC_IS_DAC_VALID(PTR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((PTR)<sp/>==<sp/>XMC_DAC0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_DAC_IS_CHANNEL_VALID(CH)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CH<sp/>&lt;<sp/>XMC_DAC_NO_CHANNELS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_DAC_IS_TRIGGER_VALID(TRIGGER)<sp/><sp/><sp/><sp/>((TRIGGER<sp/>==<sp/>XMC_DAC_CH_TRIGGER_INTERNAL)<sp/>||\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TRIGGER<sp/>==<sp/>XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1)<sp/>||\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TRIGGER<sp/>==<sp/>XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1)<sp/>||\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TRIGGER<sp/>==<sp/>XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1)<sp/>||\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TRIGGER<sp/>==<sp/>XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9)<sp/>||\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TRIGGER<sp/>==<sp/>XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8)<sp/>||\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TRIGGER<sp/>==<sp/>XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS)<sp/>||\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TRIGGER<sp/>==<sp/>XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS)<sp/>||\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TRIGGER<sp/>==<sp/>XMC_DAC_CH_TRIGGER_SOFTWARE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_DAC_IS_MODE_VALID(MODE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((MODE<sp/>==<sp/>XMC_DAC_CH_MODE_IDLE)<sp/>||\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MODE<sp/>==<sp/>XMC_DAC_CH_MODE_SINGLE)<sp/>||\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MODE<sp/>==<sp/>XMC_DAC_CH_MODE_DATA)<sp/>||\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MODE<sp/>==<sp/>XMC_DAC_CH_MODE_PATTERN)<sp/>||\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MODE<sp/>==<sp/>XMC_DAC_CH_MODE_NOISE)<sp/>||\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MODE<sp/>==<sp/>XMC_DAC_CH_MODE_RAMP))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_DAC_IS_OUTPUT_SCALE_VALID(SCALE)<sp/>((SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_NONE)<sp/>||\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_MUL_2)<sp/>||\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_MUL_4)<sp/>||\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_MUL_8)<sp/>||\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_MUL_16)<sp/>||\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_MUL_32)<sp/>||\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_MUL_64)<sp/>||\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_MUL_128)<sp/>||\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_DIV_2)<sp/>||\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_DIV_4)<sp/>||\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_DIV_8)<sp/>||\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_DIV_16)<sp/>||\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_DIV_32)<sp/>||\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_DIV_64)<sp/>||\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SCALE<sp/>==<sp/>XMC_DAC_CH_OUTPUT_SCALE_DIV_128))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>ENUMS</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_DAC_CH_STATUS</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4da4143bb37824ebceee0c840d12ed980ef" kindref="member">XMC_DAC_CH_STATUS_OK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0U,<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dab37b65d8effd30615d9e519bf684e647" kindref="member">XMC_DAC_CH_STATUS_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1U,<sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dab66a1d8173c7ca28c3f23d41f9bde504" kindref="member">XMC_DAC_CH_STATUS_BUSY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2U,<sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dae5e20892a46f623543cddfc268d55cf6" kindref="member">XMC_DAC_CH_STATUS_ERROR_FREQ2LOW</ref><sp/><sp/>=<sp/>3U,<sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dabceea708468c56846195fb5a6336527b" kindref="member">XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH</ref><sp/>=<sp/>4U<sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}<sp/><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_DAC_CH_MODE</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cab60cc89d056f1e994f95e5cf0ab3ee3f" kindref="member">XMC_DAC_CH_MODE_IDLE</ref><sp/><sp/><sp/><sp/>=<sp/>0x0U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG0_MODE_Pos,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caebed4f6d5058ad45ab0a93322898a102" kindref="member">XMC_DAC_CH_MODE_SINGLE</ref><sp/><sp/>=<sp/>0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG0_MODE_Pos,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca9dae61c469e47cd75be8a9e9689d8393" kindref="member">XMC_DAC_CH_MODE_DATA</ref><sp/><sp/><sp/><sp/>=<sp/>0x2U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG0_MODE_Pos,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca00245fd95505e05d1c3cc6670265fef0" kindref="member">XMC_DAC_CH_MODE_PATTERN</ref><sp/>=<sp/>0x3U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG0_MODE_Pos,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caf63f03eca43e965fba40285cb92e3e62" kindref="member">XMC_DAC_CH_MODE_NOISE</ref><sp/><sp/><sp/>=<sp/>0x4U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG0_MODE_Pos,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cac6e5937740ac5cc3200c5f590e091fbf" kindref="member">XMC_DAC_CH_MODE_RAMP</ref><sp/><sp/><sp/><sp/>=<sp/>0x5U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG0_MODE_Pos<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}<sp/><ref refid="group___d_a_c_1gab145218c4b905bdd94c85811b8ec7a2c" kindref="member">XMC_DAC_CH_MODE_t</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_DAC_CH_TRIGGER</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaf3c5c5c663d068867d11158e19e0c6e2" kindref="member">XMC_DAC_CH_TRIGGER_INTERNAL</ref><sp/>=</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x0U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGMOD_Pos),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaae8546e01f01037086fe41be6aeb3a07a" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1</ref><sp/>=</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGMOD_Pos)<sp/>|<sp/>0x0U,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaa13dab51ee1d83ec23cfbe90deed07cb" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1</ref><sp/>=</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGMOD_Pos)<sp/>|<sp/>(0x2U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGSEL_Pos),<sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa333a073d7997ad313e648b396c6fdbea" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1</ref><sp/>=</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGMOD_Pos)<sp/>|<sp/>(0x3U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGSEL_Pos),<sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa44cd76b8737807422c8759b6ee6b8897" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9</ref><sp/>=</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGMOD_Pos)<sp/>|<sp/>(0x4U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGSEL_Pos),<sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa2cfc68d782d6639fcfe359b7b9f1dee3" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8</ref><sp/>=</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGMOD_Pos)<sp/>|<sp/>(0x5U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGSEL_Pos),<sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa0dd9de57bceb55915b0af6cb99fcfdac" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS</ref><sp/>=</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGMOD_Pos)<sp/>|<sp/>(0x6U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGSEL_Pos),<sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa5dd09d96ded088ce1f261e3446207a4d" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS</ref><sp/>=</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGMOD_Pos)<sp/>|<sp/>(0x7U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGSEL_Pos),<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaad533a56154220c6844903436e8cc03a2" kindref="member">XMC_DAC_CH_TRIGGER_SOFTWARE</ref><sp/>=</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x2U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_TRIGMOD_Pos)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_DAC_CH_DATA_TYPE</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggabed6dedd39e5a4e8b5b88c780de85ea9a515ff00c5ccd8b9565257a0771347583" kindref="member">XMC_DAC_CH_DATA_TYPE_UNSIGNED</ref><sp/>=<sp/>0U,<sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggabed6dedd39e5a4e8b5b88c780de85ea9a3258da7e193fc755383c480a337037ff" kindref="member">XMC_DAC_CH_DATA_TYPE_SIGNED</ref><sp/>=<sp/>1U<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal">}<sp/><ref refid="group___d_a_c_1gabed6dedd39e5a4e8b5b88c780de85ea9" kindref="member">XMC_DAC_CH_DATA_TYPE_t</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_DAC_CH_OUTPUT_SCALE</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007ae98552d53e632106ecf1ce567b570a47" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_NONE</ref><sp/>=</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0U,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a01ebb295f7321fddbaa3ec0a969bdad6" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_2</ref><sp/>=</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_MULDIV_Pos)<sp/>|<sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a7e8a6467c766097010ce1c173715dbc8" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_4</ref><sp/>=</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_MULDIV_Pos)<sp/>|<sp/>(0x2U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007aae6733f0486d9c306e749f222ef32e86" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_8</ref><sp/>=</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_MULDIV_Pos)<sp/>|<sp/>(0x3U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a985ee78289a117a0f2277f8293385e50" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_16</ref><sp/>=</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_MULDIV_Pos)<sp/>|<sp/>(0x4U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a6bcf2a549695fde6da39e76711f13f69" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_32</ref><sp/>=</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_MULDIV_Pos)<sp/>|<sp/>(0x5U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a3d0fc15564713d3176a85f326c3c100a" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_64</ref><sp/>=</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_MULDIV_Pos)<sp/>|<sp/>(0x6U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007af6b6551310573ea15e033fa2220ccea9" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_128</ref><sp/>=</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>(0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_MULDIV_Pos)<sp/>|<sp/>(0x7U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a81b76aa6cd1039295158077f779bcfbe" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_2</ref><sp/>=</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>0x1U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a097c24e5d23da7a32ae91d98ba51cc8e" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_4</ref><sp/>=</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>0x2U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a677b0dc54045bcec45ed017b90585726" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_8</ref><sp/>=</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>0x3U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a66927dc300c8176b545bb8b3ac886ef2" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_16</ref><sp/>=</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>0x4U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a43798edd742ce7279d2604f9e9c51a44" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_32</ref><sp/>=</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>0x5U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a23006b4a49f768550ba7ca5928344281" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_64</ref><sp/>=</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>0x6U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007afed3adc5704981d3b3efab55fea9842a" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_128</ref><sp/>=</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>0x7U<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_SCALE_Pos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal">}<sp/><ref refid="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_t</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_DAC_CH_OUTPUT_NEGATION</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggaf5e272a25affac666157d497783ccb2ba356969170b9cf3b7f70fd82d9bfe373a" kindref="member">XMC_DAC_CH_OUTPUT_NEGATION_DISABLED</ref><sp/>=<sp/>0U,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggaf5e272a25affac666157d497783ccb2ba42549ee202f4c08f9e638656ae320dbb" kindref="member">XMC_DAC_CH_OUTPUT_NEGATION_ENABLED</ref><sp/>=<sp/>1U<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="268"><highlight class="normal">}<sp/><ref refid="group___d_a_c_1gaf5e272a25affac666157d497783ccb2b" kindref="member">XMC_DAC_CH_OUTPUT_NEGATION_t</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_DAC_CH_PATTERN_SIGN_OUTPUT</highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggaf1e4fb1ca9c2bad0de893feee98e6228a4ae92975858953559259477d7de9274c" kindref="member">XMC_DAC_CH_PATTERN_SIGN_OUTPUT_DISABLED</ref><sp/>=<sp/>0U,<sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><ref refid="group___d_a_c_1ggaf1e4fb1ca9c2bad0de893feee98e6228a4735536396880c1868745af9944ad12a" kindref="member">XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED</ref><sp/>=<sp/>1U<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal">}<sp/><ref refid="group___d_a_c_1gaf1e4fb1ca9c2bad0de893feee98e6228" kindref="member">XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>DATA<sp/>STRUCTURES</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*******************************************************************************/</highlight></codeline>
<codeline lineno="285" refid="struct_x_m_c___d_a_c__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>__I<sp/><sp/>uint32_t<sp/><sp/>ID;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>__IO<sp/>uint32_t<sp/>low;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>__IO<sp/>uint32_t<sp/>high;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}<sp/>DACCFG[<ref refid="group___d_a_c_1gaca090211fa47a1235a81308382f7241c" kindref="member">XMC_DAC_NO_CHANNELS</ref>];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>__IO<sp/>uint32_t<sp/>DACDATA[<ref refid="group___d_a_c_1gaca090211fa47a1235a81308382f7241c" kindref="member">XMC_DAC_NO_CHANNELS</ref>];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>__IO<sp/>uint32_t<sp/>DAC01DATA;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>__IO<sp/>uint32_t<sp/>low;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>__IO<sp/>uint32_t<sp/>high;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}<sp/>DACPAT[<ref refid="group___d_a_c_1gaca090211fa47a1235a81308382f7241c" kindref="member">XMC_DAC_NO_CHANNELS</ref>];</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">/*Anonymous<sp/>structure/union<sp/>guard<sp/>start*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CC_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>anon_unions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__TASKING__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>586</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="struct_x_m_c___d_a_c___c_h___c_o_n_f_i_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_DAC_CH_CONFIG</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>:<sp/>23;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>data_type:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>:<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>output_negation:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cfg0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>output_scale:<sp/>4;<sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>output_offset:<sp/>8;<sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>:<sp/>20;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cfg1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___d_a_c___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_DAC_CH_CONFIG_t</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">/*Anonymous<sp/>structure/union<sp/>guard<sp/>end*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CC_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__TASKING__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>restore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>API<sp/>PROTOTYPES</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gab97383cd03ebb21046c403c5c835f55c" kindref="member">XMC_DAC_Enable</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga67de176f36749cba8a65ad1b9815f0dd" kindref="member">XMC_DAC_Disable</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gafdcd0136ab6dfc0d98d463136765ab69" kindref="member">XMC_DAC_IsEnabled</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_EnableSimultaneousDataMode:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[0].high<sp/>|=<sp/>DAC_DAC0CFG1_DATMOD_Msk;</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gab9668535a4a093bd1a3eb36cbc474a9f" kindref="member">XMC_DAC_DisableSimultaneousDataMode</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_DisableSimultaneousDataMode:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[0].high<sp/>&amp;=<sp/>~DAC_DAC0CFG1_DATMOD_Msk;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga81b11cead3aaabed68b046d40628f89d" kindref="member">XMC_DAC_SimultaneousWrite</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>data0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>data1)</highlight></codeline>
<codeline lineno="479"><highlight class="normal">{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_SimultaneousWrite:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>dac-&gt;DAC01DATA<sp/>=<sp/>(data0<sp/>&lt;&lt;<sp/>DAC_DAC01DATA_DATA0_Pos)<sp/>|<sp/>(data1<sp/>&lt;&lt;<sp/>DAC_DAC01DATA_DATA1_Pos);</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___d_a_c___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_DAC_CH_CONFIG_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>config);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" kindref="member">XMC_DAC_CH_EnableOutput</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_EnableOutput:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_EnableOutput:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].high<sp/>|=<sp/>DAC_DAC0CFG1_ANAEN_Msk;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gac8fe5610029750fe602088229eb3337c" kindref="member">XMC_DAC_CH_DisableOutput</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_DisableOutput:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_DisableOutput:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].high<sp/>&amp;=<sp/>~DAC_DAC0CFG1_ANAEN_Msk;</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga18bb5866a5a41077e678ff8c7c6de58c" kindref="member">XMC_DAC_CH_IsOutputEnabled</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_IsOutputEnabled:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_IsOutputEnabled:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(dac-&gt;DACCFG[channel].high<sp/>&amp;<sp/>DAC_DAC0CFG1_ANAEN_Msk);</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" kindref="member">XMC_DAC_CH_Write</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>data)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_Write:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_Write:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>dac-&gt;DACDATA[channel]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref><sp/><ref refid="group___d_a_c_1ga6c8a12197978db3edc3216444faee6b8" kindref="member">XMC_DAC_CH_StartSingleValueMode</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref><sp/><ref refid="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" kindref="member">XMC_DAC_CH_StartDataMode</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref><sp/>trigger,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>frequency);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref><sp/><ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>start,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>stop,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref><sp/>trigger,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>frequency);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref><sp/><ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pattern,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gaf1e4fb1ca9c2bad0de893feee98e6228" kindref="member">XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t</ref><sp/>sign_output,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref><sp/>trigger,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>frequency);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref><sp/><ref refid="group___d_a_c_1ga8cdc0d2ae0c0d3e0ad8ed6babcbd4c04" kindref="member">XMC_DAC_CH_StartNoiseMode</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref><sp/>trigger,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>frequency);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gab3c155e1596241e323a06bd449674410" kindref="member">XMC_DAC_CH_SetPattern</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pattern);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga973af2e272600c5eeb163ee83579c738" kindref="member">XMC_DAC_CH_EnablePatternSignOutput</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_EnablePatternSignOutput:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_EnablePatternSignOutput:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].low<sp/>|=<sp/>DAC_DAC0CFG0_SIGNEN_Msk;</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga1b40c57534700d37e8b70c2ea2f2eea3" kindref="member">XMC_DAC_CH_DisablePatternSignOutput</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_DisablePatternSignOutput:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_DisablePatternSignOutput:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].low<sp/>&amp;=<sp/>~DAC_DAC0CFG0_SIGNEN_Msk;</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gaf692f5b60cf4c74192b554ec88254aab" kindref="member">XMC_DAC_CH_SetRampStart</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>start)</highlight></codeline>
<codeline lineno="822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetRampStart:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetRampStart:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>dac-&gt;DACDATA[channel]<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal">__STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group___d_a_c_1ga3cd25ca6afe7a138dcb5bb42c449db0f" kindref="member">XMC_DAC_CH_GetRampStart</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_GetRampStart:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_GetRampStart:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)(dac-&gt;DACDATA[channel]);</highlight></codeline>
<codeline lineno="852"><highlight class="normal">}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" kindref="member">XMC_DAC_CH_SetRampStop</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>stop)</highlight></codeline>
<codeline lineno="875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetRampStop:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetRampStop:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>dac-&gt;DAC01DATA<sp/>=<sp/>(dac-&gt;DAC01DATA<sp/>&amp;<sp/>~(DAC_DAC01DATA_DATA0_Msk<sp/>&lt;&lt;<sp/>(channel<sp/>*<sp/>DAC_DAC01DATA_DATA1_Pos)))<sp/>|</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(stop<sp/>&lt;&lt;<sp/>(channel<sp/>*<sp/>DAC_DAC01DATA_DATA1_Pos));</highlight></codeline>
<codeline lineno="881"><highlight class="normal">}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal">__STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" kindref="member">XMC_DAC_CH_GetRampStop</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="901"><highlight class="normal">{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_GetRampStop:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_GetRampStop:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((dac-&gt;DAC01DATA<sp/>&gt;&gt;<sp/>(channel<sp/>*<sp/>DAC_DAC01DATA_DATA1_Pos))<sp/>&amp;<sp/>DAC_DAC01DATA_DATA0_Msk);</highlight></codeline>
<codeline lineno="906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gac96c41befd18976b555d134013f231c3" kindref="member">XMC_DAC_CH_SetTrigger</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref><sp/>trigger)</highlight></codeline>
<codeline lineno="923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetTrigger:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetTrigger:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetTrigger:<sp/>trigger<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_TRIGGER_VALID(trigger));</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].high<sp/>=<sp/>(dac-&gt;DACCFG[channel].high<sp/>&amp;<sp/>~(DAC_DAC0CFG1_TRIGSEL_Msk<sp/>|<sp/>DAC_DAC0CFG1_TRIGMOD_Msk))<sp/>|</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger;</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref><sp/><ref refid="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" kindref="member">XMC_DAC_CH_SetFrequency</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>frequency);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref><sp/><ref refid="group___d_a_c_1gabdf995111daf8c4495bf1d2ef2ce58e3" kindref="member">XMC_DAC_CH_SetRampFrequency</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>frequency);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal">__STATIC_INLINE<sp/><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref><sp/><ref refid="group___d_a_c_1ga592cefaf4c5cc8e2cd83a1fa5472845d" kindref="member">XMC_DAC_CH_SetPatternFrequency</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>frequency)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetPatternFrequency:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetPatternFrequency:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" kindref="member">XMC_DAC_CH_SetFrequency</ref>(dac,<sp/>channel,<sp/>frequency<sp/>*<sp/><ref refid="group___d_a_c_1gaed680bf1e0aacea27ca505c00822eef9" kindref="member">XMC_DAC_SAMPLES_PER_PERIOD</ref>);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga1774217be659f37d640d13d48816762f" kindref="member">XMC_DAC_CH_SetMode</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gab145218c4b905bdd94c85811b8ec7a2c" kindref="member">XMC_DAC_CH_MODE_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetMode:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetMode:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetMode:<sp/>trigger<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_MODE_VALID(mode));</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].low<sp/>=<sp/>(dac-&gt;DACCFG[channel].low<sp/>&amp;<sp/>~DAC_DAC0CFG0_MODE_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga5b0260c72dc3e2772c589ec48ffd2c80" kindref="member">XMC_DAC_CH_SetSignedDataType</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetSignedDataType:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetSignedDataType:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].low<sp/>|=<sp/>(DAC_DAC0CFG0_SIGN_Msk);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gae4aae1cc510efc383a66eb5c9d258769" kindref="member">XMC_DAC_CH_SetUnsignedDataType</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetUnsignedDataType:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetUnsignedDataType:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].low<sp/>&amp;=<sp/>~(DAC_DAC0CFG0_SIGN_Msk);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga9620b8278dcabb391d7cf8b2b69f8311" kindref="member">XMC_DAC_CH_SoftwareTrigger</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SoftwareTrigger:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SoftwareTrigger:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].high<sp/>|=<sp/>DAC_DAC0CFG1_SWTRIG_Msk;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gac2e2a705070f03534b1b91ea873b0aab" kindref="member">XMC_DAC_CH_EnableEvent</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_EnableEvent:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_EnableEvent:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].low<sp/>|=<sp/>DAC_DAC0CFG0_SREN_Msk;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga7612bd7d9cc0ff5168d9db256442f894" kindref="member">XMC_DAC_CH_DisableEvent</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_DisableEvent:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_DisableEvent:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].low<sp/>&amp;=<sp/>~DAC_DAC0CFG0_SREN_Msk;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga1e1f75defe221c0db5b4133ca927e574" kindref="member">XMC_DAC_CH_SetOutputOffset</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>offset)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetOutputOffset:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetOutputOffset:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].high<sp/>=<sp/>(dac-&gt;DACCFG[channel].high<sp/>&amp;<sp/>~DAC_DAC0CFG1_OFFS_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>&lt;&lt;<sp/>DAC_DAC0CFG1_OFFS_Pos;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_t</ref><sp/>scale)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetOutputScale:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetOutputScale:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_SetOutputScale:<sp/>scale<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_OUTPUT_SCALE_VALID(scale));</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].high<sp/>=<sp/>(dac-&gt;DACCFG[channel].high<sp/>&amp;<sp/>~(DAC_DAC0CFG1_MULDIV_Msk<sp/>|<sp/>DAC_DAC0CFG1_SCALE_Msk))<sp/>|</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal">__STATIC_INLINE<sp/><ref refid="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_t</ref><sp/><ref refid="group___d_a_c_1ga08350c8116ed004dd36f5ba0902df12d" kindref="member">XMC_DAC_CH_GetOutputScale</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_GetOutputScale:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_GetOutputScale:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_t</ref>)(dac-&gt;DACCFG[channel].high<sp/>&amp;<sp/>(DAC_DAC0CFG1_MULDIV_Msk<sp/>|<sp/>DAC_DAC0CFG1_SCALE_Msk));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga8bf98abf89180297539722636ed9d51d" kindref="member">XMC_DAC_CH_EnableOutputNegation</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_EnableOutputNegation:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_EnableOutputNegation:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].low<sp/>|=<sp/>XMC_DAC_DACCFG_NEGATE_Msk;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga901c74dfd9e06a0bdb4ead0d87bb4f71" kindref="member">XMC_DAC_CH_DisableOutputNegation</ref>(<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_DisableOutputNegation:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_DisableOutputNegation:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>dac-&gt;DACCFG[channel].low<sp/>&amp;=<sp/>~XMC_DAC_DACCFG_NEGATE_Msk;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga73e8d8035927fad18c69a6adf9451ace" kindref="member">XMC_DAC_CH_IsFifoFull</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_IsFifoFull:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_IsFifoFull:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(dac-&gt;DACCFG[channel].low<sp/>&amp;<sp/>DAC_DAC0CFG0_FIFOFUL_Msk);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c_1ga200437bd896ff475b50a8aa30aea0b42" kindref="member">XMC_DAC_CH_IsFifoEmpty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dac,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_IsFifoEmpty:<sp/>dac<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_DAC_VALID(dac));</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_DAC_CH_IsFifoEmpty:<sp/>channel<sp/>parameter<sp/>not<sp/>valid\n&quot;</highlight><highlight class="normal">,<sp/>XMC_DAC_IS_CHANNEL_VALID(channel));</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(dac-&gt;DACCFG[channel].low<sp/>&amp;<sp/>DAC_DAC0CFG0_FIFOEMP_Msk);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(DAC)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>XMC_DAC_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group___s_c_u" kind="group">
    <compoundname>SCU</compoundname>
    <title>System Control Unit(SCU)</title>
    <innerclass refid="struct_x_m_c___s_c_u___c_l_o_c_k___c_o_n_f_i_g__t" prot="public">XMC_SCU_CLOCK_CONFIG_t</innerclass>
    <innerclass refid="struct_x_m_c___s_c_u___c_l_o_c_k___s_y_s_p_l_l___c_o_n_f_i_g__t" prot="public">XMC_SCU_CLOCK_SYSPLL_CONFIG_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___s_c_u_1gaee17d2349a9e695f89aaa67972035bb6" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_BOOTMODE_t</name>
        <enumvalue id="group___s_c_u_1ggaee17d2349a9e695f89aaa67972035bb6a356f43937f5b8c1b645e397cd5f9d472" prot="public">
          <name>XMC_SCU_BOOTMODE_NORMAL</name>
          <initializer>= (0UL &lt;&lt; SCU_GENERAL_STCON_SWCON_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boot from start of flash. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaee17d2349a9e695f89aaa67972035bb6a43012a7d194983b13f5395978f211856" prot="public">
          <name>XMC_SCU_BOOTMODE_ASC_BSL</name>
          <initializer>= (1UL &lt;&lt; SCU_GENERAL_STCON_SWCON_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>UART bootstrap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaee17d2349a9e695f89aaa67972035bb6a3a6a3ee2f5707b70bbf3ed1f52433130" prot="public">
          <name>XMC_SCU_BOOTMODE_BMI</name>
          <initializer>= (2UL &lt;&lt; SCU_GENERAL_STCON_SWCON_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boot Mode Index - Customized boot sequence. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaee17d2349a9e695f89aaa67972035bb6a1251cc9c5f1230b2d04e03597ea4da3c" prot="public">
          <name>XMC_SCU_BOOTMODE_CAN_BSL</name>
          <initializer>= (3UL &lt;&lt; SCU_GENERAL_STCON_SWCON_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN bootstrap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaee17d2349a9e695f89aaa67972035bb6a7d3ce72b7b54b6dd42e7104b9b1f0222" prot="public">
          <name>XMC_SCU_BOOTMODE_PSRAM_BOOT</name>
          <initializer>= (4UL &lt;&lt; SCU_GENERAL_STCON_SWCON_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boot from PSRAM. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaee17d2349a9e695f89aaa67972035bb6aa95c8184ede7372b598b702103e42eda" prot="public">
          <name>XMC_SCU_BOOTMODE_ABM0</name>
          <initializer>= (8UL &lt;&lt; SCU_GENERAL_STCON_SWCON_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boot from flash - fixed alternative address 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaee17d2349a9e695f89aaa67972035bb6a9d94cd67b30c41af733f5b1bb0113fb1" prot="public">
          <name>XMC_SCU_BOOTMODE_ABM1</name>
          <initializer>= (12UL &lt;&lt; SCU_GENERAL_STCON_SWCON_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boot from flash - fixed alternative address 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaee17d2349a9e695f89aaa67972035bb6a7a98097217ed6f88409a458ca43bb080" prot="public">
          <name>XMC_SCU_BOOTMODE_FABM</name>
          <initializer>= (14UL &lt;&lt; SCU_GENERAL_STCON_SWCON_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fallback Alternate Boot Mode (ABM) - Try ABM-0 then try ABM-1. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for selecting device boot mode. These enums are used to configure <emphasis>SWCON</emphasis> bits of <emphasis>STCON</emphasis> register. User can choose among various boot modes by configuring SWCON bits. Use type <emphasis>XMC_SCU_BOOTMODE_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="635" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="634" bodyend="648"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga51850699f03c906a5fefcc4f04c6b2c1" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CCU_TRIGGER_t</name>
        <enumvalue id="group___s_c_u_1gga51850699f03c906a5fefcc4f04c6b2c1ab9e67fe77a9a1219bd0d4594c3f7a0ea" prot="public">
          <name>XMC_SCU_CCU_TRIGGER_CCU40</name>
          <initializer>= SCU_GENERAL_CCUCON_GSC40_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger mask used for Global Start Control of CCU40 peripheral. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga51850699f03c906a5fefcc4f04c6b2c1ae5aa55222489a096c454eb0ce95e1bf2" prot="public">
          <name>XMC_SCU_CCU_TRIGGER_CCU80</name>
          <initializer>= SCU_GENERAL_CCUCON_GSC80_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger mask used for Global Start Control of CCU80 peripheral. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines Capture/Compare unit timer slice trigger, that enables synchronous start function available on the <emphasis>SCU</emphasis>, CCUCON register. Use type <emphasis>XMC_SCU_CCU_TRIGGER_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="180" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="179" bodyend="205"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga5a00552e019ebfb3f3ded0ac0c52d324" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t</name>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324abb7be28ea7ac410261ae838f682b98db" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FOFI</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fOFI used as system clock source in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a24bc5c51ad6f0839d037b85c86798167" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FPLL</name>
          <initializer>= SCU_CLK_DSLEEPCR_SYSSEL_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fPLL used as system clock source in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324add2138f379b3d29101c722aaa92f0507" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN</name>
          <initializer>= SCU_CLK_DSLEEPCR_FPDN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flash power down in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a2106d720a1214d1fee5e77e25a92a135" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN</name>
          <initializer>= SCU_CLK_DSLEEPCR_PLLPDN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switch off main PLL in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a666c1ee2dd56b6ab2a85d9d3f0750910" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_VCO_POWERDOWN</name>
          <initializer>= SCU_CLK_DSLEEPCR_VCOPDN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Switch off VCO of main PLL in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a15dd761ddf9cd11f834710ba77222c13" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_USB</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB clock disabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324aa078492e4f18f8ed933e36164ab259f0" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_USB</name>
          <initializer>= SCU_CLK_DSLEEPCR_USBCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB clock enabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a05683f35720a055da8325a162024ca6c" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_SDMMC</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDMMC clock disabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a86738f447e072c49ee3bae2c6bc59224" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_SDMMC</name>
          <initializer>= SCU_CLK_DSLEEPCR_MMCCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDMMC clock enabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324ad645aeb9debd59b2f8ca55ad6619137b" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_ETH</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ETH clock disabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324abf9f604282c4c359e75db38f19b1d35f" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH</name>
          <initializer>= SCU_CLK_DSLEEPCR_ETH0CR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ETH clock enabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a3a1808e0e524a8415766ce83ab564cca" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_EBU</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EBU clock disabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324aec750b931998cd82a4de69b4952cb743" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_EBU</name>
          <initializer>= SCU_CLK_DSLEEPCR_EBUCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EBU clock enabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a5ba39c27d3089d46c65f17576a8eab9d" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_CCU</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CCU clock disabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a7fa9706aa6e0d585c535d54b75854c74" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU</name>
          <initializer>= SCU_CLK_DSLEEPCR_CCUCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CCU clock enabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324aafe2d6e092f55373521f1d69a7df54d7" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_WDT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>WDT clock disabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a00552e019ebfb3f3ded0ac0c52d324a34bd43a94320367bbe085c00075f3e39" prot="public">
          <name>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_WDT</name>
          <initializer>= SCU_CLK_DSLEEPCR_WDTCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>WDT clock enabled in DEEPSLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state. In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state. Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.</para>
<para>The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is stopped.</para>
<para>In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC is still clocked by a free-running clock. Peripherals are only clocked when configured to stay enabled. Configuration of peripherals and any SRAM content is preserved. The Flash module can be put into low-power mode to achieve a further power reduction. On wake-up Flash module will be restarted again before instructions or data access is possible. Any interrupt will bring the system back to operation via the NVIC.The clock setup before entering Deep Sleep state is restored upon wake-up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="721" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="720" bodyend="747"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga26a3f6ccc6fa98818df8efd7e487d7c0" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_ECATCLKSRC_t</name>
        <enumvalue id="group___s_c_u_1gga26a3f6ccc6fa98818df8efd7e487d7c0acfe959797554e13450d5047bc303850c" prot="public">
          <name>XMC_SCU_CLOCK_ECATCLKSRC_USBPLL</name>
          <initializer>= (0UL &lt;&lt; SCU_CLK_ECATCLKCR_ECATSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB PLL (fUSBPLL) as a source for ECAT clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga26a3f6ccc6fa98818df8efd7e487d7c0a1a7b3bac723e37553c83298204dc7c43" prot="public">
          <name>XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL</name>
          <initializer>= (1UL &lt;&lt; SCU_CLK_ECATCLKCR_ECATSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Main PLL output (fPLL) as a source for ECAT clock. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for selecting the ECAT clock source. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="549" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="548" bodyend="552"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gaaf5142b4b63fc9f6413c9deb3e7740a0" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_EXTOUTCLKSRC_t</name>
        <enumvalue id="group___s_c_u_1ggaaf5142b4b63fc9f6413c9deb3e7740a0ac15a557c19634848803fcf01e3f2f5b3" prot="public">
          <name>XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS</name>
          <initializer>= (0UL &lt;&lt; SCU_CLK_EXTCLKCR_ECKSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>System clock (fSYS) as the source for external clock out (fEXT). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaaf5142b4b63fc9f6413c9deb3e7740a0a92a58df18906972b786a85c88df65141" prot="public">
          <name>XMC_SCU_CLOCK_EXTOUTCLKSRC_USB</name>
          <initializer>= (2UL &lt;&lt; SCU_CLK_EXTCLKCR_ECKSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB PLL output(fUSB PLL) as the source for external clock out (fEXT). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaaf5142b4b63fc9f6413c9deb3e7740a0a42c6903e304281e63b4dca0aceff6859" prot="public">
          <name>XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL</name>
          <initializer>= (3UL &lt;&lt; SCU_CLK_EXTCLKCR_ECKSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Main PLL output(fPLL) as the source for external clock out (fEXT). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for selecting the source of external clock out (fEXT). These enums are used to configure <emphasis>ECKSEL</emphasis> bits of <emphasis>EXTCLKCR</emphasis> register. User can choose either fSYS or fPLL or fUSBPLL clock as a source for external clock out (fEXT). Use type <emphasis>XMC_SCU_CLOCK_EXTOUTCLKSRC_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="576" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="575" bodyend="587"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga7ba412eed9b7e0f28d60090b5a53768d" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t</name>
        <enumvalue id="group___s_c_u_1gga7ba412eed9b7e0f28d60090b5a53768da14df677f6d1d5ca724913581ebf2eb73" prot="public">
          <name>XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY</name>
          <initializer>= 0UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Factory Oscillator Calibration: Force adjustment of the internal oscillator with the firmware defined values. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga7ba412eed9b7e0f28d60090b5a53768da6acf21fd18be2ff4e437f71950c30324" prot="public">
          <name>XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC</name>
          <initializer>= 1UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Automatic Oscillator Calibration adjustment of the fOFI clock with fSTDBY clock. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for backup clock trimming. These enums are used to configure <emphasis>AOTREN</emphasis> <emphasis>FOTR</emphasis> bits of <emphasis>PLLCON0</emphasis> register. Use type <emphasis>XMC_SCU_CLOCK_BACKUP_TRIM_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="622" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="621" bodyend="626"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga89194aa42c041fa1e72c1a3da8dbdef8" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t</name>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8a6c72ebd7125eaa96a643ca27d175173d" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fOFI used as system clock source in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8ae2f0700a740030d26e189332cbe642ea" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL</name>
          <initializer>= SCU_CLK_SLEEPCR_SYSSEL_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fPLL used as system clock source in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8a02279e8dd80ece4259fd481d82b4300d" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_USB</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB clock disabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8a9b29e9b7ce8e360cbcd1553ddff6a789" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_USB</name>
          <initializer>= SCU_CLK_SLEEPCR_USBCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB clock enabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8ac6d3bdb292b6a1fc42d9b4457d393baf" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_SDMMC</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDMMC clock disabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8ac47ed15fc3831e667a4c7ccb0c1bc263" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_SDMMC</name>
          <initializer>= SCU_CLK_SLEEPCR_MMCCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDMMC clock enabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8a91982488cc35c45c98831ddd29d7c18b" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_ETH</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ETH clock disabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8aafbef27b3c071ed5f3f1886dbd3596ac" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH</name>
          <initializer>= SCU_CLK_SLEEPCR_ETH0CR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ETH clock enabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8a0cfeab885f3bfbbb2dd2e4b017af77ec" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_EBU</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EBU clock disabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8a21cb6cceef9f27a721257f9bd0ac8d55" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_EBU</name>
          <initializer>= SCU_CLK_SLEEPCR_EBUCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EBU clock enabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8aa017e590b90132425e8b83464c37a304" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_CCU</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CCU clock disabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8a36ec233f0260989ed56755950307b8e4" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU</name>
          <initializer>= SCU_CLK_SLEEPCR_CCUCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CCU clock enabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8a8207621722fd2367ac32a3612b1d4e4c" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_WDT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>WDT clock disabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga89194aa42c041fa1e72c1a3da8dbdef8af6da22e88f1a187e05b8e614ff890b87" prot="public">
          <name>XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_WDT</name>
          <initializer>= SCU_CLK_SLEEPCR_WDTCR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>WDT clock enabled in SLEEP state </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the source of the system clock and peripherals clock gating in SLEEP state. Use this enum as parameter of XMC_SCU_CLOCK_SetSleepConfig before going to SLEEP state.</para>
<para>The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is stopped. Peripherals are only clocked when configured to stay enabled.</para>
<para>Peripherals can continue to operate unaffected and eventually generate an event to wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="678" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="677" bodyend="701"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gaccffa04837e2b0c2132f74f3c502139b" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_SYSCLKSRC_t</name>
        <enumvalue id="group___s_c_u_1ggaccffa04837e2b0c2132f74f3c502139ba76d7434b48f7728c2de246533fa458df" prot="public">
          <name>XMC_SCU_CLOCK_SYSCLKSRC_OFI</name>
          <initializer>= (0UL &lt;&lt; SCU_CLK_SYSCLKCR_SYSSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal Fast Clock (fOFI) as a source for system clock (fSYS). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaccffa04837e2b0c2132f74f3c502139badda85eae72f715c9d96128a52bafe5c9" prot="public">
          <name>XMC_SCU_CLOCK_SYSCLKSRC_PLL</name>
          <initializer>= (1UL &lt;&lt; SCU_CLK_SYSCLKCR_SYSSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PLL output (fPLL) as a source for system clock (fSYS). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for system clock (fSYS) source. These enums are used to configure <emphasis>SYSSEL</emphasis> bits of <emphasis>SYSCLKCR</emphasis> Clock Control Register. Use type <emphasis>XMC_SCU_CLOCK_SYSCLKSRC_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="510" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="509" bodyend="515"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gad0bc6581cbe44ad6b1d649cbffe96875" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_SYSPLL_MODE_t</name>
        <enumvalue id="group___s_c_u_1ggad0bc6581cbe44ad6b1d649cbffe96875a13594a59c97a6cb8404de58a2a44c029" prot="public">
          <name>XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fPLL derived from fOSC and PLL operating in prescalar mode(i.e.VCO bypassed). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggad0bc6581cbe44ad6b1d649cbffe96875a71ff2dabf5ecbf6010cba347710e1438" prot="public">
          <name>XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fPLL derived from fVCO and PLL operating in normal mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggad0bc6581cbe44ad6b1d649cbffe96875a09dbd0b32d77b9cbe2b353d80fc8fd1d" prot="public">
          <name>XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fPLL derived from fOSC and PLL operating in prescalar mode(i.e.VCO bypassed). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines various PLL modes of operation. These enums are used to configure <emphasis>VCOBYP</emphasis> bit of <emphasis>PLLCON0</emphasis> register. User can choose either normal or prescalar mode by configuring VCOBYP bit. Use type <emphasis>XMC_SCU_PLL_MODE_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="657" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="656" bodyend="661"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga91284bbc86bb476327771f3639cbe440" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_SYSPLLCLKSRC_t</name>
        <enumvalue id="group___s_c_u_1gga91284bbc86bb476327771f3639cbe440a8a828ad9bc8ac397c2c68dd4cb703a6f" prot="public">
          <name>XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP</name>
          <initializer>= 0UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External crystal oscillator (fOHP) as the source for P-Divider. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga91284bbc86bb476327771f3639cbe440a8126bd0d0703cd1c35edb9afd52e821c" prot="public">
          <name>XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI</name>
          <initializer>= SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Backup clock(fOFI) as the source for P-Divider. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for selecting the P-Divider input frequency. These enums are used to configure <emphasis>PINSEL</emphasis> bits of <emphasis>PLLCON2</emphasis> register. Use type <emphasis>XMC_SCU_CLOCK_OSCCLKSRC_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="523" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="522" bodyend="528"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga2bd90dc2daf0ff48625ab7b297b2cacd" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_t</name>
        <enumvalue id="group___s_c_u_1gga2bd90dc2daf0ff48625ab7b297b2cacdaec80b1a0120591c20aaa28b7fcebe879" prot="public">
          <name>XMC_SCU_CLOCK_USB</name>
          <initializer>= SCU_CLK_CLKCLR_USBCDI_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB module clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga2bd90dc2daf0ff48625ab7b297b2cacdaf0d53d76990a8f82da350b1c9e93ce5f" prot="public">
          <name>XMC_SCU_CLOCK_MMC</name>
          <initializer>= SCU_CLK_CLKCLR_MMCCDI_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MMC module clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga2bd90dc2daf0ff48625ab7b297b2cacdaf712007d69fe05782cfcb16a1eabde29" prot="public">
          <name>XMC_SCU_CLOCK_ETH</name>
          <initializer>= SCU_CLK_CLKCLR_ETH0CDI_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ethernet module clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga2bd90dc2daf0ff48625ab7b297b2cacdae662acca97237b36e1295d9ff9fed395" prot="public">
          <name>XMC_SCU_CLOCK_EBU</name>
          <initializer>= SCU_CLK_CLKCLR_EBUCDI_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EBU module clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga2bd90dc2daf0ff48625ab7b297b2cacdab649d2e78a8522355c7373f7c95407be" prot="public">
          <name>XMC_SCU_CLOCK_CCU</name>
          <initializer>= SCU_CLK_CLKCLR_CCUCDI_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CCU module clock. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga2bd90dc2daf0ff48625ab7b297b2cacda14737d737a93d5bcd3401dc3033e56a6" prot="public">
          <name>XMC_SCU_CLOCK_WDT</name>
          <initializer>= SCU_CLK_CLKCLR_WDTCDI_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>WDT module clock. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines enumerations for disabling the clocks sources of peripherals. Disabling of the peripheral clock is configured via the <emphasis>CLKCLR</emphasis> registers. Use type <emphasis>XMC_SCU_PERIPHERAL_CLOCK_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="407" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="406" bodyend="420"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gaa25fc7c21af145300a57dd93c391816d" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_USBCLKSRC_t</name>
        <enumvalue id="group___s_c_u_1ggaa25fc7c21af145300a57dd93c391816dab86ed8cbb94eb9390d61aa94df5b7461" prot="public">
          <name>XMC_SCU_CLOCK_USBCLKSRC_USBPLL</name>
          <initializer>= (0UL &lt;&lt; SCU_CLK_USBCLKCR_USBSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB PLL(fUSB PLL) as a source for USB clock (fUSB/fSDMMC). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaa25fc7c21af145300a57dd93c391816da451e195a57276d5ef1fb34e275cae51b" prot="public">
          <name>XMC_SCU_CLOCK_USBCLKSRC_SYSPLL</name>
          <initializer>= (1UL &lt;&lt; SCU_CLK_USBCLKCR_USBSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Main PLL output (fPLL) as a source for USB clock (fUSB/fSDMMC). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for selecting the USB clock source(fUSB/fSDMMC). These enums are used to configure <emphasis>USBSEL</emphasis> bits of <emphasis>USBCLKCR</emphasis> register. User can choose either fPLL or fUSBPLL clock as a source for USB clock. Use type <emphasis>XMC_SCU_CLOCK_USBCLKSRC_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="537" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="536" bodyend="542"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga77f22d4ceb0b920b48b87da63f62d174" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_CLOCK_WDTCLKSRC_t</name>
        <enumvalue id="group___s_c_u_1gga77f22d4ceb0b920b48b87da63f62d174ae0d64bcb5c71dd2d9c9fdf8ff11cb73d" prot="public">
          <name>XMC_SCU_CLOCK_WDTCLKSRC_OFI</name>
          <initializer>= (0UL &lt;&lt; SCU_CLK_WDTCLKCR_WDTSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal Fast Clock (fOFI) as the source for WDT clock (fWDT). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga77f22d4ceb0b920b48b87da63f62d174a145b032645cb6d43c6617dd26e7f9087" prot="public">
          <name>XMC_SCU_CLOCK_WDTCLKSRC_STDBY</name>
          <initializer>= (1UL &lt;&lt; SCU_CLK_WDTCLKCR_WDTSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Standby clock (fSTDBY) as the source for WDT clock (fWDT). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga77f22d4ceb0b920b48b87da63f62d174ac39bb0fdcadf330ce33bbbd6f03d4a04" prot="public">
          <name>XMC_SCU_CLOCK_WDTCLKSRC_PLL</name>
          <initializer>= (2UL &lt;&lt; SCU_CLK_WDTCLKCR_WDTSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PLL output (fPLL) as the source for WDT clock (fWDT). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for selecting the source of WDT clock(fWDT). These enums are used to configure <emphasis>WDTSEL</emphasis> bits of <emphasis>WDTCLKCR</emphasis> register. User can choose either fOFI or fPLL or fSTDBY clock as a source for WDT clock. Use type <emphasis>XMC_SCU_CLOCK_USBCLKSRC_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="561" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="560" bodyend="568"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga641e0585e99029c106ad8ef6ae3b92b5" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_CTRL_STATUS_t</name>
        <enumvalue id="group___s_c_u_1gga641e0585e99029c106ad8ef6ae3b92b5a2d3b3956e4bf3ff5498a5a4427ed6ee0" prot="public">
          <name>XMC_SCU_HIB_CTRL_STATUS_NO_ACTIVE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hibernate not driven active to pads </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga641e0585e99029c106ad8ef6ae3b92b5ad08e880926270ea23ddac2c1e5d41db6" prot="public">
          <name>XMC_SCU_HIB_CTRL_STATUS_ACTIVE</name>
          <initializer>= SCU_HIBERNATE_HDSTAT_HIBNOUT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Hibernate driven active to pads </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define status of external hibernate control </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="762" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="761" bodyend="765"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga11fb0524a44f3c744946c7969a806a5b" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_EVENT_t</name>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5ba42af203acec0d792769b9757171baee6" prot="public">
          <name>XMC_SCU_HIB_EVENT_WAKEUP_ON_POS_EDGE</name>
          <initializer>= SCU_HIBERNATE_HDCR_WKPEP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wake-up on positive edge pin event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5bac86ec28d7d3e54c0706440ca24398a7a" prot="public">
          <name>XMC_SCU_HIB_EVENT_WAKEUP_ON_NEG_EDGE</name>
          <initializer>= SCU_HIBERNATE_HDCR_WKPEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wake-up on negative edge pin event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5ba62d087670e994aedd55c60af142957e9" prot="public">
          <name>XMC_SCU_HIB_EVENT_WAKEUP_ON_RTC</name>
          <initializer>= SCU_HIBERNATE_HDCR_RTCE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wake-up on RTC event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5baf6a0345d38acd9a48cabd1b79b459313" prot="public">
          <name>XMC_SCU_HIB_EVENT_ULPWDG</name>
          <initializer>= SCU_HIBERNATE_HDCR_ULPWDGEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ULP watchdog alarm status </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5bab146ac5388412b2ce878dc55493f5250" prot="public">
          <name>XMC_SCU_HIB_EVENT_LPAC_VBAT_POSEDGE</name>
          <initializer>= SCU_HIBERNATE_HDSTAT_VBATPEV_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wake-up on LPAC positive edge of VBAT threshold crossing. <simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5ba17a0926be1bd76151f824282f5d88e6c" prot="public">
          <name>XMC_SCU_HIB_EVENT_LPAC_VBAT_NEGEDGE</name>
          <initializer>= SCU_HIBERNATE_HDSTAT_VBATNEV_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wake-up on LPAC negative edge of VBAT threshold crossing. <simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5bafc6bbaa29d6d60c06ff64625f115ebf5" prot="public">
          <name>XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_POSEDGE</name>
          <initializer>= SCU_HIBERNATE_HDSTAT_AHIBIO0PEV_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wake-up on LPAC positive edge of HIB_IO_0 threshold crossing. <simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5ba57fcbabf901ce5c09b9389c9496c0203" prot="public">
          <name>XMC_SCU_HIB_EVENT_LPAC_HIB_IO_0_NEGEDGE</name>
          <initializer>= SCU_HIBERNATE_HDSTAT_AHIBIO0NEV_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wake-up on LPAC negative edge of HIB_IO_0 threshold crossing. <simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5baee3d7a68c49f5c55469003310bd4fe48" prot="public">
          <name>XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE</name>
          <initializer>= SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wake-up on LPAC positive edge of HIB_IO_1 threshold crossing. <simplesect kind="note"><para>Only available in XMC44 series and LQFP100. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga11fb0524a44f3c744946c7969a806a5baa7f14c3a069bd27c3e97de293eb77adf" prot="public">
          <name>XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE</name>
          <initializer>= SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Wake-up on LPAC negative edge of HIB_IO_1 threshold crossing. <simplesect kind="note"><para>Only available in XMC44 series and LQFP100. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hibernate domain event status </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="771" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="770" bodyend="786"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gae174cb4d0d8d67e2f830f06ba7460b57" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_HIBERNATE_MODE_t</name>
        <enumvalue id="group___s_c_u_1ggae174cb4d0d8d67e2f830f06ba7460b57aec57220235c28fb167e8b2b9e123fbc4" prot="public">
          <name>XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request external hibernate mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggae174cb4d0d8d67e2f830f06ba7460b57a4d5567cca773f7fdf6edb6375ff1f092" prot="public">
          <name>XMC_SCU_HIB_HIBERNATE_MODE_INTERNAL</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request internal hibernate mode. <simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selects hibernate mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="831" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="830" bodyend="836"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga3810fe2c38e7abef292ceaecd5660194" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_IO_OUTPUT_LEVEL_t</name>
        <enumvalue id="group___s_c_u_1gga3810fe2c38e7abef292ceaecd5660194a96cc04f63a211ebb0d2453f4704d5af3" prot="public">
          <name>XMC_SCU_HIB_IO_OUTPUT_LEVEL_LOW</name>
          <initializer>= 0 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0POL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct value </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga3810fe2c38e7abef292ceaecd5660194a1188b37be2c176122cbdcfc43db49cf6" prot="public">
          <name>XMC_SCU_HIB_IO_OUTPUT_LEVEL_HIGH</name>
          <initializer>= 1 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0POL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Inverted value </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selects the output polarity of the HIB_IOx </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="822" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="821" bodyend="825"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gabaf5bdae1d6dffc54f13feef86a133c6" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_IO_t</name>
        <enumvalue id="group___s_c_u_1ggabaf5bdae1d6dffc54f13feef86a133c6aa07fd1bc01d97697a3521103c1e55b91" prot="public">
          <name>XMC_SCU_HIB_IO_0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HIB_IO_0 pin. At the first power-up and with every reset of the hibernate domain this pin is configured as opendrain output and drives &quot;0&quot;. As output the medium driver mode is active. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggabaf5bdae1d6dffc54f13feef86a133c6a4fb653cd6991dc5223dcbc688a6c6774" prot="public">
          <name>XMC_SCU_HIB_IO_1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HIB_IO_1 pin. At the first power-up and with every reset of the hibernate domain this pin is configured as input with no pull device active. As output the medium driver mode is active. <simplesect kind="note"><para>: Only available in certain packages </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hibernate domain dedicated pins </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="792" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="791" bodyend="800"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga491ac2d1f6d99b31e2c831a87c5d66ed" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_LPAC_INPUT_t</name>
        <enumvalue id="group___s_c_u_1gga491ac2d1f6d99b31e2c831a87c5d66eda84ac35fe1638bfef41ea3f7c1b357439" prot="public">
          <name>XMC_SCU_HIB_LPAC_INPUT_DISABLED</name>
          <initializer>= 0 &lt;&lt; SCU_HIBERNATE_LPACCONF_CMPEN_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Comparator permanently in power down </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga491ac2d1f6d99b31e2c831a87c5d66eda55cd5a770316da8e9ce7a0d7de1d4893" prot="public">
          <name>XMC_SCU_HIB_LPAC_INPUT_VBAT</name>
          <initializer>= 0x1 &lt;&lt; SCU_HIBERNATE_LPACCONF_CMPEN_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Comparator activated for VBAT input </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga491ac2d1f6d99b31e2c831a87c5d66edab4f00a681d70a53ab423585c297dd284" prot="public">
          <name>XMC_SCU_HIB_LPAC_INPUT_HIB_IO_0</name>
          <initializer>= 0x2 &lt;&lt; SCU_HIBERNATE_LPACCONF_CMPEN_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Comparator activated for HIB_IO_0 input </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga491ac2d1f6d99b31e2c831a87c5d66eda913301522b5562a1eabc4c9be4f35510" prot="public">
          <name>XMC_SCU_HIB_LPAC_INPUT_HIB_IO_1</name>
          <initializer>= 0x4 &lt;&lt; SCU_HIBERNATE_LPACCONF_CMPEN_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Comparator activated for HIB_IO_1 input. <simplesect kind="note"><para>Only available in XMC44 series and LQFP100 package. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB LPAC input selection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="871" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="870" bodyend="878"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga5ffee972b02e57f54d05e14e4b369052" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_LPAC_STATUS_t</name>
        <enumvalue id="group___s_c_u_1gga5ffee972b02e57f54d05e14e4b369052a59b9c4e6bbc91f549b586b30f192d983" prot="public">
          <name>XMC_SCU_HIB_LPAC_STATUS_VBAT_COMPARE_DONE</name>
          <initializer>= SCU_HIBERNATE_LPACST_VBATSCMP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VBAT compare operation completed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5ffee972b02e57f54d05e14e4b369052ac63d60c018e79ef19a740ce94c5d8821" prot="public">
          <name>XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_COMPARE_DONE</name>
          <initializer>= SCU_HIBERNATE_LPACST_AHIBIO0SCMP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HBI_IO_0 compare operation completed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5ffee972b02e57f54d05e14e4b369052a5748a14e2f33a47910487604cde9c41a" prot="public">
          <name>XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_COMPARE_DONE</name>
          <initializer>= SCU_HIBERNATE_LPACST_AHIBIO1SCMP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HBI_IO_1 compare operation completed. <simplesect kind="note"><para>Only available in XMC44 series and LQFP100 package. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5ffee972b02e57f54d05e14e4b369052a8ca1e8a09f78526ff56bdecc948c3c56" prot="public">
          <name>XMC_SCU_HIB_LPAC_STATUS_VBAT_ABOVE_THRESHOLD</name>
          <initializer>= SCU_HIBERNATE_LPACST_VBATVAL_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VBAT comparison result above programmed threshold </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5ffee972b02e57f54d05e14e4b369052a7f3ef4a71fd1b42399e294eb9f844ab5" prot="public">
          <name>XMC_SCU_HIB_LPAC_STATUS_HIB_IO_0_ABOVE_THRESHOLD</name>
          <initializer>= SCU_HIBERNATE_LPACST_AHIBIO0VAL_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HBI_IO_0 comparison result above programmed threshold </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5ffee972b02e57f54d05e14e4b369052a286e724ea1e44aefffac7ae29cc6b7d1" prot="public">
          <name>XMC_SCU_HIB_LPAC_STATUS_HIB_IO_1_ABOVE_THRESHOLD</name>
          <initializer>= SCU_HIBERNATE_LPACST_AHIBIO1VAL_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HBI_IO_1 comparison result above programmed threshold. <simplesect kind="note"><para>Only available in XMC44 series and LQFP100 package. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB LPAC status </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="898" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="897" bodyend="909"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga1250a82e3f4b1d8428cb3e3c0b8d3a14" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_LPAC_TRIGGER_t</name>
        <enumvalue id="group___s_c_u_1gga1250a82e3f4b1d8428cb3e3c0b8d3a14ad54019acac1f275cf17f6c48df7acf78" prot="public">
          <name>XMC_SCU_HIB_LPAC_TRIGGER_SUBSECOND_INTERVAL_COUNTER</name>
          <initializer>= 0 &lt;&lt; SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sub-second interval counter </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga1250a82e3f4b1d8428cb3e3c0b8d3a14a049b7551698ae7564e5e6bbb35d55426" prot="public">
          <name>XMC_SCU_HIB_LPAC_TRIGGER_RTC_ALARM_EVENT</name>
          <initializer>= 0x1 &lt;&lt; SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC alarm event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga1250a82e3f4b1d8428cb3e3c0b8d3a14a4f42a0c8af7b193ceb4ad65deb877184" prot="public">
          <name>XMC_SCU_HIB_LPAC_TRIGGER_RTC_PERIODIC_EVENT</name>
          <initializer>= 0x2 &lt;&lt; SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC periodic event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga1250a82e3f4b1d8428cb3e3c0b8d3a14ae48e4da27a3fffcc22a490a7b2cb0031" prot="public">
          <name>XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_POSITIVE_EDGE_EVENT</name>
          <initializer>= 0x3 &lt;&lt; SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>On digital wakeup input positive edge event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga1250a82e3f4b1d8428cb3e3c0b8d3a14a03cafbb0da622d20b218dd56d1ba742b" prot="public">
          <name>XMC_SCU_HIB_LPAC_TRIGGER_ON_WAKEUP_NEGATIVE_EDGE_EVENT</name>
          <initializer>= 0x5 &lt;&lt; SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>On digital wakeup input negative edge event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga1250a82e3f4b1d8428cb3e3c0b8d3a14a2f8c15bfa361ca4a1305003d89180c14" prot="public">
          <name>XMC_SCU_HIB_LPAC_TRIGGER_CONTINOUS</name>
          <initializer>= 0x6 &lt;&lt; SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Continuous measurement </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga1250a82e3f4b1d8428cb3e3c0b8d3a14a31fecf72d05537b321872f470219c867" prot="public">
          <name>XMC_SCU_HIB_LPAC_TRIGGER_SINGLE_SHOT</name>
          <initializer>= 0x7 &lt;&lt; SCU_HIBERNATE_LPACCONF_TRIGSEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Single shot on software request </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB LPAC start trigger selection for selected inputs </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="884" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="883" bodyend="892"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga3ba6c043570286f2194b5cbef1ce73a5" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_PIN_MODE_t</name>
        <enumvalue id="group___s_c_u_1gga3ba6c043570286f2194b5cbef1ce73a5a029df853adee03463230808735c745d5" prot="public">
          <name>XMC_SCU_HIB_PIN_MODE_INPUT_PULL_NONE</name>
          <initializer>= 0 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct input, no input pull device connected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga3ba6c043570286f2194b5cbef1ce73a5a89822b0eee425a8dd092bdaaae98eeae" prot="public">
          <name>XMC_SCU_HIB_PIN_MODE_INPUT_PULL_DOWN</name>
          <initializer>= 1 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct input, input pull down device connected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga3ba6c043570286f2194b5cbef1ce73a5ae391409cbbb587b30b495a87251a3cdb" prot="public">
          <name>XMC_SCU_HIB_PIN_MODE_INPUT_PULL_UP</name>
          <initializer>= 2 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Direct input, input pull up device connected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga3ba6c043570286f2194b5cbef1ce73a5ae804bbc570600f6346d5ec52d2589482" prot="public">
          <name>XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_HIBCTRL</name>
          <initializer>= 8 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Push-pull HIB control output </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga3ba6c043570286f2194b5cbef1ce73a5a47fe437b4a692c2ae91f2351a633fa89" prot="public">
          <name>XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_WDTSRV</name>
          <initializer>= 9 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Push-pull WDT service output </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga3ba6c043570286f2194b5cbef1ce73a5a40d29aa6b893eed46a06de17239d7cde" prot="public">
          <name>XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_GPIO</name>
          <initializer>= 10 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Push-pull GPIO output </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga3ba6c043570286f2194b5cbef1ce73a5a177f2816dcdcb75926f84e85f7048334" prot="public">
          <name>XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_HIBCTRL</name>
          <initializer>= 12 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Open drain HIB control output </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga3ba6c043570286f2194b5cbef1ce73a5a591628dbb6bbdf7ece246737c272761a" prot="public">
          <name>XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_WDTSRV</name>
          <initializer>= 13 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Open drain WDT service output </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga3ba6c043570286f2194b5cbef1ce73a5a26505c3b0ba18d6d7e30f6f81052aeea" prot="public">
          <name>XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_GPIO</name>
          <initializer>= 14 &lt;&lt; SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Open drain GPIO output </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB_IOx pin I/O control </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="806" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="805" bodyend="816"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gad0408131d64c97d53a863b982225e664" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_RTCCLKSRC_t</name>
        <enumvalue id="group___s_c_u_1ggad0408131d64c97d53a863b982225e664a3c14bca46e64d357669225b8a0ae2c9d" prot="public">
          <name>XMC_SCU_HIB_RTCCLKSRC_OSI</name>
          <initializer>= (0UL &lt;&lt; SCU_HIBERNATE_HDCR_RCS_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal Slow Clock (fOSI) as the source for RTC Clock (fRTC). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggad0408131d64c97d53a863b982225e664a337804604112681d99243ec37a386870" prot="public">
          <name>XMC_SCU_HIB_RTCCLKSRC_ULP</name>
          <initializer>= (1UL &lt;&lt; SCU_HIBERNATE_HDCR_RCS_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ultra Low Power Clock (fULP) as the source for RTC Clock (fRTC). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for selecting the source of RTC Clock (fRTC). These enums are used to configure <emphasis>RCS</emphasis> bit of <emphasis>HDCR</emphasis> register. User can choose either fOSI or fULP clock as a source for RTC Clock (fRTC). Use type <emphasis>XMC_SCU_HIB_RTCCLKSRC_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="595" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="594" bodyend="600"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gae6ba5b64dd9c71b767434b26687e8154" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_SR0_INPUT_t</name>
        <enumvalue id="group___s_c_u_1ggae6ba5b64dd9c71b767434b26687e8154a28911fda4ea7579ae463009e3d7f2bba" prot="public">
          <name>XMC_SCU_HIB_SR0_INPUT_HIB_IO_0</name>
          <initializer>= SCU_HIBERNATE_HDCR_GPI0SEL_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Set HIB_SR0 to HIB_IO_0 digital input </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggae6ba5b64dd9c71b767434b26687e8154a8ba9a31e918d10309736505520da22b6" prot="public">
          <name>XMC_SCU_HIB_SR0_INPUT_HIB_IO_1</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Set HIB_SR0 to HIB_IO_1 digital input. <simplesect kind="note"><para>Only available in certain packages. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggae6ba5b64dd9c71b767434b26687e8154a5118f80df148785ef1a986f02cd62754" prot="public">
          <name>XMC_SCU_HIB_SR0_INPUT_ACMP0</name>
          <initializer>= SCU_HIBERNATE_HDCR_ADIG0SEL_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Set HIB_SR0 to LPAC CMP0. <simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selects input signal HIB_SR0 of ERU0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="842" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="841" bodyend="850"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga8290034e7a28d8e2e8ed0086d6f92ab5" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_HIB_STDBYCLKSRC_t</name>
        <enumvalue id="group___s_c_u_1gga8290034e7a28d8e2e8ed0086d6f92ab5a72c9a9d9c6ae06d17bfd8ca0f6982a44" prot="public">
          <name>XMC_SCU_HIB_STDBYCLKSRC_OSI</name>
          <initializer>= (0UL &lt;&lt; SCU_HIBERNATE_HDCR_STDBYSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal Slow Clock (fOSI) as the source for Standby Clock (fSTDBY). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8290034e7a28d8e2e8ed0086d6f92ab5ab92e941f87b08da4b6a00fe921582b75" prot="public">
          <name>XMC_SCU_HIB_STDBYCLKSRC_OSCULP</name>
          <initializer>= (1UL &lt;&lt; SCU_HIBERNATE_HDCR_STDBYSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ultra Low Power Clock (fULP) as the source for Standby Clock (fSTDBY). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines options for selecting the source of Standby Clock (fSTDBY). These enums are used to configure <emphasis>STDBYSEL</emphasis> bit of <emphasis>HDCR</emphasis> register. User can choose either fOSI or fULP clock as a source for Standby Clock (fSTDBY). Use type <emphasis>XMC_SCU_HIB_STDBYCLKSRC_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="608" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="607" bodyend="615"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga5a0bae480e780bdd2dd407dfd1c30816" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_NMIREQ_t</name>
        <enumvalue id="group___s_c_u_1gga5a0bae480e780bdd2dd407dfd1c30816aaa484dff613548b3f220b4075bb9c120" prot="public">
          <name>XMC_SCU_NMIREQ_WDT_WARN</name>
          <initializer>= SCU_INTERRUPT_NMIREQEN_PRWARN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Watchdog timer Pre-Warning event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a0bae480e780bdd2dd407dfd1c30816af5c4b0a9066d1c3e14728454a1e8ade4" prot="public">
          <name>XMC_SCU_NMIREQ_RTC_PI</name>
          <initializer>= SCU_INTERRUPT_NMIREQEN_PI_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC Periodic event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a0bae480e780bdd2dd407dfd1c30816a3329d92d30f22de4e50fe5c31c03976d" prot="public">
          <name>XMC_SCU_NMIREQ_RTC_AI</name>
          <initializer>= SCU_INTERRUPT_NMIREQEN_AI_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RTC Alarm event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a0bae480e780bdd2dd407dfd1c30816a2150ab8eb9e25a0dd86c5dd3d0b45095" prot="public">
          <name>XMC_SCU_NMIREQ_ERU0_0</name>
          <initializer>= SCU_INTERRUPT_NMIREQEN_ERU00_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel 0 event of ERU0 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a0bae480e780bdd2dd407dfd1c30816aa4f70f8f327b57fc5d1c388f3ba64fda" prot="public">
          <name>XMC_SCU_NMIREQ_ERU0_1</name>
          <initializer>= SCU_INTERRUPT_NMIREQEN_ERU01_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel 1 event of ERU0 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a0bae480e780bdd2dd407dfd1c30816aace1860a21aef9e281b9e2e674feb752" prot="public">
          <name>XMC_SCU_NMIREQ_ERU0_2</name>
          <initializer>= SCU_INTERRUPT_NMIREQEN_ERU02_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel 2 event of ERU0 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga5a0bae480e780bdd2dd407dfd1c30816aaaadbecaa95e9e83a788083daf70257a" prot="public">
          <name>XMC_SCU_NMIREQ_ERU0_3</name>
          <initializer>= SCU_INTERRUPT_NMIREQEN_ERU03_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Channel 3 event of ERU0 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines enumeration for the events that can generate non maskable interrupt(NMI). The NMI generation can be enabled with <emphasis>NMIREQEN</emphasis> register. The event will be reflected in <emphasis>SRSTAT</emphasis> or will be mirrored in the TRAPSTAT register. These enums can be used to configure NMI request generation bits of <emphasis>NMIREQEN</emphasis> register. Once configured, these events can generate non maskable interrupt. All the enum items are tabulated as per bits present in <emphasis>NMIREQEN</emphasis> register. Use type <emphasis>XMC_SCU_NMIREQ_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="309" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="308" bodyend="317"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_PARITY_t</name>
        <enumvalue id="group___s_c_u_1gga22ea4f1155833e07a1ec13cd2c4cb4e0a76faf61fab7d1dc520a2edd499a8b869" prot="public">
          <name>XMC_SCU_PARITY_PSRAM_MEM</name>
          <initializer>= SCU_PARITY_PEEN_PEENPS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Program SRAM parity error trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga22ea4f1155833e07a1ec13cd2c4cb4e0a4fb8cb5395dd8b911a56f051e0d4fa0a" prot="public">
          <name>XMC_SCU_PARITY_DSRAM1_MEM</name>
          <initializer>= SCU_PARITY_PEEN_PEENDS1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data SRAM-1 parity error trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga22ea4f1155833e07a1ec13cd2c4cb4e0aef91b712c835ba659fdfbea92d8c052c" prot="public">
          <name>XMC_SCU_PARITY_USIC0_MEM</name>
          <initializer>= SCU_PARITY_PEEN_PEENU0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USIC0 memory parity error trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga22ea4f1155833e07a1ec13cd2c4cb4e0af43a02e98b55697a2189ddb103d35514" prot="public">
          <name>XMC_SCU_PARITY_MCAN_MEM</name>
          <initializer>= SCU_PARITY_PEEN_PEENMC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN memory parity error trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga22ea4f1155833e07a1ec13cd2c4cb4e0a194265618138204ee082e2b48f5ab619" prot="public">
          <name>XMC_SCU_PARITY_PMU_MEM</name>
          <initializer>= SCU_PARITY_PEEN_PEENPPRF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PMU Prefetch memory parity error trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga22ea4f1155833e07a1ec13cd2c4cb4e0af342269261128fd9b06a35b3604e649a" prot="public">
          <name>XMC_SCU_PARITY_USB_MEM</name>
          <initializer>= SCU_PARITY_PEEN_PEENUSB_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB memory parity error trap. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines enumerations for different parity event generating modules that in turn generate a trap. Parity can be enabled with <emphasis>PETE</emphasis> register in order to get the trap flag reflected in <emphasis>TRAPRAW</emphasis> register. These enums are used to configure parity error trap generation mechanism bits of <emphasis>PETE</emphasis> register. All the enum items are tabulated as per bits present in <emphasis>PETE</emphasis> register. Use type <emphasis>XMC_SCU_PARITY_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="242" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="241" bodyend="273"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga29713150fdafc3c88f3c73f621410239" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_PERIPHERAL_CLOCK_t</name>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a52c9f76dec72eff13f90cdc046d47401" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_VADC</name>
          <initializer>= SCU_CLK_CGATSTAT0_VADC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VADC peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239ae0fd9b7ccf5415550786dcdb14cf5f35" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_DSD</name>
          <initializer>= SCU_CLK_CGATSTAT0_DSD_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DSD peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a346af75d76735810851f4175e0aa7510" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_CCU40</name>
          <initializer>= SCU_CLK_CGATSTAT0_CCU40_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CCU40 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a0bb88ac36dfd3545282123f56c5c2374" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_CCU80</name>
          <initializer>= SCU_CLK_CGATSTAT0_CCU80_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CCU80 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a7d81755a02791cef84e36351a4e21ca5" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_POSIF0</name>
          <initializer>= SCU_CLK_CGATSTAT0_POSIF0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>POSIF0 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a3b7bdfee77b9c35016b8c8367fa19cc2" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_USIC0</name>
          <initializer>= SCU_CLK_CGATSTAT0_USIC0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USIC0 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239ae7dbfc0c6a37bdd716b87b0acfa5c498" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_ERU1</name>
          <initializer>= SCU_CLK_CGATSTAT0_ERU1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ERU1 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239afdc0f84c4da3a956ee0bf2a876224c47" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_HRPWM0</name>
          <initializer>= SCU_CLK_CGATSTAT0_HRPWM0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HRPWM0 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a2cdc8717b252a95151639d5f95c5d0a2" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_LEDTS0</name>
          <initializer>= (SCU_CLK_CGATSTAT1_LEDTSCU0_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LEDTS0 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239ab6ee98017bc789b6642e875cd7918c0f" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_MCAN</name>
          <initializer>= (SCU_CLK_CGATSTAT1_MCAN0_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MCAN peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a301a0d6ad57fa44fa9989a26d11994c2" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_DAC</name>
          <initializer>= (SCU_CLK_CGATSTAT1_DAC_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DAC peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a650dcac3670a4e8d46dc06b4f35fa963" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_SDMMC</name>
          <initializer>= (SCU_CLK_CGATSTAT1_MMCI_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDMMC peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a37d2702a725dfc9bf6093e324a530ffb" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_USIC1</name>
          <initializer>= (SCU_CLK_CGATSTAT1_USIC1_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USIC1 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a19830f281f510d08298a188bd657fdca" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_USIC2</name>
          <initializer>= (SCU_CLK_CGATSTAT1_USIC2_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USIC2 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a5a0c924a2ce77ead4698c1651fc3c6dd" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_PORTS</name>
          <initializer>= (SCU_CLK_CGATSTAT1_PPORTS_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PORTS peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a94022ad63fa2dbbbf514709a230956ea" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_WDT</name>
          <initializer>= (SCU_CLK_CGATSTAT2_WDT_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>WDT peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239ad1d5376be49034feb18db7e80ed56516" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_ETH0</name>
          <initializer>= (SCU_CLK_CGATSTAT2_ETH0_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ETH0 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239ab6bd29a0cea6f179591b5df3d9112e4e" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_GPDMA0</name>
          <initializer>= (SCU_CLK_CGATSTAT2_DMA0_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DMA0 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a2136960d61838413acf3d9f475a0d1b1" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_GPDMA1</name>
          <initializer>= (SCU_CLK_CGATSTAT2_DMA1_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DMA1 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a14790dc03c41d0a2a130f08d561919f2" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_FCE</name>
          <initializer>= (SCU_CLK_CGATSTAT2_FCE_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FCE peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239aaa96ac2efc271d2e552813e96e8d2a8e" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_USB0</name>
          <initializer>= (SCU_CLK_CGATSTAT2_USB_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB0 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239ada108efa35e1598805661b232a4f7967" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_ECAT0</name>
          <initializer>= (SCU_CLK_CGATSTAT2_ECAT0_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECAT0 peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga29713150fdafc3c88f3c73f621410239a1d0cea1744d7164245529bbb838e5406" prot="public">
          <name>XMC_SCU_PERIPHERAL_CLOCK_EBU</name>
          <initializer>= (SCU_CLK_CGATSTAT3_EBU_Msk | 0x30000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EBU peripheral gating. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines enumeration for peripherals that support clock gating. The enumerations can be used for gating or ungating the peripheral clocks. All the enum items are tabulated as per bits present in <emphasis>CGATSTAT0</emphasis> register. Use type <emphasis>XMC_SCU_PERIPHERAL_CLOCK_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="430" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="429" bodyend="501"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga8a897b11f9bf2e3cba0a33b127ee972a" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_PERIPHERAL_RESET_t</name>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aab92a48bfa06a56b9bc784ee1becdc182" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_VADC</name>
          <initializer>= SCU_RESET_PRSTAT0_VADCRS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>VADC reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa17fca0db0aec4105203958dcffcadf4b" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_DSD</name>
          <initializer>= SCU_RESET_PRSTAT0_DSDRS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DSD reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa706302378c8c92b4cd7af2a2c4bb91c8" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_CCU40</name>
          <initializer>= SCU_RESET_PRSTAT0_CCU40RS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CCU40 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa775c8d3e416e48f0b2a751dd26659572" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_CCU80</name>
          <initializer>= SCU_RESET_PRSTAT0_CCU80RS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CCU80 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa9e40fb6cbe0dc62d09fc37b1137af202" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_POSIF0</name>
          <initializer>= SCU_RESET_PRSTAT0_POSIF0RS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>POSIF0 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa02f66fca8bcbd7a2250e2b3370484df7" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_USIC0</name>
          <initializer>= SCU_RESET_PRSTAT0_USIC0RS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USIC0 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa5e9fb8a01e93ee63ba24fdc7449db653" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_ERU1</name>
          <initializer>= SCU_RESET_PRSTAT0_ERU1RS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ERU1 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa6b200cb3367f5804f2bc7c270c2977d1" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_HRPWM0</name>
          <initializer>= SCU_RESET_PRSTAT0_HRPWM0RS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HRPWM0 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa649e5a1581875da6c8de2b020c7d7c47" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_LEDTS0</name>
          <initializer>= (SCU_RESET_PRSTAT1_LEDTSCU0RS_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>LEDTS0 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa4be96af34bf6d2ce43abada383c159b7" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_MCAN</name>
          <initializer>= (SCU_RESET_PRSTAT1_MCAN0RS_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MCAN reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aae6a230116a0fa0aba975273d604c9556" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_DAC</name>
          <initializer>= (SCU_RESET_PRSTAT1_DACRS_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DAC reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa95b33fc58402c8fe68349cfca2db384e" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_SDMMC</name>
          <initializer>= (SCU_RESET_PRSTAT1_MMCIRS_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDMMC reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa16768d04bba1aef6a180ec3de84329e3" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_USIC1</name>
          <initializer>= (SCU_RESET_PRSTAT1_USIC1RS_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USIC1 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aaa9c8b41681e488c650b1f9eed08dec9b" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_USIC2</name>
          <initializer>= (SCU_RESET_PRSTAT1_USIC2RS_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USIC2 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa8ab1758864a5a6f7293c977af0343044" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_PORTS</name>
          <initializer>= (SCU_RESET_PRSTAT1_PPORTSRS_Msk | 0x10000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PORTS reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa5b93473d0a260f121d0d791407806768" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_WDT</name>
          <initializer>= (SCU_RESET_PRSTAT2_WDTRS_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>WDT reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa320b8f28eeb9d5e33bb69b68629806e5" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_ETH0</name>
          <initializer>= (SCU_RESET_PRSTAT2_ETH0RS_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ETH0 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa84048166ab6924c97045bf80165fa82f" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_GPDMA0</name>
          <initializer>= (SCU_RESET_PRSTAT2_DMA0RS_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DMA0 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aaff91f6055da3af780113bb0a5ec1c6e0" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_GPDMA1</name>
          <initializer>= (SCU_RESET_PRSTAT2_DMA1RS_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DMA1 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aa9aa2b769cdb8706f18798bc7fb235493" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_FCE</name>
          <initializer>= (SCU_RESET_PRSTAT2_FCERS_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>FCE reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aae457e9e4edd7268d4ca9776af8fad0ff" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_USB0</name>
          <initializer>= (SCU_RESET_PRSTAT2_USBRS_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB0 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aad924fd9b6e57d5dfd7e8c4c1cbfd08c0" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_ECAT0</name>
          <initializer>= (SCU_RESET_PRSTAT2_ECAT0RS_Msk | 0x20000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ECAT0 reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga8a897b11f9bf2e3cba0a33b127ee972aafb6b5b3111253765bc9819b48ef363e1" prot="public">
          <name>XMC_SCU_PERIPHERAL_RESET_EBU</name>
          <initializer>= (SCU_RESET_PRSTAT3_EBURS_Msk | 0x30000000UL)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EBU reset. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines enumeration representing different peripheral reset bits in the <emphasis>PRSTAT</emphasis> registers. All the enum items are tabulated as per bits present in <emphasis>PRSTAT0</emphasis>, <emphasis>PRSTAT1</emphasis>, <emphasis>PRSTAT2</emphasis>, <emphasis>PRSTAT3</emphasis> registers. Use type <emphasis>XMC_SCU_PERIPHERAL_RESET_t</emphasis> for accessing these enum parameters. Note: Release of reset should be prevented when the peripheral clock is gated in cases where kernel clock and bus interface clocks are shared, in order to avoid system hang-up. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="328" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="327" bodyend="399"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga167a7544a2eb6c4e5ce7b2f192015a9d" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_POWER_EVR_STATUS_t</name>
        <enumvalue id="group___s_c_u_1gga167a7544a2eb6c4e5ce7b2f192015a9da6ade9e212789b31c1608b43a2e609b7b" prot="public">
          <name>XMC_SCU_POWER_EVR_STATUS_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EVR13 regulator No overvoltage condition </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga167a7544a2eb6c4e5ce7b2f192015a9da328583b5c9124e6f275d52c923450af7" prot="public">
          <name>XMC_SCU_POWER_EVR_STATUS_EVR13_OVERVOLTAGE</name>
          <initializer>= SCU_POWER_EVRSTAT_OV13_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EVR13 regulator is in overvoltage </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines status of EVR13 regulator </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="753" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="752" bodyend="756"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gad97c10a5c5d47ad0b1aaf0c951b60791" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_POWER_MODE_t</name>
        <enumvalue id="group___s_c_u_1ggad97c10a5c5d47ad0b1aaf0c951b60791a4089393024311c8a55ae1349abba0830" prot="public">
          <name>XMC_SCU_POWER_MODE_SLEEP</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>sleep mode stops the processor clock </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggad97c10a5c5d47ad0b1aaf0c951b60791a46e9b6f26fbee3e4e642a9d55b45dd2a" prot="public">
          <name>XMC_SCU_POWER_MODE_DEEPSLEEP</name>
          <initializer>= SCB_SCR_SLEEPDEEP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>deep sleep mode stops the system clock and switches off the PLL and flash memory. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low power modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="957" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="956" bodyend="960"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gae01c08f5d524dadbc6e0c4128b348dc3" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_RESET_REASON_t</name>
        <enumvalue id="group___s_c_u_1ggae01c08f5d524dadbc6e0c4128b348dc3ae8bea77e364f87d9c74afb215da65273" prot="public">
          <name>XMC_SCU_RESET_REASON_PORST</name>
          <initializer>= (1UL &lt;&lt; SCU_RESET_RSTSTAT_RSTSTAT_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to Power on reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggae01c08f5d524dadbc6e0c4128b348dc3ab51de4d666b015887ff5ba839ff65259" prot="public">
          <name>XMC_SCU_RESET_REASON_SWD</name>
          <initializer>= (2UL &lt;&lt; SCU_RESET_RSTSTAT_RSTSTAT_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to Supply Watchdog reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggae01c08f5d524dadbc6e0c4128b348dc3a7ed9319c75de199685fb674cc89eb21a" prot="public">
          <name>XMC_SCU_RESET_REASON_PV</name>
          <initializer>= (4UL &lt;&lt; SCU_RESET_RSTSTAT_RSTSTAT_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to Power Validation reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggae01c08f5d524dadbc6e0c4128b348dc3aa6d2a43d58beebfabf3897c2ed65bd03" prot="public">
          <name>XMC_SCU_RESET_REASON_SW</name>
          <initializer>= (8UL &lt;&lt; SCU_RESET_RSTSTAT_RSTSTAT_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to Software reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggae01c08f5d524dadbc6e0c4128b348dc3aa147b82fa48ea09fe9137601ce28b6c9" prot="public">
          <name>XMC_SCU_RESET_REASON_LOCKUP</name>
          <initializer>= (16UL &lt;&lt; SCU_RESET_RSTSTAT_RSTSTAT_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to reset due to CPU lockup. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggae01c08f5d524dadbc6e0c4128b348dc3acd2ed3c6d9ade72259637c7c80a840cb" prot="public">
          <name>XMC_SCU_RESET_REASON_WATCHDOG</name>
          <initializer>= (32UL &lt;&lt; SCU_RESET_RSTSTAT_RSTSTAT_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to Watchdog timer initiated reset. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggae01c08f5d524dadbc6e0c4128b348dc3a9d34595d39facbd7b114462d5cc5b0c8" prot="public">
          <name>XMC_SCU_RESET_REASON_PARITY_ERROR</name>
          <initializer>= (128UL &lt;&lt; SCU_RESET_RSTSTAT_RSTSTAT_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reset due to reset due to memory parity error. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the different causes for last reset. The cause of the last reset gets automatically stored in the <emphasis>SCU_RSTSTAT</emphasis> register and can be checked by user software to determine the state of the system and for debuggging purpose. All the enum items are tabulated as per bits present in <emphasis>SCU_RSTSTAT</emphasis> register. Use type <emphasis>XMC_SCU_RESET_REASON_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="282" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="281" bodyend="290"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1gaff029b1575acc0712d494932d8ca6d60" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_STATUS_t</name>
        <enumvalue id="group___s_c_u_1ggaff029b1575acc0712d494932d8ca6d60a764eaaa84d169b3222ae9174d1fa6855" prot="public">
          <name>XMC_SCU_STATUS_OK</name>
          <initializer>= 0UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SCU related operation successfully completed. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaff029b1575acc0712d494932d8ca6d60aaf8f778e9be5e754dcaa0c1cf83e1e4b" prot="public">
          <name>XMC_SCU_STATUS_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SCU related operation failed. When API cannot fulfill request, this value is returned. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1ggaff029b1575acc0712d494932d8ca6d60a6f6a43bd2a61be2a1b0b57601d58bd77" prot="public">
          <name>XMC_SCU_STATUS_BUSY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Cannot execute the SCU related operation request because another operation is in progress. <emphasis>XMC_SCU_STATUS_BUSY</emphasis> is returned when API is busy processing another request. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the status of SCU API execution, used to verify the SCU related API calls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="175" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" bodystart="174" bodyend="181"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_c_u_1ga4de86b97726dc23fabd8c4e573b1bdb0" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SCU_TRAP_t</name>
        <enumvalue id="group___s_c_u_1gga4de86b97726dc23fabd8c4e573b1bdb0a1b0819f2f12755f729dd4595ce5d6b14" prot="public">
          <name>XMC_SCU_TRAP_OSC_WDG</name>
          <initializer>= SCU_TRAP_TRAPSTAT_SOSCWDGT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>OSC_HP Oscillator Watchdog trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga4de86b97726dc23fabd8c4e573b1bdb0a67e91a2b9240957470f5ba077bb8e54a" prot="public">
          <name>XMC_SCU_TRAP_VCO_LOCK</name>
          <initializer>= SCU_TRAP_TRAPSTAT_SVCOLCKT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>PLL loss of lock trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga4de86b97726dc23fabd8c4e573b1bdb0aa1faa35eca95044644fa5a8b3ac1ddd5" prot="public">
          <name>XMC_SCU_TRAP_USB_VCO_LOCK</name>
          <initializer>= SCU_TRAP_TRAPSTAT_UVCOLCKT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>USB PLL loss of lock trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga4de86b97726dc23fabd8c4e573b1bdb0a3a1a0db9c727530f70df92a2064c656e" prot="public">
          <name>XMC_SCU_TRAP_PARITY_ERROR</name>
          <initializer>= SCU_TRAP_TRAPSTAT_PET_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Memory Parity error trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga4de86b97726dc23fabd8c4e573b1bdb0a07fca7088a9a4a5b4ad078e10226b07a" prot="public">
          <name>XMC_SCU_TRAP_BROWNOUT</name>
          <initializer>= SCU_TRAP_TRAPSTAT_BRWNT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Brownout trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga4de86b97726dc23fabd8c4e573b1bdb0a29962065106d968469a8e5663907ba89" prot="public">
          <name>XMC_SCU_TRAP_ULP_WDG</name>
          <initializer>= SCU_TRAP_TRAPSTAT_ULPWDGT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unstable 32KHz clock trap. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga4de86b97726dc23fabd8c4e573b1bdb0a924f06cf751454f379bcb31ff69a8626" prot="public">
          <name>XMC_SCU_TRAP_PER_BRIDGE0</name>
          <initializer>= SCU_TRAP_TRAPSTAT_BWERR0T_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bad memory access of peripherals on Bridge-0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga4de86b97726dc23fabd8c4e573b1bdb0a9740c5bdbb9f490452931cdd987b96a0" prot="public">
          <name>XMC_SCU_TRAP_PER_BRIDGE1</name>
          <initializer>= SCU_TRAP_TRAPSTAT_BWERR1T_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bad memory access of peripherals on Bridge-1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_c_u_1gga4de86b97726dc23fabd8c4e573b1bdb0a322bb8e660028c3e94ac13d8e2ac7f4d" prot="public">
          <name>XMC_SCU_TRAP_ECAT_RESET</name>
          <initializer>= SCU_TRAP_TRAPSTAT_ECAT0RST_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EtherCat Reset </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines enumerations representing the status of trap cause. The cause of the trap gets automatically stored in the <emphasis>TRAPSTAT</emphasis> register and can be checked by user software to determine the state of the system and for debug purpose. Use type <emphasis>XMC_SCU_TRAP_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="214" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="213" bodyend="232"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___s_c_u_1ga4b50170c441fb21833c07a27b814a581" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* XMC_SCU_INTERRUPT_EVENT_HANDLER_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>XMC_SCU_INTERRUPT_EVENT_HANDLER_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function pointer type used for registering callback functions on SCU event occurrence. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="191" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t XMC_SCU_INTERRUPT_EVENT_t</definition>
        <argsstring></argsstring>
        <name>XMC_SCU_INTERRUPT_EVENT_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines enumerations for events which can lead to interrupt. These enumeration values represent the status of one of the bits in <emphasis>SRSTAT</emphasis> register. Use type <emphasis>XMC_SCU_INTERRUPT_EVENT_t</emphasis> for accessing these enum parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="297" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___s_c_u_1gacf86e99e8def2e37a0b484982e61256d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CalibrateTemperatureSensor</definition>
        <argsstring>(uint32_t offset, uint32_t gain)</argsstring>
        <name>XMC_SCU_CalibrateTemperatureSensor</name>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset value for calibrating the DTS result.<linebreak/>
 <bold>Range:</bold> 0 to 127. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>Gain value for calibrating the DTS conversion result.<linebreak/>
 <bold>Range:</bold> 0 to 63.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Calibrates the measurement of temperature by configuring the values of offset and gain of <emphasis>DTSCON</emphasis> register. <linebreak/>
<linebreak/>
Allows to improve the accuracy of the temperature measurement with the adjustment of <emphasis>OFFSET</emphasis> and <emphasis>GAIN</emphasis> bit fields in the <emphasis>DTSCON</emphasis> register. Offset adjustment is defined as a shift of the conversion result. The range of the offset adjustment is 7 bits with a resolution that corresponds to +/- 12.5�C. The offset value gets added to the measure result. Offset is considered as a signed value. Gain adjustment helps in minimizing gain error. When the <emphasis>gain</emphasis> value is 0, result is generated with maximum gain. When the <emphasis>gain</emphasis> value is 63, result is generated with least gain, i.e, <emphasis>RESULT</emphasis> - 63 at the highest measured temperature.<linebreak/>
It is recommended to use following steps:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis>XMC_SCU_StopTempMeasurement</emphasis> to stop temperature measurement if it was started previously.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_CalibrateTempMonitor</emphasis> with desired offset and gain calibration values to the DTS.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_SetRawTempLimits</emphasis> with desired lower and upper temperature threshold limit values if it is needed.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_StartTempMeasurement</emphasis> to start temperature measurement.<linebreak/>
</para>
</listitem><listitem><para>Check whether Die Temperature Sensor (DTS) is busy in conversion by calling <emphasis><ref refid="group___s_c_u_1ga09f2786f94680cc125ead431f3c4d9c4" kindref="member">XMC_SCU_IsTemperatureSensorBusy()</ref></emphasis> and wait till conversion complete.<linebreak/>
</para>
</listitem><listitem><para>Read the die temperature value using <emphasis>XMC_SCU_GetTemperatureMeasurement</emphasis> API. </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga3f6a1e71b005175777c6dd9a069e325c" kindref="member">XMC_SCU_EnableTemperatureSensor()</ref>, <ref refid="group___s_c_u_1gabac9292e193c9804b5a6856de186737e" kindref="member">XMC_SCU_StartTemperatureMeasurement()</ref>, <ref refid="group___s_c_u_1ga8ac62bd07097bb83cd294a1d6625af36" kindref="member">XMC_SCU_GetTemperatureMeasurement()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1074" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga0f9078c8d5a83149c40812925f3c218d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_DisableClock</definition>
        <argsstring>(const XMC_SCU_CLOCK_t clock)</argsstring>
        <name>XMC_SCU_CLOCK_DisableClock</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga2bd90dc2daf0ff48625ab7b297b2cacd" kindref="member">XMC_SCU_CLOCK_t</ref></type>
          <declname>clock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral for which the clock has to be disabled. <linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga2bd90dc2daf0ff48625ab7b297b2cacd" kindref="member">XMC_SCU_CLOCK_t</ref> to select the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables source clock for the peripheral selected.<linebreak/>
<linebreak/>
The various outputs of Clock Generation Unit (CGU) can be individually disabled by setting the peripheral specific bits in the <emphasis>CLKCLR</emphasis> register.<linebreak/>
It is recommended to use following steps to verify whether clock source of the peripheral is enabled/disabled:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis>XMC_SCU_CLOCK_DisableClock</emphasis> with desired peripheral identifier.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_CLOCK_IsClockEnabled</emphasis> with same peripheral identifier to verify whether peripheral is enabled/disabled.<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga31001fdc4707eb901996074ee0c6fcff" kindref="member">XMC_SCU_CLOCK_EnableClock()</ref>, <ref refid="group___s_c_u_1gab00fa5e7e6ed73767de6f80b9a849543" kindref="member">XMC_SCU_RESET_AssertPeripheralReset()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gad9465a7485ccf3e4aeb4739d4e2422dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_DisableHighPerformanceOscillator</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_DisableHighPerformanceOscillator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables the high precision oscillator by disabling the external oscillator.<linebreak/>
<linebreak/>
The API configures <emphasis>MODE</emphasis> bits of <emphasis>OSCHPCTRL</emphasis> register to 1, there by disabling the external oscillator. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad8179be793c17dda72a87dea440dd118" kindref="member">XMC_SCU_CLOCK_EnableHighPerformanceOscillator()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga1a2f3ea99adb6e81f2e7c1f75c5e58da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables XTAL1 input of OSC_ULP as general purpose input. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga65eea3bc9ec9fa31d512619e87d3a023" kindref="member">XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga19a4bbb5fa7a9f538428ef93a39b5d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_DisableLowPowerOscillator</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_DisableLowPowerOscillator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables ultra low power oscillator.<linebreak/>
<linebreak/>
It is disabled by setting the <emphasis>MODE</emphasis> bits of <emphasis>OSCULCTRL</emphasis> register to value 2. By default on power up, the ultra low power osciallator is disabled. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad827fd74357895b8387e896501f21579" kindref="member">XMC_SCU_CLOCK_EnableLowPowerOscillator()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga2157d5077110326ba87dd76176acfb32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables XTAL1 input of OSC_ULP as general purpose input. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para></para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<ref refid="group___s_c_u_1ga11d9a0ca8f8360267d38254be3fe22c2" kindref="member">XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gacc3a5c5ed7095b25389ebc23705517a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_DisableSystemPll</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_DisableSystemPll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables main PLL for system clock. <linebreak/>
<linebreak/>
System PLL is disabled by setting the <emphasis>PLLPWD</emphasis> and <emphasis>VCOPWD</emphasis> bits of <emphasis>PLLCON0</emphasis> register. By default the system PLL is in power saving mode. If the system PLL is explicitly enabled, the API disables the PLL and the voltage controlled oscillator(VCO) associated with it. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga324e4c4bb68133279a6c8c50fe1a514e" kindref="member">XMC_SCU_CLOCK_EnableSystemPll()</ref>, <ref refid="group___s_c_u_1ga879eeaff71fe00dd7fc148b481ce8379" kindref="member">XMC_SCU_CLOCK_StopSystemPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2712" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga6ca204f398c5ae671ba9d59b5be2264c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_DisableUsbPll</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_DisableUsbPll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables USB PLL for USB clock. <linebreak/>
<linebreak/>
USB PLL is disabled by setting the <emphasis>PLLPWD</emphasis> and <emphasis>VCOPWD</emphasis> bits of <emphasis>USBPLLCON</emphasis> register. By default the USB PLL is in power saving mode. If the USB PLL is explicitly enabled, the API disables the PLL and the voltage controlled oscillator(VCO) associated with it. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaa89d0737a9026f17d0d55b6db74333f5" kindref="member">XMC_SCU_CLOCK_EnableUsbPll()</ref>, <ref refid="group___s_c_u_1ga11067ab015e6a6632cf9be194a4f8d6b" kindref="member">XMC_SCU_CLOCK_StopUsbPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2825" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga31001fdc4707eb901996074ee0c6fcff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_EnableClock</definition>
        <argsstring>(const XMC_SCU_CLOCK_t clock)</argsstring>
        <name>XMC_SCU_CLOCK_EnableClock</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga2bd90dc2daf0ff48625ab7b297b2cacd" kindref="member">XMC_SCU_CLOCK_t</ref></type>
          <declname>clock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral for which the clock has to be enabled. <linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga2bd90dc2daf0ff48625ab7b297b2cacd" kindref="member">XMC_SCU_CLOCK_t</ref> to select the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables the source clock for selected peripheral.<linebreak/>
<linebreak/>
The various outputs of Clock Generation Unit (CGU) can be individually enabled by setting the peripheral specific bit in the <emphasis>CLKSET</emphasis> register.<linebreak/>
It is recommended to use following steps to verify whether a source clock of peripheral is enabled/disabled:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis><ref refid="group___s_c_u_1ga31001fdc4707eb901996074ee0c6fcff" kindref="member">XMC_SCU_CLOCK_EnableClock()</ref></emphasis> with desired peripheral identifier.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis><ref refid="group___s_c_u_1ga52dd13c0aa61ed09a31f8137d28c4532" kindref="member">XMC_SCU_CLOCK_IsClockEnabled()</ref></emphasis> with same peripheral identifier to verify whether the clock is enabled.<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga0f9078c8d5a83149c40812925f3c218d" kindref="member">XMC_SCU_CLOCK_DisableClock()</ref>, <ref refid="group___s_c_u_1gac88ad38d3473b139dafef29dc3ba5216" kindref="member">XMC_SCU_RESET_DeassertPeripheralReset()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1690" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gad8179be793c17dda72a87dea440dd118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_EnableHighPerformanceOscillator</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_EnableHighPerformanceOscillator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables the high precision oscillator by configuring external crystal mode.<linebreak/>
<linebreak/>
The API configures <emphasis>MODE</emphasis> bits of <emphasis>OSCHPCTRL</emphasis> register to 0, there by configuring the external clock input. The System Oscillator Watchdog is enabled. The user should check the status of the oscillator using <ref refid="group___s_c_u_1gad6d4376e5a799c09aa8f6803eec9a945" kindref="member">XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable()</ref> </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad9465a7485ccf3e4aeb4739d4e2422dc" kindref="member">XMC_SCU_CLOCK_DisableHighPerformanceOscillator()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga65eea3bc9ec9fa31d512619e87d3a023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables XTAL1 input of OSC_ULP as general purpose input. Use XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus to monitor the status of OSC_HP XTAL1 pin. @Note OSC_ULP should be disabled previously using <ref refid="group___s_c_u_1gad9465a7485ccf3e4aeb4739d4e2422dc" kindref="member">XMC_SCU_CLOCK_DisableHighPerformanceOscillator()</ref>. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad9465a7485ccf3e4aeb4739d4e2422dc" kindref="member">XMC_SCU_CLOCK_DisableHighPerformanceOscillator()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gad827fd74357895b8387e896501f21579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_EnableLowPowerOscillator</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_EnableLowPowerOscillator</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables ultra low power oscillator(ULP). <linebreak/>
<linebreak/>
It enables the hibernate domain, configures the ultra low power oscillator uisng the <emphasis>MODE</emphasis> bits of the <emphasis>OSCULCTRL</emphasis> register. The <emphasis>Mode</emphasis> bits will be reset to 0 to enable the low power oscillator. Mirror register update delays are handled internally. The OSC_ULP Oscillator Watchdog is enabled. The user should check the status of the oscillator using <ref refid="group___s_c_u_1gac9d46fd22a9e7122d8a6f5990079b336" kindref="member">XMC_SCU_CLOCK_IsLowPowerOscillatorStable()</ref> </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga19a4bbb5fa7a9f538428ef93a39b5d99" kindref="member">XMC_SCU_CLOCK_DisableLowPowerOscillator()</ref> <ref refid="group___s_c_u_1gac9d46fd22a9e7122d8a6f5990079b336" kindref="member">XMC_SCU_CLOCK_IsLowPowerOscillatorStable()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga11d9a0ca8f8360267d38254be3fe22c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables XTAL1 input of OSC_ULP as general purpose input. Use XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus to monitor the status of OSC_ULP XTAL1 pin. @Note OSC_ULP should be disabled previously using <ref refid="group___s_c_u_1ga19a4bbb5fa7a9f538428ef93a39b5d99" kindref="member">XMC_SCU_CLOCK_DisableLowPowerOscillator()</ref>.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga19a4bbb5fa7a9f538428ef93a39b5d99" kindref="member">XMC_SCU_CLOCK_DisableLowPowerOscillator()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga324e4c4bb68133279a6c8c50fe1a514e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_EnableSystemPll</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_EnableSystemPll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables main PLL for system clock. <linebreak/>
<linebreak/>
System PLL is enabled by clearing the <emphasis>PLLPWD</emphasis> and <emphasis>VCOPWD</emphasis> bits of <emphasis>PLLCON0</emphasis> register. By default the system PLL is in power saving mode. The API enables the PLL and the voltage controlled oscillator associated with it. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gacc3a5c5ed7095b25389ebc23705517a3" kindref="member">XMC_SCU_CLOCK_DisableSystemPll()</ref>, <ref refid="group___s_c_u_1ga356a667144dc0009582198bad1070d7a" kindref="member">XMC_SCU_CLOCK_StartSystemPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaa89d0737a9026f17d0d55b6db74333f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_EnableUsbPll</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_EnableUsbPll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables USB PLL for USB clock. <linebreak/>
<linebreak/>
USB PLL is enabled by clearing the <emphasis>PLLPWD</emphasis> and <emphasis>VCOPWD</emphasis> bits of <emphasis>USBPLLCON</emphasis> register. By default the USB PLL is in power saving mode. The API enables the PLL and the voltage controlled oscillator associated with it. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga6ca204f398c5ae671ba9d59b5be2264c" kindref="member">XMC_SCU_CLOCK_DisableUsbPll()</ref>, <ref refid="group___s_c_u_1gacb5f410baf92504c4fc60bc33e167d9c" kindref="member">XMC_SCU_CLOCK_StartUsbPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab0af70f90b9a1f24d3a0a4764543d833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_GatePeripheralClock</definition>
        <argsstring>(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)</argsstring>
        <name>XMC_SCU_CLOCK_GatePeripheralClock</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga29713150fdafc3c88f3c73f621410239" kindref="member">XMC_SCU_PERIPHERAL_CLOCK_t</ref></type>
          <declname>peripheral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peripheral</parametername>
</parameternamelist>
<parameterdescription>
<para>The peripheral for which the clock has to be gated. <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga29713150fdafc3c88f3c73f621410239" kindref="member">XMC_SCU_PERIPHERAL_CLOCK_t</ref> to identify the peripheral clock to be gated.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Blocks the supply of clock to the selected peripheral.<linebreak/>
<linebreak/>
Clock gating helps in reducing the power consumption. User can selectively gate the clocks of unused peripherals. fPERI is the source of clock to various peripherals. Some peripherals support clock gate. Such a gate blocks the clock supply for the selected peripheral. Software can request for individual gating of such peripheral clocks by enabling one of the <emphasis>SCU_CGATSET0</emphasis>, <emphasis>SCU_CGATSET1</emphasis> or <emphasis>SCU_CGATSET2</emphasis> register bitfields.</para>
</simplesect>
Note: Clock gating shall not be activated unless the module is in reset state. So use <emphasis><ref refid="group___s_c_u_1ga804f98badedf0e0ba4ce09f445687a37" kindref="member">XMC_SCU_CLOCK_IsPeripheralClockGated()</ref></emphasis> API before enabling the gating of any peripheral. <simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga804f98badedf0e0ba4ce09f445687a37" kindref="member">XMC_SCU_CLOCK_IsPeripheralClockGated()</ref>, <ref refid="group___s_c_u_1ga702904d10b6e6c6a55db381763fd322f" kindref="member">XMC_SCU_CLOCK_UngatePeripheralClock()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaabc40433a3a0c21f96993cfb6af038ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetCcuClockDivider</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetCcuClockDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ratio of fCCU clock source to the value of fCCU. <bold>Range:</bold> 0 or 1.<linebreak/>
 0-&gt; fCCU= fSYS <linebreak/>
 1-&gt; fCCU= fSYS/2.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the ratio of CCU clock(fCCU) to system clock(fSYS).<linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>CCUDIV</emphasis> bit of <emphasis>CCUCLKCR</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga222a00aedb2c6822f78f2794ef237f26" kindref="member">XMC_SCU_CLOCK_SetCcuClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2108" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2108" bodyend="2111"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga22725a6c39f19f4089e45509e63f936e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetCcuClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t CCU clock frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the frequency of clock(fCPU) used for CCU4, CCU8, POSIF and HRPWM.<linebreak/>
<linebreak/>
The value is obtained from <emphasis>CCUDIV</emphasis> bits of <emphasis>CCUCLKCR</emphasis> register and system clock (fSYS) frequency. Based on these values, fCCU clock frequency is calculated using following formula:<linebreak/>
fCCU = fSYS &gt;&gt; CCUDIV.<linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaabc40433a3a0c21f96993cfb6af038ae" kindref="member">XMC_SCU_CLOCK_GetCcuClockDivider()</ref>, <ref refid="group___s_c_u_1ga0a9fd5e87ad27c874c88706ba43772c2" kindref="member">XMC_SCU_CLOCK_GetSystemClockFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab537dadfc72161a06f4f6dfa85449ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetCpuClockDivider</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetCpuClockDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ratio between system clock(fSYS) and CPU clock(fCPU). <bold>Range:</bold> 0 or 1.<linebreak/>
 0-&gt; fCPU= fSYS. <linebreak/>
 1-&gt; fCPU= fSYS/2.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the ratio between system clock(fSYS) and CPU clock(fCPU). <linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>CPUDIV</emphasis> bit of <emphasis>CPUCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaf5d0a11b4d5cad0f4516afb8b3976ca1" kindref="member">XMC_SCU_CLOCK_SetCpuClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2142" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2142" bodyend="2145"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga3e78410c4d0c9f9b54aa0965d16c3795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetCpuClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Value of CPU clock frequency.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the vlaue of CPU clock frequency.<linebreak/>
<linebreak/>
The value is stored in a global variable <emphasis><bold>SystemCoreClock</bold>.</emphasis> It is updated when the clock configuration is done using the SCU LLD APIs. The value represents the frequency of clock used for CPU operation. <bold>Range:</bold> Value is of type uint32_t, and gives the value of frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga55a1be4f0e96fcda7b2c0feb542af250" kindref="member">XMC_SCU_CLOCK_GetPeripheralClockFrequency()</ref>, <ref refid="group___s_c_u_1gab0af70f90b9a1f24d3a0a4764543d833" kindref="member">XMC_SCU_CLOCK_GatePeripheralClock()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="429" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga12fce693c9f70eae932924cacedd3d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetEbuClockDivider</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetEbuClockDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ratio of PLL clock(fPLL) to EBU clock(fEBU).<linebreak/>
 <bold>Range:</bold> 0 to 63.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the ratio between PLL clock(fPLL) and EBU clock(fEBU).<linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>EBUDIV</emphasis> bits of <emphasis>EBUCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga0d4e4b167bff6189b508f9655693ca84" kindref="member">XMC_SCU_CLOCK_SetEbuClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2243" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2243" bodyend="2246"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga70d21487445c6104d1362b45c3882877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetEbuClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t EBU clock frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the frequency of EBU clock(fEBU).<linebreak/>
<linebreak/>
The value is derived from system PLL clock frequency(fPLL) by applying the EBU divider. It is calculated using the following formula:<linebreak/>
fETH = fPLL /(EBUDIV+1) </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga12fce693c9f70eae932924cacedd3d6b" kindref="member">XMC_SCU_CLOCK_GetEbuClockDivider()</ref>, <ref refid="group___s_c_u_1gae8c2602ab7184dbeda09e0ca0e690168" kindref="member">XMC_SCU_CLOCK_GetSystemPllClockFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga720f80a8e2c129e7139c8bfec4afb962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetECATClockDivider</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetECATClockDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ratio between the source of ECAT clock and the ECAT clock.<linebreak/>
 <bold>Range:</bold> 0 to 3.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the ratio between the ECAT parent clock and the ECAT clock. <linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>ECADIV</emphasis> bits of <emphasis>ECATCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaa7c721ac3ba6f1d066101176e103d5ff" kindref="member">XMC_SCU_CLOCK_SetECATClockSource()</ref>, <ref refid="group___s_c_u_1gaa20f63e6573fd17e9b0c05a004dcd499" kindref="member">XMC_SCU_CLOCK_SetECATClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2346" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2346" bodyend="2349"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab672be7abcd0ab0f41940b068a09f049" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetECATClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetECATClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t ECAT clock frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the frequency of ECAT clock(fECAT).<linebreak/>
<linebreak/>
The value is derived using <emphasis>ECADIV</emphasis> bits of <emphasis>ECATCLKCR</emphasis> register and ECAT clock source. Based on these values it is calculated using the following formula:<linebreak/>
if ECAT clock source = PLL: fECAT = fPLL/(ECADIV + 1).<linebreak/>
if ECAT clock source = USBPLL: fECAT = fUSBPLL/(ECADIV + 1).<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga2786257933663aa4c54f9dc7c97422d4" kindref="member">XMC_SCU_CLOCK_GetECATClockSource()</ref>, <ref refid="group___s_c_u_1ga720f80a8e2c129e7139c8bfec4afb962" kindref="member">XMC_SCU_CLOCK_GetECATClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga2786257933663aa4c54f9dc7c97422d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1ga26a3f6ccc6fa98818df8efd7e487d7c0" kindref="member">XMC_SCU_CLOCK_ECATCLKSRC_t</ref></type>
        <definition>XMC_SCU_CLOCK_ECATCLKSRC_t XMC_SCU_CLOCK_GetECATClockSource</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetECATClockSource</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XMC_SCU_CLOCK_ECATCLKSRC_t Source of ECAT clock.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga26a3f6ccc6fa98818df8efd7e487d7c0" kindref="member">XMC_SCU_CLOCK_ECATCLKSRC_t</ref> to identify the clock source.<linebreak/>
 XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT clock. <linebreak/>
 XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for ECAT clock. <linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the source of ECAT clock (fECAT). The value is obtained by reading <emphasis>ECATSEL</emphasis> bit of <emphasis>ECATCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gadca7d1332ed62fda2a1a85550d12f06d" kindref="member">XMC_SCU_HIB_SetRtcClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2039" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2039" bodyend="2042"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga83d6d8e1bb269b8cccb8e700bd4a842a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetEthernetClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ethernet clock frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the frequency of Ethernet clock(fETH).<linebreak/>
<linebreak/>
The value is derived from system clock frequency(fSYS). It is calculated using the following formula:<linebreak/>
fETH = fSYS &gt;&gt; 1; </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga0a9fd5e87ad27c874c88706ba43772c2" kindref="member">XMC_SCU_CLOCK_GetSystemClockFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2618" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2618" bodyend="2621"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga24e64fe15f9ce0183a1bc5fba7bec579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetExternalOutputClockDivider</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetExternalOutputClockDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ratio between the external output parent clock selected and the output clock.<linebreak/>
 <bold>Range:</bold> 0 to 511.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the divider value applied on parent clock before the generation of external output clock. <linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>EXTDIV</emphasis> bit of <emphasis>EXTCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae80c027210bcf8cdafd0fe8aa3274777" kindref="member">XMC_SCU_CLOCK_GetExternalOutputClockSource()</ref>, <ref refid="group___s_c_u_1ga504e82a0763495f9d487ea0b0d5ebd7a" kindref="member">XMC_SCU_CLOCK_SetExternalOutputClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2313" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2313" bodyend="2316"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab8274d36f46ebb315665d30985b62611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetExternalOutputClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t External clock out frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the frequency of external output clock(fEXT).<linebreak/>
<linebreak/>
The value is derived using <emphasis>ECKDIV</emphasis> bits of <emphasis>EXCLKCR</emphasis> register and external clock out source. Based on these values, it is calculated using the following formula:<linebreak/>
if external clock out source = System clock: fEXT = fSYS.<linebreak/>
if external clock out source = PLL: fEXT = fPLL/(ECKDIV + 1).<linebreak/>
if external clock out source = USBPLL: fEXT = fUSBPLL/(ECKDIV + 1).<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga24e64fe15f9ce0183a1bc5fba7bec579" kindref="member">XMC_SCU_CLOCK_GetExternalOutputClockDivider()</ref>, <ref refid="group___s_c_u_1gae80c027210bcf8cdafd0fe8aa3274777" kindref="member">XMC_SCU_CLOCK_GetExternalOutputClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae80c027210bcf8cdafd0fe8aa3274777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1gaaf5142b4b63fc9f6413c9deb3e7740a0" kindref="member">XMC_SCU_CLOCK_EXTOUTCLKSRC_t</ref></type>
        <definition>XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetExternalOutputClockSource</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XMC_SCU_CLOCK_EXTOUTCLKSRC_t Source of external clock output(fEXT).<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gaaf5142b4b63fc9f6413c9deb3e7740a0" kindref="member">XMC_SCU_CLOCK_EXTOUTCLKSRC_t</ref> to identify the clock.<linebreak/>
 XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. <linebreak/>
 XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. <linebreak/>
 XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. <linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the source of external clock output(fEXT).<linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>ECKSEL</emphasis> bits of <emphasis>EXTCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae0e95e282cd20159627d036941caf0c7" kindref="member">XMC_SCU_CLOCK_SetExternalOutputClockSource()</ref>, <ref refid="group___s_c_u_1ga504e82a0763495f9d487ea0b0d5ebd7a" kindref="member">XMC_SCU_CLOCK_SetExternalOutputClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1964" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1964" bodyend="1967"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae04a5de657e1667719fd0f643440365f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Status OSC_HP XTAL1 pin</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Monitor the status of OSC_HP XTAL1 pin. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga65eea3bc9ec9fa31d512619e87d3a023" kindref="member">XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae0f108ec4b8bc0cbd0bc32968a8e12d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Status OSC_ULP XTAL1 pin</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Monitor the status of OSC_ULP XTAL1 pin. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga11d9a0ca8f8360267d38254be3fe22c2" kindref="member">XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae163ddda50d4e04337cc17b3a3aed1f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetPeripheralClockDivider</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetPeripheralClockDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ratio of peripheral clock source to the value of peripheral clock.<linebreak/>
 <bold>Range:</bold> 0 or 1.<linebreak/>
 0-&gt; fPERIPH= fCPU.<linebreak/>
 1-&gt; fPERIPH= fCPU/2.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the ratio of CPU clock(fCPU) to peripheral clock(fPERIPH).<linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>PBDIV</emphasis> bit of <emphasis>PBCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga256245971cfb74c5260d5564bb01020a" kindref="member">XMC_SCU_CLOCK_SetPeripheralClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2177" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2177" bodyend="2180"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga55a1be4f0e96fcda7b2c0feb542af250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetPeripheralClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Value of peripheral clock frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the vlaue of clock frequency at which the peripherals are working.<linebreak/>
<linebreak/>
The value is derived from the CPU frequency. <bold>Range:</bold> Value is of type uint32_t. It is represented in Hertz. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga3e78410c4d0c9f9b54aa0965d16c3795" kindref="member">XMC_SCU_CLOCK_GetCpuClockFrequency()</ref>,<ref refid="group___s_c_u_1gab0af70f90b9a1f24d3a0a4764543d833" kindref="member">XMC_SCU_CLOCK_GatePeripheralClock()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga700247f0d54ab409e0542547ce3546f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetSystemClockDivider</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetSystemClockDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ratio of fSYS clock source to the value of fSYS. <bold>Range:</bold> 0 to 255.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the value of ratio between the source of system clock to the the value of system clock frequency. <linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>SYSDIV</emphasis> bits of <emphasis>SYSCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae07a3504f85acd247cd7b9315dcc4083" kindref="member">XMC_SCU_CLOCK_SetSystemClockDivider()</ref>, <ref refid="group___s_c_u_1gac6d37853e6609aa646b4dd1517fddd54" kindref="member">XMC_SCU_CLOCK_SetSystemClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2071" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2071" bodyend="2074"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga0a9fd5e87ad27c874c88706ba43772c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetSystemClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t System clock frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the frequency of system clock (fSYS).<linebreak/>
<linebreak/>
The value obtained by dividing <emphasis>CPUDIV</emphasis> bits information of <emphasis>CPUCLKCR</emphasis> register with SystemCoreClock (fCPU) value.<linebreak/>
Based on these values, fSYS clock frequency is derived using the following formula:<linebreak/>
fSYS = fCPU &lt;&lt; CPUDIV. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga050ac1d63bf86241205c4fdcca3eb988" kindref="member">XMC_SCU_CLOCK_GetUsbPllClockFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2572" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2572" bodyend="2575"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga0e6bbfbc0d075a0e3bab4c4906136fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1gaccffa04837e2b0c2132f74f3c502139b" kindref="member">XMC_SCU_CLOCK_SYSCLKSRC_t</ref></type>
        <definition>XMC_SCU_CLOCK_SYSCLKSRC_t XMC_SCU_CLOCK_GetSystemClockSource</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetSystemClockSource</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XMC_SCU_CLOCK_SYSCLKSRC_t Source of clock for fSYS.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gaccffa04837e2b0c2132f74f3c502139b" kindref="member">XMC_SCU_CLOCK_SYSCLKSRC_t</ref> to select the source of clock.<linebreak/>
 XMC_SCU_CLOCK_SYSCLKSRC_OFI - internal fast clock selected as fSYS.<linebreak/>
 XMC_SCU_CLOCK_SYSCLKSRC_PLL - output of PLL fPLL selected as fSYS.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the selected source of system clock (fSYS). <linebreak/>
<linebreak/>
Selected source of fSYS is obtained by reading <emphasis>SYSSEL</emphasis> bits of <emphasis>SYSCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gac6d37853e6609aa646b4dd1517fddd54" kindref="member">XMC_SCU_CLOCK_SetSystemClockSource()</ref>, <ref refid="group___s_c_u_1gabcba51c9d61c4f3e8a3e1bc816c5fb02" kindref="member">XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1759" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1759" bodyend="1762"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae8c2602ab7184dbeda09e0ca0e690168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetSystemPllClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t System frequency in Hertz.<linebreak/>
 <bold>Range:</bold> clock frequency in Hertz. Range of the value depends on the source clock frequency and the configured values of dividers.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the value of system PLL output clock frequency(fPLL).<linebreak/>
<linebreak/>
The API uses <emphasis>N-DIV</emphasis>, <emphasis>P-DIV</emphasis>, <emphasis>K1-DIV</emphasis>, <emphasis>K2-DIV</emphasis> bits information from <emphasis>PLLCON1</emphasis> register and VCOBYP bit information from <emphasis>PLLCON0</emphasis> register. It calculates frequency of system pll clock using following formula: If normal Mode : fPLL = (fOSC * N)/(P * K2). If prescaler mode: fPLL = fOSC/ K1. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gac6d37853e6609aa646b4dd1517fddd54" kindref="member">XMC_SCU_CLOCK_SetSystemClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2525" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga00b75ab108bf4a3b1e153a339b77a62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1ga91284bbc86bb476327771f3639cbe440" kindref="member">XMC_SCU_CLOCK_SYSPLLCLKSRC_t</ref></type>
        <definition>XMC_SCU_CLOCK_SYSPLLCLKSRC_t XMC_SCU_CLOCK_GetSystemPllClockSource</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetSystemPllClockSource</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XMC_SCU_CLOCK_OSCCLKSRC_t Source of clock for system PLL.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga91284bbc86bb476327771f3639cbe440" kindref="member">XMC_SCU_CLOCK_SYSPLLCLKSRC_t</ref> for identifying the clock source.<linebreak/>
 XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillator(fOHP).<linebreak/>
 XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the source of system PLL clock (fPLL). <linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>VCOBYP</emphasis> bit of <emphasis>PLLCON0</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad8179be793c17dda72a87dea440dd118" kindref="member">XMC_SCU_CLOCK_EnableHighPerformanceOscillator()</ref>, <ref refid="group___s_c_u_1gab274b04a774d18a4a7305f43ffb71d4e" kindref="member">XMC_SCU_CLOCK_SetSystemPllClockSource()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2000" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2000" bodyend="2003"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gabcba51c9d61c4f3e8a3e1bc816c5fb02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Source clock used for deriving system clock.<linebreak/>
 <bold>Range:</bold> fOHP frequency if external high precision frequency is used. <linebreak/>
 fOFI fast internal clock frequency.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the value of the input clock frequency for deriving the system clock. The API retrieves frequency of system PLL input clock (fPLLin). Based on <emphasis>PINSEL</emphasis> bits information from <emphasis>PLLCON2</emphasis> register, the parent clock source is obtained. This bit field specifies if fOHP or fOFI is used for deriving system clock. System clock frequency is obtained by dividing the source clock frequency with different divider values. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae8c2602ab7184dbeda09e0ca0e690168" kindref="member">XMC_SCU_CLOCK_GetSystemPllClockFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2542" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga129a4c1cd0e4963b8a573c25485cd693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetUsbClockDivider</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetUsbClockDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ratio of PLL output clock(fPLL) to USB clock(fUSB). <bold>Range:</bold> 0 to 7.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the ratio between PLL output frequency(fPLL) and USB clock(fUSB).<linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>USBDIV</emphasis> bit of <emphasis>USBCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga6bfbeee9da8ba9c854c34fc5da9a7d7d" kindref="member">XMC_SCU_CLOCK_SetUsbClockDivider()</ref>, <ref refid="group___s_c_u_1ga65588bdfa384f0f3deca2553ca2205be" kindref="member">XMC_SCU_CLOCK_GetUsbClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2209" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2209" bodyend="2212"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gad12a425e40ac269c2b17a06100be6cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetUsbClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t USB clock frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the frequency of USB and SDMMC clock(fUSB/fSDMMC).<linebreak/>
<linebreak/>
The value is obtained from <emphasis>USBDIV</emphasis> bits of <emphasis>USBCLKCR</emphasis> register and USB clock source. Based on these values fUSB/fSDMMC clock frequency is calculated using following formula:<linebreak/>
if USB clock source = USBPLL: fUSB/fSDMMC = fUSBPLL/(USBDIV + 1).<linebreak/>
if USB clock source = PLL: fUSB/fSDMMC = fPLL/(USBDIV + 1).<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga65588bdfa384f0f3deca2553ca2205be" kindref="member">XMC_SCU_CLOCK_GetUsbClockSource()</ref>, <ref refid="group___s_c_u_1ga129a4c1cd0e4963b8a573c25485cd693" kindref="member">XMC_SCU_CLOCK_GetUsbClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga65588bdfa384f0f3deca2553ca2205be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1gaa25fc7c21af145300a57dd93c391816d" kindref="member">XMC_SCU_CLOCK_USBCLKSRC_t</ref></type>
        <definition>XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetUsbClockSource</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XMC_SCU_CLOCK_USBCLKSRC_t Source of clock for USB and SDMMC(fUSB/SDMMC).<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gaa25fc7c21af145300a57dd93c391816d" kindref="member">XMC_SCU_CLOCK_USBCLKSRC_t</ref> to identify the source of clock.<linebreak/>
 XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL is selected as source of USB clock(fUSB/SDMMC).<linebreak/>
 XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL is selected as source of USB clock(fUSB/SDMMC).</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the selected source of USB and SDMMC clock frequency.<linebreak/>
<linebreak/>
The clock source is read from from the <emphasis>USBSEL</emphasis> bits of <emphasis>USBCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga6bfbeee9da8ba9c854c34fc5da9a7d7d" kindref="member">XMC_SCU_CLOCK_SetUsbClockDivider()</ref>, <ref refid="group___s_c_u_1ga050ac1d63bf86241205c4fdcca3eb988" kindref="member">XMC_SCU_CLOCK_GetUsbPllClockFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1794" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1794" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga050ac1d63bf86241205c4fdcca3eb988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetUsbPllClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t USB PLL output clock frequency.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the frequency of USB PLL output clock (fUSBPLL).<linebreak/>
<linebreak/>
It obtains the <emphasis>VCOBYP</emphasis> bits information from <emphasis>USBPLLCON</emphasis> register and decides if USB PLL mode is used. If USB PLL mode is used, the USB clock frequency is obtained by dividing the source clock by USB PLL dividers.<linebreak/>
The frequency is obtained using following formula:<linebreak/>
If Normal Mode : fUSBPLL = (fOSC * N)/(P * 2).<linebreak/>
If Prescaler mode: fPLL = fOSC. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gabcba51c9d61c4f3e8a3e1bc816c5fb02" kindref="member">XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga12c044e6458ccab71e1d8c045719d545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetWdtClockDivider</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetWdtClockDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Ratio between the source of WDT clock and the WDT clock.<linebreak/>
 <bold>Range:</bold> 0 to 255.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the ratio between the WDT parent clock and the WDT clock. <linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>WDTDIV</emphasis> bits of <emphasis>WDTCLKCR</emphasis> register. Ensure that the WDT parent clock is considered before using the value of the divider value. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga9061262a31285c0b5c3a13801650a453" kindref="member">XMC_SCU_CLOCK_SetWdtClockSource()</ref>, <ref refid="group___s_c_u_1ga8f338f60cac7809fafd01b0941d1a2c1" kindref="member">XMC_SCU_CLOCK_SetWdtClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2279" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2279" bodyend="2282"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga6266b7288cd6a209146d83d67f21b573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetWdtClockFrequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t WDT clock frequency in Hertz.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the frequency of WDT clock(fWDT).<linebreak/>
<linebreak/>
The value is derived using <emphasis>WDTDIV</emphasis> bits of <emphasis>WDTCLKCR</emphasis> register and WDT clock source. Based on these values it is calculated using the following formula:<linebreak/>
if WDT clock source = PLL: fWDT = fUSBPLL/(WDTDIV + 1).<linebreak/>
if WDT clock source = OFI: fWDT = fOFI/(WDTDIV + 1).<linebreak/>
if WDT clock source = Standby: fWDT = fSTDBY/(WDTDIV + 1).<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae5ee4bbf7462c9e3d2e3b15d845136da" kindref="member">XMC_SCU_CLOCK_GetWdtClockSource()</ref>, <ref refid="group___s_c_u_1ga12c044e6458ccab71e1d8c045719d545" kindref="member">XMC_SCU_CLOCK_GetWdtClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae5ee4bbf7462c9e3d2e3b15d845136da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1ga77f22d4ceb0b920b48b87da63f62d174" kindref="member">XMC_SCU_CLOCK_WDTCLKSRC_t</ref></type>
        <definition>XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_GetWdtClockSource</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XMC_SCU_CLOCK_WDTCLKSRC_t Clock source configured for watchdog timer.<linebreak/>
 <bold>Range:</bold> Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.<linebreak/>
 XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)<linebreak/>
 XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)<linebreak/>
 XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the source of clock used for watchdog timer.<linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>WDTSEL</emphasis> bits of <emphasis>WDTCLKCR</emphasis> register. The time for timeout or pre-warning of watchdog has to be calculated based on the clock source selected. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga8f338f60cac7809fafd01b0941d1a2c1" kindref="member">XMC_SCU_CLOCK_SetWdtClockDivider()</ref>, <ref refid="group___s_c_u_1ga9061262a31285c0b5c3a13801650a453" kindref="member">XMC_SCU_CLOCK_SetWdtClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1835" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1835" bodyend="1838"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga08c337e8a728604e7eb54dff78ae2d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_Init</definition>
        <argsstring>(const XMC_SCU_CLOCK_CONFIG_t *const config)</argsstring>
        <name>XMC_SCU_CLOCK_Init</name>
        <param>
          <type>const <ref refid="struct_x_m_c___s_c_u___c_l_o_c_k___c_o_n_f_i_g__t" kindref="compound">XMC_SCU_CLOCK_CONFIG_t</ref> *const</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure holding the clock prescaler values and divider values for configuring clock generators and clock tree.<linebreak/>
 <bold>Range:</bold> Configure the members of structure <ref refid="struct_x_m_c___s_c_u___c_l_o_c_k___c_o_n_f_i_g__t" kindref="compound">XMC_SCU_CLOCK_CONFIG_t</ref> for various parameters of clock setup.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Initializes clock generators and clock tree.<linebreak/>
<linebreak/>
Enables the high precision oscillator(fOHP) input and configures the system and peripheral clock frequencies. Based on the system clock source selected in <emphasis>config</emphasis>, either fPLL or fOFI will be chosen as system clock. Based on PLL mode(normal or prescaler mode) used, PLL ramps up in steps to achieve target frequency. The clock dividers for CPU, CCU and peripheral clocks will be set based on the input configuration. The <emphasis>SystemCoreClock</emphasis> variable is set with the value of system clock frequency. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga55a1be4f0e96fcda7b2c0feb542af250" kindref="member">XMC_SCU_CLOCK_GetPeripheralClockFrequency()</ref>, <ref refid="group___s_c_u_1ga3e78410c4d0c9f9b54aa0965d16c3795" kindref="member">XMC_SCU_CLOCK_GetCpuClockFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga52dd13c0aa61ed09a31f8137d28c4532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_CLOCK_IsClockEnabled</definition>
        <argsstring>(const XMC_SCU_CLOCK_t clock)</argsstring>
        <name>XMC_SCU_CLOCK_IsClockEnabled</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga2bd90dc2daf0ff48625ab7b297b2cacd" kindref="member">XMC_SCU_CLOCK_t</ref></type>
          <declname>clock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Peripheral for which the clock status has to be checked. <linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga2bd90dc2daf0ff48625ab7b297b2cacd" kindref="member">XMC_SCU_CLOCK_t</ref> to select the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool Status of peripheral clock.<linebreak/>
 <bold>Range:</bold> <emphasis>true</emphasis> if peripheral clock is enabled. <emphasis>false</emphasis> if peripheral clock is disabled.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Checks the status of peripheral source clock.<linebreak/>
<linebreak/>
The status of peripheral source clock is read from the <emphasis>CLKSTATn</emphasis> register. Returns <emphasis>true</emphasis> if clock is enabled and returns <emphasis>false</emphasis> otherwise. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga31001fdc4707eb901996074ee0c6fcff" kindref="member">XMC_SCU_CLOCK_EnableClock()</ref>, <ref refid="group___s_c_u_1ga0f9078c8d5a83149c40812925f3c218d" kindref="member">XMC_SCU_CLOCK_DisableClock()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1726" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gad6d4376e5a799c09aa8f6803eec9a945" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Status of high performance oscillator</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Checks if the OSC_HP oscillator is stable and usable </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad8179be793c17dda72a87dea440dd118" kindref="member">XMC_SCU_CLOCK_EnableHighPerformanceOscillator()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gac9d46fd22a9e7122d8a6f5990079b336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_IsLowPowerOscillatorStable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Status of low power oscillator</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Checks if the OSC_ULP oscillator is stable and usable </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad827fd74357895b8387e896501f21579" kindref="member">XMC_SCU_CLOCK_EnableLowPowerOscillator()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga804f98badedf0e0ba4ce09f445687a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_CLOCK_IsPeripheralClockGated</definition>
        <argsstring>(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)</argsstring>
        <name>XMC_SCU_CLOCK_IsPeripheralClockGated</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga29713150fdafc3c88f3c73f621410239" kindref="member">XMC_SCU_PERIPHERAL_CLOCK_t</ref></type>
          <declname>peripheral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peripheral</parametername>
</parameternamelist>
<parameterdescription>
<para>The peripheral for which the check for clock gating has to be done. <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga29713150fdafc3c88f3c73f621410239" kindref="member">XMC_SCU_PERIPHERAL_CLOCK_t</ref> to identify the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool Status of the peripheral clock gating. <bold>Range:</bold> true if the peripheral clock is gated. false if the peripheral clock ungated(gate de-asserted).</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Gives the status of peripheral clock gating.<linebreak/>
<linebreak/>
Checks the status of peripheral clock gating using one of CGATSTAT0, CGATSTAT1 or CGATSTAT2 registers. It is recommended to use this API before enabling the gating of any peripherals through <emphasis><ref refid="group___s_c_u_1gab0af70f90b9a1f24d3a0a4764543d833" kindref="member">XMC_SCU_CLOCK_GatePeripheralClock()</ref></emphasis> API.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga702904d10b6e6c6a55db381763fd322f" kindref="member">XMC_SCU_CLOCK_UngatePeripheralClock()</ref>, <ref refid="group___s_c_u_1gab0af70f90b9a1f24d3a0a4764543d833" kindref="member">XMC_SCU_CLOCK_GatePeripheralClock()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga3b65db9f01407d2b3b98d5984ae09e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_CLOCK_IsSystemPllLocked</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_IsSystemPllLocked</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean value indicating if System PLL is locked</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Return status of System PLL VCO. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga356a667144dc0009582198bad1070d7a" kindref="member">XMC_SCU_CLOCK_StartSystemPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2799" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab138fec040dc094a8a6579cfcaad2da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_CLOCK_IsUsbPllLocked</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_IsUsbPllLocked</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean value indicating if USB PLL is locked</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Return status of USB PLL VCO. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gacb5f410baf92504c4fc60bc33e167d9c" kindref="member">XMC_SCU_CLOCK_StartUsbPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2884" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga8ae09f0a2575e72f52d961ea5a4622cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetBackupClockCalibrationMode</definition>
        <argsstring>(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)</argsstring>
        <name>XMC_SCU_CLOCK_SetBackupClockCalibrationMode</name>
        <param>
          <type><ref refid="group___s_c_u_1ga7ba412eed9b7e0f28d60090b5a53768d" kindref="member">XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Backup clock calibration mode.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga7ba412eed9b7e0f28d60090b5a53768d" kindref="member">XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t</ref> to identify the calibration mode.<linebreak/>
 XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY- Force trimming of internal oscillator with firmware configured values.<linebreak/>
 XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC- Calibrate internal oscillator automatically using standby clock(fSTDBY).<linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the calibration mode of internal oscillator.<linebreak/>
<linebreak/>
Based on the calibration mode selected, the internal oscillator calibration will be configured. The calibration is useful while using fast internal clock(fOFI). When factory mode calibration is used, the internal oscillator is trimmed using the firmware configured values. If automatic calibration is selected, the internal oscillator will be monitored using the backup clock.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gac6d37853e6609aa646b4dd1517fddd54" kindref="member">XMC_SCU_CLOCK_SetSystemClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga222a00aedb2c6822f78f2794ef237f26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetCcuClockDivider</definition>
        <argsstring>(const uint32_t ratio)</argsstring>
        <name>XMC_SCU_CLOCK_SetCcuClockDivider</name>
        <param>
          <type>const uint32_t</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of fCCU clock source to the value of fCCU. <bold>Range:</bold> 1 or 2.<linebreak/>
 1-&gt; fCCU= fSYS <linebreak/>
 2-&gt; fCCU= fSYS/2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the divider for CCU clock source. <linebreak/>
<linebreak/>
Capture compare unit(CCU) can take either fSYS or fSYS/2 as the source of clock. The configuration is set to <emphasis>CCUDIV</emphasis> bit of <emphasis>CCUCLKCR</emphasis> register. The CCUDIV bit is 1 bit wide.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaabc40433a3a0c21f96993cfb6af038ae" kindref="member">XMC_SCU_CLOCK_GetCcuClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2093" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaf5d0a11b4d5cad0f4516afb8b3976ca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetCpuClockDivider</definition>
        <argsstring>(const uint32_t ratio)</argsstring>
        <name>XMC_SCU_CLOCK_SetCpuClockDivider</name>
        <param>
          <type>const uint32_t</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio between system clock(fSYS) and CPU clock(fCPU). <bold>Range:</bold> 1 or 2.<linebreak/>
 1-&gt; fCPU= fSYS. <linebreak/>
 2-&gt; fCPU= fSYS/2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the CPU clock by setting the divider value for the system clock. <linebreak/>
<linebreak/>
The value is set to the <emphasis>CPUDIV</emphasis> bit of <emphasis>CPUCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gab537dadfc72161a06f4f6dfa85449ae6" kindref="member">XMC_SCU_CLOCK_GetCpuClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga195b4578bc2ddafae6a3a59c53325a0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetDeepSleepConfig</definition>
        <argsstring>(int32_t config)</argsstring>
        <name>XMC_SCU_CLOCK_SetDeepSleepConfig</name>
        <param>
          <type>int32_t</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state. <ref refid="group___s_c_u_1ga5a00552e019ebfb3f3ded0ac0c52d324" kindref="member">XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state. In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state. Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.</para>
</simplesect>
The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is stopped.</para>
<para>In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC is still clocked by a free-running clock. Peripherals are only clocked when configured to stay enabled. Configuration of peripherals and any SRAM content is preserved. The Flash module can be put into low-power mode to achieve a further power reduction. On wake-up Flash module will be restarted again before instructions or data access is possible. Any interrupt will bring the system back to operation via the NVIC.The clock setup before entering Deep Sleep state is restored upon wake-up.</para>
<para>@usage <programlisting><codeline><highlight class="normal">//<sp/>Configure<sp/>system<sp/>during<sp/>SLEEP<sp/>state</highlight></codeline>
<codeline><highlight class="normal">XMC_SCU_CLOCK_SetDeepSleepConfig(XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Make<sp/>sure<sp/>that<sp/>SLEEPDEEP<sp/>bit<sp/>is<sp/>set</highlight></codeline>
<codeline><highlight class="normal">SCB-&gt;SCR<sp/>|=<sp/>SCB_SCR_SLEEPDEEP_Msk;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Return<sp/>to<sp/>SLEEP<sp/>mode<sp/>after<sp/>handling<sp/>the<sp/>wakeup<sp/>event</highlight></codeline>
<codeline><highlight class="normal">SCB-&gt;SCR<sp/>|=<sp/>SCB_SCR_SLEEPONEXIT_Msk;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Put<sp/>system<sp/>in<sp/>DEEPSLEEP<sp/>state</highlight></codeline>
<codeline><highlight class="normal">__WFI();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga08c337e8a728604e7eb54dff78ae2d9d" kindref="member">XMC_SCU_CLOCK_Init()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3571" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="3571" bodyend="3574"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga0d4e4b167bff6189b508f9655693ca84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetEbuClockDivider</definition>
        <argsstring>(const uint32_t ratio)</argsstring>
        <name>XMC_SCU_CLOCK_SetEbuClockDivider</name>
        <param>
          <type>const uint32_t</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of PLL clock(fPLL) to EBU clock(fEBU).<linebreak/>
 <bold>Range:</bold> 1 to 64.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the EBU clock(fEBU) by setting the divider value.<linebreak/>
<linebreak/>
The clock divider is configured to the <emphasis>EBUDIV</emphasis> bits of <emphasis>EBUCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga12fce693c9f70eae932924cacedd3d6b" kindref="member">XMC_SCU_CLOCK_GetEbuClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaa20f63e6573fd17e9b0c05a004dcd499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetECATClockDivider</definition>
        <argsstring>(const uint32_t divider)</argsstring>
        <name>XMC_SCU_CLOCK_SetECATClockDivider</name>
        <param>
          <type>const uint32_t</type>
          <declname>divider</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio between the source of ECAT clock and the ECAT clock.<linebreak/>
 <bold>Range:</bold> 1 to 4.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the ECAT clock by setting the clock divider for the ECAT clock source.<linebreak/>
<linebreak/>
The value is configured to <emphasis>ECADIV</emphasis> bits of <emphasis>ECATCLKCR</emphasis> register. The value of divider is decremented by 1 before configuring. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaa7c721ac3ba6f1d066101176e103d5ff" kindref="member">XMC_SCU_CLOCK_SetECATClockSource()</ref>, <ref refid="group___s_c_u_1ga720f80a8e2c129e7139c8bfec4afb962" kindref="member">XMC_SCU_CLOCK_GetECATClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaa7c721ac3ba6f1d066101176e103d5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetECATClockSource</definition>
        <argsstring>(const XMC_SCU_CLOCK_ECATCLKSRC_t source)</argsstring>
        <name>XMC_SCU_CLOCK_SetECATClockSource</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga26a3f6ccc6fa98818df8efd7e487d7c0" kindref="member">XMC_SCU_CLOCK_ECATCLKSRC_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source of ECAT clock.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga26a3f6ccc6fa98818df8efd7e487d7c0" kindref="member">XMC_SCU_CLOCK_ECATCLKSRC_t</ref> to identify the clock source.<linebreak/>
 XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT clock. <linebreak/>
 XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for ECAT clock. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the source of ECAT clock (fECAT).<linebreak/>
<linebreak/>
The value is configured to <emphasis>ECATSEL</emphasis> bit of <emphasis>ECATCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga2786257933663aa4c54f9dc7c97422d4" kindref="member">XMC_SCU_CLOCK_GetECATClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2021" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2021" bodyend="2025"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga504e82a0763495f9d487ea0b0d5ebd7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetExternalOutputClockDivider</definition>
        <argsstring>(const uint32_t ratio)</argsstring>
        <name>XMC_SCU_CLOCK_SetExternalOutputClockDivider</name>
        <param>
          <type>const uint32_t</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio between the external output parent clock selected and the output clock.<linebreak/>
 <bold>Range:</bold> 1 to 512.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the external output clock by setting the divider value for the parent clock. <linebreak/>
<linebreak/>
The value will be configured to <emphasis>ECKDIV</emphasis> bits of <emphasis>EXTCLKCR</emphasis> register. The divider value is decremented by 1 before storing it to the bit fields. Ensure that the source of external output clock is configured appropriately using the API <ref refid="group___s_c_u_1gae0e95e282cd20159627d036941caf0c7" kindref="member">XMC_SCU_CLOCK_SetExternalOutputClockSource()</ref>. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae0e95e282cd20159627d036941caf0c7" kindref="member">XMC_SCU_CLOCK_SetExternalOutputClockSource()</ref>, <ref refid="group___s_c_u_1ga24e64fe15f9ce0183a1bc5fba7bec579" kindref="member">XMC_SCU_CLOCK_GetExternalOutputClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae0e95e282cd20159627d036941caf0c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetExternalOutputClockSource</definition>
        <argsstring>(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t clock)</argsstring>
        <name>XMC_SCU_CLOCK_SetExternalOutputClockSource</name>
        <param>
          <type>const <ref refid="group___s_c_u_1gaaf5142b4b63fc9f6413c9deb3e7740a0" kindref="member">XMC_SCU_CLOCK_EXTOUTCLKSRC_t</ref></type>
          <declname>clock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Source of external clock output(fEXT).<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gaaf5142b4b63fc9f6413c9deb3e7740a0" kindref="member">XMC_SCU_CLOCK_EXTOUTCLKSRC_t</ref> to identify the clock.<linebreak/>
 XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. <linebreak/>
 XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. <linebreak/>
 XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the source of external clock out (fEXT).<linebreak/>
<linebreak/>
The value will be configured to <emphasis>ECKSEL</emphasis> bits of <emphasis>EXTCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae80c027210bcf8cdafd0fe8aa3274777" kindref="member">XMC_SCU_CLOCK_GetExternalOutputClockSource()</ref>, <ref refid="group___s_c_u_1ga504e82a0763495f9d487ea0b0d5ebd7a" kindref="member">XMC_SCU_CLOCK_SetExternalOutputClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1943" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga256245971cfb74c5260d5564bb01020a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetPeripheralClockDivider</definition>
        <argsstring>(const uint32_t ratio)</argsstring>
        <name>XMC_SCU_CLOCK_SetPeripheralClockDivider</name>
        <param>
          <type>const uint32_t</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of peripheral clock source to the value of peripheral clock.<linebreak/>
 <bold>Range:</bold> 1 or 2.<linebreak/>
 1-&gt; fPERIPH= fCPU.<linebreak/>
 2-&gt; fPERIPH= fCPU/2.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the peripheral clock by setting the divider for CPU clock(fCPU).<linebreak/>
<linebreak/>
The peripheral clock can be equal to either fCPU or fCPU/2. The value is configured to <emphasis>PBDIV</emphasis> bit of <emphasis>PBCLKCR</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae163ddda50d4e04337cc17b3a3aed1f7" kindref="member">XMC_SCU_CLOCK_GetPeripheralClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gad337ef7ef0786c19225a5c1a69b4fe09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetSleepConfig</definition>
        <argsstring>(int32_t config)</argsstring>
        <name>XMC_SCU_CLOCK_SetSleepConfig</name>
        <param>
          <type>int32_t</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines the source of the system clock and peripherals clock gating in SLEEP state. <ref refid="group___s_c_u_1ga89194aa42c041fa1e72c1a3da8dbdef8" kindref="member">XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Defines the source of the system clock and peripherals clock gating in SLEEP state.</para>
</simplesect>
The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is stopped. Peripherals are only clocked when configured to stay enabled.</para>
<para>Peripherals can continue to operate unaffected and eventually generate an event to wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP state.</para>
<para>@usage <programlisting><codeline><highlight class="normal">//<sp/>Configure<sp/>system<sp/>during<sp/>SLEEP<sp/>state</highlight></codeline>
<codeline><highlight class="normal">XMC_SCU_CLOCK_SetSleepConfig(XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Make<sp/>sure<sp/>that<sp/>SLEEPDEEP<sp/>bit<sp/>is<sp/>cleared</highlight></codeline>
<codeline><highlight class="normal">SCB-&gt;SCR<sp/>&amp;=<sp/>~<sp/>SCB_SCR_SLEEPDEEP_Msk;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Return<sp/>to<sp/>SLEEP<sp/>mode<sp/>after<sp/>handling<sp/>the<sp/>wakeup<sp/>event</highlight></codeline>
<codeline><highlight class="normal">SCB-&gt;SCR<sp/>|=<sp/>SCB_SCR_SLEEPONEXIT_Msk;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Put<sp/>system<sp/>in<sp/>SLEEP<sp/>state</highlight></codeline>
<codeline><highlight class="normal">__WFI();</highlight></codeline>
</programlisting></para>
<para><simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga08c337e8a728604e7eb54dff78ae2d9d" kindref="member">XMC_SCU_CLOCK_Init()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3612" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="3612" bodyend="3615"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae07a3504f85acd247cd7b9315dcc4083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetSystemClockDivider</definition>
        <argsstring>(const uint32_t divider)</argsstring>
        <name>XMC_SCU_CLOCK_SetSystemClockDivider</name>
        <param>
          <type>const uint32_t</type>
          <declname>divider</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>divider</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of fSYS clock source to the value of fSYS. <bold>Range:</bold> 1 to 256.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the ratio of system clock source to the value of system clock frequency.<linebreak/>
<linebreak/>
The value is configured as <emphasis>SYSDIV</emphasis> bits of <emphasis>SYSCLKCR</emphasis> register. The divider value is decremented by 1 before configuring. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga700247f0d54ab409e0542547ce3546f9" kindref="member">XMC_SCU_CLOCK_GetSystemClockDivider()</ref>, <ref refid="group___s_c_u_1gac6d37853e6609aa646b4dd1517fddd54" kindref="member">XMC_SCU_CLOCK_SetSystemClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2059" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gac6d37853e6609aa646b4dd1517fddd54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetSystemClockSource</definition>
        <argsstring>(const XMC_SCU_CLOCK_SYSCLKSRC_t source)</argsstring>
        <name>XMC_SCU_CLOCK_SetSystemClockSource</name>
        <param>
          <type>const <ref refid="group___s_c_u_1gaccffa04837e2b0c2132f74f3c502139b" kindref="member">XMC_SCU_CLOCK_SYSCLKSRC_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source of clock for fSYS.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gaccffa04837e2b0c2132f74f3c502139b" kindref="member">XMC_SCU_CLOCK_SYSCLKSRC_t</ref> to select the source of clock.<linebreak/>
 XMC_SCU_CLOCK_SYSCLKSRC_OFI for selecting internal fast clock as fSYS.<linebreak/>
 XMC_SCU_CLOCK_SYSCLKSRC_PLL for selecting the output of PLL fPLL as fSYS.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the source for system clock (fSYS).<linebreak/>
<linebreak/>
System clock is selected by setting <emphasis>SYSSEL</emphasis> bits in the <emphasis>SYSCLKCR</emphasis> register. If <emphasis>XMC_SCU_CLOCK_SYSCLKSRC_PLL</emphasis> is selected, then the dividers of the PLL have to be additionally configured to achieve the required system clock frequency. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga356a667144dc0009582198bad1070d7a" kindref="member">XMC_SCU_CLOCK_StartSystemPll()</ref>, <ref refid="group___s_c_u_1gad8179be793c17dda72a87dea440dd118" kindref="member">XMC_SCU_CLOCK_EnableHighPerformanceOscillator()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1745" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab274b04a774d18a4a7305f43ffb71d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetSystemPllClockSource</definition>
        <argsstring>(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)</argsstring>
        <name>XMC_SCU_CLOCK_SetSystemPllClockSource</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga91284bbc86bb476327771f3639cbe440" kindref="member">XMC_SCU_CLOCK_SYSPLLCLKSRC_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source of clock for system PLL.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga91284bbc86bb476327771f3639cbe440" kindref="member">XMC_SCU_CLOCK_SYSPLLCLKSRC_t</ref> for identifying the clock source.<linebreak/>
 XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillator(fOHP).<linebreak/>
 XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the source of system PLL.<linebreak/>
<linebreak/>
The value is configured to <emphasis>VCOBYP</emphasis> bit of <emphasis>PLLCON0</emphasis> register. If <emphasis>XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP</emphasis> is selected, ensure that the high performance oscillator is enabled by using the API <ref refid="group___s_c_u_1gad8179be793c17dda72a87dea440dd118" kindref="member">XMC_SCU_CLOCK_EnableHighPerformanceOscillator()</ref>. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad8179be793c17dda72a87dea440dd118" kindref="member">XMC_SCU_CLOCK_EnableHighPerformanceOscillator()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1986" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga6bfbeee9da8ba9c854c34fc5da9a7d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetUsbClockDivider</definition>
        <argsstring>(const uint32_t ratio)</argsstring>
        <name>XMC_SCU_CLOCK_SetUsbClockDivider</name>
        <param>
          <type>const uint32_t</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio of PLL output clock(fPLL) to USB clock(fUSB). <bold>Range:</bold> 1 to 8.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the USB clock(fUSB) by setting the USB clock divider. <linebreak/>
<linebreak/>
The value is decremented by 1 before setting it to <emphasis>USBDIV</emphasis> bits of <emphasis>USBCLKCR</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga129a4c1cd0e4963b8a573c25485cd693" kindref="member">XMC_SCU_CLOCK_GetUsbClockDivider()</ref>, <ref refid="group___s_c_u_1ga5332425bae1da209b9c6cc857f53d51e" kindref="member">XMC_SCU_CLOCK_SetUsbClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga5332425bae1da209b9c6cc857f53d51e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetUsbClockSource</definition>
        <argsstring>(const XMC_SCU_CLOCK_USBCLKSRC_t source)</argsstring>
        <name>XMC_SCU_CLOCK_SetUsbClockSource</name>
        <param>
          <type>const <ref refid="group___s_c_u_1gaa25fc7c21af145300a57dd93c391816d" kindref="member">XMC_SCU_CLOCK_USBCLKSRC_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source of clock for USB and SDMMC(fUSB/SDMMC).<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gaa25fc7c21af145300a57dd93c391816d" kindref="member">XMC_SCU_CLOCK_USBCLKSRC_t</ref> to select the source of clock.<linebreak/>
 XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL as source of USB clock(fUSB/SDMMC).<linebreak/>
 XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL as source of USB clock(fUSB/SDMMC).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the source of USB/SDMMC clock (fUSB/SDMMC).<linebreak/>
<linebreak/>
USB and SDMMC use a common clock source. They can either use fUSB PLL or fPLL as the source of clock. The selection is done by configuring the <emphasis>USBSEL</emphasis> bits of <emphasis>USBCLKCR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga6bfbeee9da8ba9c854c34fc5da9a7d7d" kindref="member">XMC_SCU_CLOCK_SetUsbClockDivider()</ref>, <ref refid="group___s_c_u_1ga050ac1d63bf86241205c4fdcca3eb988" kindref="member">XMC_SCU_CLOCK_GetUsbPllClockFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1780" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga8f338f60cac7809fafd01b0941d1a2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetWdtClockDivider</definition>
        <argsstring>(const uint32_t ratio)</argsstring>
        <name>XMC_SCU_CLOCK_SetWdtClockDivider</name>
        <param>
          <type>const uint32_t</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>Ratio between the source of WDT clock and the WDT clock.<linebreak/>
 <bold>Range:</bold> 1 to 256.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the WDT clock by setting the clock divider for the WDT clock source.<linebreak/>
<linebreak/>
The value is configured to <emphasis>WDTDIV</emphasis> bits of <emphasis>WDTCLKCR</emphasis> register. The value of divider is decremented by 1 before configuring. Check the selected clock source for the WDT clock before configuring the divider using the API <ref refid="group___s_c_u_1ga9061262a31285c0b5c3a13801650a453" kindref="member">XMC_SCU_CLOCK_SetWdtClockSource()</ref>. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga9061262a31285c0b5c3a13801650a453" kindref="member">XMC_SCU_CLOCK_SetWdtClockSource()</ref>, <ref refid="group___s_c_u_1ga12c044e6458ccab71e1d8c045719d545" kindref="member">XMC_SCU_CLOCK_GetWdtClockDivider()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga9061262a31285c0b5c3a13801650a453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_SetWdtClockSource</definition>
        <argsstring>(const XMC_SCU_CLOCK_WDTCLKSRC_t source)</argsstring>
        <name>XMC_SCU_CLOCK_SetWdtClockSource</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga77f22d4ceb0b920b48b87da63f62d174" kindref="member">XMC_SCU_CLOCK_WDTCLKSRC_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source for watchdog timer.<linebreak/>
 <bold>Range:</bold> Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.<linebreak/>
 XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)<linebreak/>
 XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)<linebreak/>
 XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the source of WDT clock (fWDT).<linebreak/>
<linebreak/>
The selected value is configured to the <emphasis>WDTSEL</emphasis> bits of <emphasis>WDTCLKCR</emphasis> register. The watchdog timer counts at the frequency selected using this API. So the time for timeout or pre-warning of watchdog has to be calculated based on this selection.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga8f338f60cac7809fafd01b0941d1a2c1" kindref="member">XMC_SCU_CLOCK_SetWdtClockDivider()</ref>, <ref refid="group___s_c_u_1ga6266b7288cd6a209146d83d67f21b573" kindref="member">XMC_SCU_CLOCK_GetWdtClockFrequency()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1818" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga356a667144dc0009582198bad1070d7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_StartSystemPll</definition>
        <argsstring>(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source, XMC_SCU_CLOCK_SYSPLL_MODE_t mode, uint32_t pdiv, uint32_t ndiv, uint32_t kdiv)</argsstring>
        <name>XMC_SCU_CLOCK_StartSystemPll</name>
        <param>
          <type><ref refid="group___s_c_u_1ga91284bbc86bb476327771f3639cbe440" kindref="member">XMC_SCU_CLOCK_SYSPLLCLKSRC_t</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="group___s_c_u_1gad0bc6581cbe44ad6b1d649cbffe96875" kindref="member">XMC_SCU_CLOCK_SYSPLL_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pdiv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ndiv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>kdiv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL clock source. <linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga91284bbc86bb476327771f3639cbe440" kindref="member">XMC_SCU_CLOCK_SYSPLLCLKSRC_t</ref> to identify the clock source.<linebreak/>
 XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP- External high precision oscillator input. XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI- Internal fast clock input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode of PLL operation.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gad0bc6581cbe44ad6b1d649cbffe96875" kindref="member">XMC_SCU_CLOCK_SYSPLL_MODE_t</ref> to identify the PLL mode. <linebreak/>
 XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL- PLL frequency obtained from output of VCO(fVCO).<linebreak/>
 XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR- VCO is bypassed. Frequency obtained from fOSC.<linebreak/>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdiv</parametername>
</parameternamelist>
<parameterdescription>
<para>Input divider. Represents (PDIV+1) applied to external reference frequency. <linebreak/>
 <bold>Range:</bold> 1 to 16.<linebreak/>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndiv</parametername>
</parameternamelist>
<parameterdescription>
<para>Feedback divider. Represents(NDIV+1) <linebreak/>
 <bold>Range:</bold> 1 to 128. <linebreak/>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kdiv</parametername>
</parameternamelist>
<parameterdescription>
<para>Output divider. Represents (K2DIV+1) in normal PLL mode or (K1DIV+1) in prescaler mode.<linebreak/>
 <bold>Range:</bold> 1 to 128. <linebreak/>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables system PLL.<linebreak/>
<linebreak/>
Based on the selected source of clock, either external frequency fOHP or internal clock fOFI will be used. Based on the selected PLL mode, either voltage controlled oscillator(VCO) output(fVCO) or direct input frequency is used for the output dividers.<linebreak/>
The API implements the following sequence:<linebreak/>
<itemizedlist>
<listitem><para>Store the value of TRAPDIS register into a temporary variable before disabling all traps.<linebreak/>
</para>
</listitem><listitem><para>Clear all PLL related traps.<linebreak/>
</para>
</listitem><listitem><para>If external fOHP is selected as source, wait for the external oscillator to stabilize.<linebreak/>
</para>
</listitem><listitem><para>If PLL normal mode is selected, calculate the value of K2DIV and configure the PDIV, NDIV and K2DIV values.<linebreak/>
</para>
</listitem><listitem><para>Ramp up the PLL frequency in steps. <linebreak/>
</para>
</listitem><listitem><para>If prescaler mode is selected, configure the value of K1DIV.<linebreak/>
</para>
</listitem><listitem><para>Wait for LOCK.<linebreak/>
</para>
</listitem><listitem><para>Restore the trap configuration from stored temporary variable.<linebreak/>
 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae8c2602ab7184dbeda09e0ca0e690168" kindref="member">XMC_SCU_CLOCK_GetSystemPllClockFrequency()</ref>, <ref refid="group___s_c_u_1ga879eeaff71fe00dd7fc148b481ce8379" kindref="member">XMC_SCU_CLOCK_StopSystemPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2749" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gacb5f410baf92504c4fc60bc33e167d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_StartUsbPll</definition>
        <argsstring>(uint32_t pdiv, uint32_t ndiv)</argsstring>
        <name>XMC_SCU_CLOCK_StartUsbPll</name>
        <param>
          <type>uint32_t</type>
          <declname>pdiv</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ndiv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdiv</parametername>
</parameternamelist>
<parameterdescription>
<para>Input divider value. Represents (PDIV+1) divider for the USB PLL.<linebreak/>
 <bold>Range:</bold> 1 to 16. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ndiv</parametername>
</parameternamelist>
<parameterdescription>
<para>VCO feedback divider for USB PLL. Represents (NDIV+1) feedback divider.<linebreak/>
 <bold>Range:</bold> 1 to 128.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures USB PLL dividers and enables the PLL.<linebreak/>
<linebreak/>
The API follows the required sequence for safely configuring the divider values of USB PLL. Checks for PLL stabilization before enabling the same. After the configuring the dividers, it waits till the VCO lock is achieved. The sequence followed is as follows:<linebreak/>
<itemizedlist>
<listitem><para>Enable the USB PLL and configure VCO to be bypassed.<linebreak/>
</para>
</listitem><listitem><para>Set up the HP oscillator clock input.<linebreak/>
</para>
</listitem><listitem><para>Store the value of TRAPDIS register into a temporary variable before disabling all traps.<linebreak/>
</para>
</listitem><listitem><para>Clear all USBPLL related traps.<linebreak/>
</para>
</listitem><listitem><para>Disconnect the oscillator from USB PLL and configure the dividers PDIV and NDIV. <linebreak/>
</para>
</listitem><listitem><para>Connect the oscillator to USB PLL and enable VCO.<linebreak/>
</para>
</listitem><listitem><para>Wait for LOCK.<linebreak/>
</para>
</listitem><listitem><para>Restore the trap configuration from stored temporary variable.<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga11067ab015e6a6632cf9be194a4f8d6b" kindref="member">XMC_SCU_CLOCK_StopUsbPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2853" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga381e223afdcbd3d2766a24958468dc0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_StepSystemPllFrequency</definition>
        <argsstring>(uint32_t kdiv)</argsstring>
        <name>XMC_SCU_CLOCK_StepSystemPllFrequency</name>
        <param>
          <type>uint32_t</type>
          <declname>kdiv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kdiv</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL output divider K2DIV. <linebreak/>
 <bold>Range:</bold> 1 to 128. Represents (K2DIV+1). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Ramps up or ramps down the PLL output frequency in provided step. <linebreak/>
<linebreak/>
The PLL output frequency is divided by the <emphasis>kdiv</emphasis> value. This generates a step of ramp for the PLL output frequency. The API waits for the clock to stabilize before the completing its execution. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga356a667144dc0009582198bad1070d7a" kindref="member">XMC_SCU_CLOCK_StartSystemPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga879eeaff71fe00dd7fc148b481ce8379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_StopSystemPll</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_StopSystemPll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables the system PLL. PLL is placed in power saving mode. It disables the PLL by setting the <emphasis>PLLPWD</emphasis> bit of <emphasis>PLLCON0</emphasis> register. If the PLL is put to power saving mode, it can no longer be used. It is recommended to ensure following steps before using <emphasis>XMC_SCU_CLOCK_StopSystemPll</emphasis> API:<linebreak/>
<itemizedlist>
<listitem><para>Store the value of TRAPDIS register into a temporary variable before disabling all traps.<linebreak/>
</para>
</listitem><listitem><para>Clear all PLL related traps.<linebreak/>
</para>
</listitem><listitem><para>Ramp down frequency until fPLL reaches backup clock frequency (fOFI).<linebreak/>
</para>
</listitem><listitem><para>Disable PLL.<linebreak/>
</para>
</listitem><listitem><para>Restore the trap configuration from stored temporary variable.<linebreak/>
 </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae8c2602ab7184dbeda09e0ca0e690168" kindref="member">XMC_SCU_CLOCK_GetSystemPllClockFrequency()</ref>, <ref refid="group___s_c_u_1ga356a667144dc0009582198bad1070d7a" kindref="member">XMC_SCU_CLOCK_StartSystemPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2773" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga11067ab015e6a6632cf9be194a4f8d6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_StopUsbPll</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_CLOCK_StopUsbPll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables USB PLL operation.<linebreak/>
<linebreak/>
USB PLL is disabled by placing the USB PLL in power saving mode. The VCO and USB PLL are put in power saving mode by setting the <emphasis>PLLPWD</emphasis> bit and <emphasis>VCOPWD</emphasis> bit of <emphasis>USBLLCON</emphasis> register to 1. VCO bypass mode is enabled by setting the <emphasis>VCOBYP</emphasis> bit of <emphasis>USBLLCON</emphasis> register to 1. It is recommended to ensure following steps before using <emphasis>XMC_SCU_CLOCK_StopUsbPll</emphasis> API:<linebreak/>
<itemizedlist>
<listitem><para>Store the value of TRAPDIS register into a temporary variable before disabling all traps.<linebreak/>
</para>
</listitem><listitem><para>Clear all USBPLL related traps.<linebreak/>
</para>
</listitem><listitem><para>Ramp down frequency.<linebreak/>
</para>
</listitem><listitem><para>Disable PLL.<linebreak/>
</para>
</listitem><listitem><para>Restore the trap configuration from stored temporary variable.<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gacb5f410baf92504c4fc60bc33e167d9c" kindref="member">XMC_SCU_CLOCK_StartUsbPll()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga702904d10b6e6c6a55db381763fd322f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_CLOCK_UngatePeripheralClock</definition>
        <argsstring>(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)</argsstring>
        <name>XMC_SCU_CLOCK_UngatePeripheralClock</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga29713150fdafc3c88f3c73f621410239" kindref="member">XMC_SCU_PERIPHERAL_CLOCK_t</ref></type>
          <declname>peripheral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peripheral</parametername>
</parameternamelist>
<parameterdescription>
<para>The peripheral for which the clock has to be ungated. <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga29713150fdafc3c88f3c73f621410239" kindref="member">XMC_SCU_PERIPHERAL_CLOCK_t</ref> to identify the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables the supply of clock to the selected peripheral.<linebreak/>
<linebreak/>
By default when the device powers on, the peripheral clock will be gated for the peripherals that support clock gating. The peripheral clock should be enabled before using it for any functionality. fPERI is the source of clock to various peripherals. Some peripherals support clock gate. Software can request for individual ungating of such peripheral clocks by setting the respective bits in one of <emphasis>SCU_CGATCLR0</emphasis>, <emphasis>SCU_CGATCLR1</emphasis> or <emphasis>SCU_CGATCLR2</emphasis> registers.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga804f98badedf0e0ba4ce09f445687a37" kindref="member">XMC_SCU_CLOCK_IsPeripheralClockGated()</ref>, <ref refid="group___s_c_u_1gab0af70f90b9a1f24d3a0a4764543d833" kindref="member">XMC_SCU_CLOCK_GatePeripheralClock()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="504" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gafbf7bd240140468c6235149828dc3e7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_DisableOutOfRangeComparator</definition>
        <argsstring>(const uint32_t group, const uint32_t channel)</argsstring>
        <name>XMC_SCU_DisableOutOfRangeComparator</name>
        <param>
          <type>const uint32_t</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>ADC Group to which the channel being monitored belongs to.<linebreak/>
 <bold>Range:</bold> 0 or 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel whose voltage range has to be monitored.<linebreak/>
 <bold>Range:</bold> 6 or 7. Value identifies the channel in the selected ADC group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables the out of range comparator for the selected ADC group and the channel. <linebreak/>
<linebreak/>
Out of range comparator is disabled by clearing the enable bit in the GORCEN register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga51d593608a5e056fb40c1cc2b340fb2a" kindref="member">XMC_SCU_EnableOutOfRangeComparator()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1004" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga95190e4549898b0f02b653045d5816b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_DisableTemperatureSensor</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_DisableTemperatureSensor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables die temperature measurement by powering the DTS module off.<linebreak/>
<linebreak/>
Die temperature sensor is disabled by clearing the PWD bit of DTSCON register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga3f6a1e71b005175777c6dd9a069e325c" kindref="member">XMC_SCU_EnableTemperatureSensor()</ref>, <ref refid="group___s_c_u_1gaedec5f2ce4cc799cad5026d5ec76a1f2" kindref="member">XMC_SCU_IsTemperatureSensorEnabled()</ref>, <ref refid="group___s_c_u_1gacf86e99e8def2e37a0b484982e61256d" kindref="member">XMC_SCU_CalibrateTemperatureSensor()</ref>, <ref refid="group___s_c_u_1gabac9292e193c9804b5a6856de186737e" kindref="member">XMC_SCU_StartTemperatureMeasurement()</ref>, <ref refid="group___s_c_u_1ga8ac62bd07097bb83cd294a1d6625af36" kindref="member">XMC_SCU_GetTemperatureMeasurement()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1028" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga51d593608a5e056fb40c1cc2b340fb2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_EnableOutOfRangeComparator</definition>
        <argsstring>(const uint32_t group, const uint32_t channel)</argsstring>
        <name>XMC_SCU_EnableOutOfRangeComparator</name>
        <param>
          <type>const uint32_t</type>
          <declname>group</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>ADC Group to which the channel being monitored belongs to.<linebreak/>
 <bold>Range:</bold> 0 or 1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel whose voltage range has to be monitored.<linebreak/>
 <bold>Range:</bold> 6 or 7. Value identifies the channel in the selected ADC group.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables out of range comparator for the selected ADC group and channel. <linebreak/>
<linebreak/>
The ADC channel input is compared by Out of Range Comparator (ORC) for overvoltage monitoring or for detection of out of range analog inputs. ORC must be turned on explicitly to leverage the auditing feature. ORC is enabled by setting the enable bit in the GORCEN register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gafbf7bd240140468c6235149828dc3e7e" kindref="member">XMC_SCU_DisableOutOfRangeComparator()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="987" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga3f6a1e71b005175777c6dd9a069e325c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_EnableTemperatureSensor</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_EnableTemperatureSensor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables die temperature measurement by powering the DTS module.<linebreak/>
<linebreak/>
Die temperature sensor is enabled by setting the PWD bit of DTSCON register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga95190e4549898b0f02b653045d5816b7" kindref="member">XMC_SCU_DisableTemperatureSensor()</ref>, <ref refid="group___s_c_u_1gaedec5f2ce4cc799cad5026d5ec76a1f2" kindref="member">XMC_SCU_IsTemperatureSensorEnabled()</ref>, <ref refid="group___s_c_u_1gacf86e99e8def2e37a0b484982e61256d" kindref="member">XMC_SCU_CalibrateTemperatureSensor()</ref>, <ref refid="group___s_c_u_1gabac9292e193c9804b5a6856de186737e" kindref="member">XMC_SCU_StartTemperatureMeasurement()</ref>, <ref refid="group___s_c_u_1ga8ac62bd07097bb83cd294a1d6625af36" kindref="member">XMC_SCU_GetTemperatureMeasurement()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1016" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga2a6d9572718fe6822b42522947fe822b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_GetBootMode</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_GetBootMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Configured boot mode for the device.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gaee17d2349a9e695f89aaa67972035bb6" kindref="member">XMC_SCU_BOOTMODE_t</ref> for enumeration of different boot modes.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the boot mode configured for the device.<linebreak/>
<linebreak/>
The boot mode is read from the <emphasis>STCON</emphasis> register bit field <emphasis>SWCON</emphasis>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga3ebb50291e4fc5722746f2f40fadb6a8" kindref="member">XMC_SCU_SetBootMode()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_GetMirrorStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_GetMirrorStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Status of the register mirror update.<linebreak/>
 <bold>Range:</bold> Use the bit mask of the SCU_GENERAL_MIRRSTS register for the mirror update event of interest. e.g.: SCU_GENERAL_MIRRSTS_RTC_CTR_Msk. Multiple update events can be combined using <emphasis>OR</emphasis> operation.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the status of hibernate domain register update, when the respective mirror registers are changed. <linebreak/>
<linebreak/>
The hibernate domain is connected to the core domain via SPI serial communication. MIRRSTS is a status register representing the communication of changed value of a mirror register to its corresponding register in the hibernate domain. The bit fields of the register indicate that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface is busy with executing the previous operation.<linebreak/>
Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="547" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" bodystart="547" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga8ac62bd07097bb83cd294a1d6625af36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_GetTemperatureMeasurement</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_GetTemperatureMeasurement</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Measured temperature value.<linebreak/>
 <bold>Range:</bold> Valid temperature range is 0 to 1023. <linebreak/>
 If sensor is not enabled, 0x7FFFFFFFH is returned.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Reads the measured value of die temperature.<linebreak/>
<linebreak/>
Temperature measurement result is read from <emphasis>RESULT</emphasis> bit field of <emphasis>DTSSTAT</emphasis> register. The temperature measured in �C is given by (RESULT - 605) / 2.05 [�C] </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga09f2786f94680cc125ead431f3c4d9c4" kindref="member">XMC_SCU_IsTemperatureSensorBusy()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga7987387b331ea0c7ba5bd582629cdbc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_ClearEventStatus</definition>
        <argsstring>(int32_t event)</argsstring>
        <name>XMC_SCU_HIB_ClearEventStatus</name>
        <param>
          <type>int32_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Hibernate wakeup event <ref refid="group___s_c_u_1ga11fb0524a44f3c744946c7969a806a5b" kindref="member">XMC_SCU_HIB_EVENT_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Clear hibernate wakeup event status</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga1f936e085a93195fe021774ecd4f988b" kindref="member">XMC_SCU_HIB_TriggerEvent()</ref>, <ref refid="group___s_c_u_1gaa2489ef97769bad35feb64b93c1b5050" kindref="member">XMC_SCU_HIB_EnableEvent()</ref>, <ref refid="group___s_c_u_1ga3c6db429c2b7079ce32ee286c4fba09e" kindref="member">XMC_SCU_HIB_DisableEvent()</ref>, <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae7cfce71a167d2181ea2a9d7e4473798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_ClearWakeupEventDetectionStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_ClearWakeupEventDetectionStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Clear detection status of wakeup from hibernate mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3228" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="3228" bodyend="3231"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga3c6db429c2b7079ce32ee286c4fba09e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_DisableEvent</definition>
        <argsstring>(int32_t event)</argsstring>
        <name>XMC_SCU_HIB_DisableEvent</name>
        <param>
          <type>int32_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Hibernate wakeup event <ref refid="group___s_c_u_1ga11fb0524a44f3c744946c7969a806a5b" kindref="member">XMC_SCU_HIB_EVENT_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disable hibernate wakeup event source</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga1f936e085a93195fe021774ecd4f988b" kindref="member">XMC_SCU_HIB_TriggerEvent()</ref>, <ref refid="group___s_c_u_1gaa2489ef97769bad35feb64b93c1b5050" kindref="member">XMC_SCU_HIB_EnableEvent()</ref>, <ref refid="group___s_c_u_1ga7987387b331ea0c7ba5bd582629cdbc2" kindref="member">XMC_SCU_HIB_ClearEventStatus()</ref>, <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae5c8ea8d8a577e936a3dde5239966337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_DisableHibernateDomain</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_DisableHibernateDomain</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Powers down the hibernation domain.<linebreak/>
<linebreak/>
After disabling the hibernate domain, none of the peripherals from the hibernte domain can be used. Hibernate domain is disabled by setting the <emphasis>HIB</emphasis> bit of <emphasis>PWRCLR</emphasis> register and \ HIBRS bit of <emphasis>RSTSET</emphasis> register.<linebreak/>
It is recommended to use following steps to verify whether a hibernation domain is enabled/disabled:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis>XMC_SCU_HIB_DisableHibernateDomain</emphasis> .</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_HIB_IsHibernateDomainEnabled</emphasis> and check return value. If return value is true, it indicates that the hibernation domain is enabled otherwise disabled.<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga2f73953dadc8eaa2fad5e66a2c2e57a4" kindref="member">XMC_SCU_HIB_EnableHibernateDomain()</ref>, <ref refid="group___s_c_u_1ga725038f7765622ede258de69e21971a4" kindref="member">XMC_SCU_HIB_IsHibernateDomainEnabled()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3065" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaa09c64c2a7a15e6cba8b97de86c87c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_DisableInternalSlowClock</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_DisableInternalSlowClock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables slow internal oscillator(fOSI).<linebreak/>
<linebreak/>
By default on device power up, the slow internall oscillator is enabled. It can be disabled only if the external oscillator(fULP) is enabled and toggling. It is recommended to enable fOSI to prevent deadlock if fULP fails. fOSI is disabled by setting the <emphasis>PWD</emphasis> bit of <emphasis>OSCSICTRL</emphasis> register. The API waits for the mirror register update of the configured register. The slow internal oscillator registers are in hibernate domain. Ensure that the hibernate domain is enabled before changing the configuration.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gadaa00ec6206d10e3840504ba592f5725" kindref="member">XMC_SCU_HIB_EnableInternalSlowClock()</ref>, <ref refid="group___s_c_u_1ga8ae09f0a2575e72f52d961ea5a4622cf" kindref="member">XMC_SCU_CLOCK_SetBackupClockCalibrationMode()</ref>, <ref refid="group___s_c_u_1ga2f73953dadc8eaa2fad5e66a2c2e57a4" kindref="member">XMC_SCU_HIB_EnableHibernateDomain()</ref>, <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaa2489ef97769bad35feb64b93c1b5050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_EnableEvent</definition>
        <argsstring>(int32_t event)</argsstring>
        <name>XMC_SCU_HIB_EnableEvent</name>
        <param>
          <type>int32_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Hibernate wakeup event <ref refid="group___s_c_u_1ga11fb0524a44f3c744946c7969a806a5b" kindref="member">XMC_SCU_HIB_EVENT_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enable hibernate wakeup event source</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga1f936e085a93195fe021774ecd4f988b" kindref="member">XMC_SCU_HIB_TriggerEvent()</ref>, <ref refid="group___s_c_u_1ga7987387b331ea0c7ba5bd582629cdbc2" kindref="member">XMC_SCU_HIB_ClearEventStatus()</ref>, <ref refid="group___s_c_u_1ga3c6db429c2b7079ce32ee286c4fba09e" kindref="member">XMC_SCU_HIB_DisableEvent()</ref>, <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga2f73953dadc8eaa2fad5e66a2c2e57a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_EnableHibernateDomain</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_EnableHibernateDomain</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Powers up the hibernation domain.<linebreak/>
<linebreak/>
Hibernate domain should be enabled before using any peripheral from the hibernate domain. It enables the power to the hibernate domain and moves it out of reset state. Power to hibernate domain is enabled by setting the <emphasis>HIB</emphasis> bit of <emphasis>PWRSET</emphasis> register only if it is currently powered down. The API will wait until HIB domain is enabled. If hibernate domain is in a state of reset, <emphasis>HIBRS</emphasis> bit of <emphasis>RSTCLR</emphasis> register is set to move it out of reset state.<linebreak/>
It is recommended to use following steps to verify whether a hibernation domain is enabled/disabled:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis>XMC_SCU_HIB_EnableHibernateDomain</emphasis> .</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_HIB_IsHibernateDomainEnabled</emphasis> and check the return value. If return value is true, it indicates that the hibernation domain is enabled otherwise disabled.<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae5c8ea8d8a577e936a3dde5239966337" kindref="member">XMC_SCU_HIB_DisableHibernateDomain()</ref>, <ref refid="group___s_c_u_1ga725038f7765622ede258de69e21971a4" kindref="member">XMC_SCU_HIB_IsHibernateDomainEnabled()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3048" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gadaa00ec6206d10e3840504ba592f5725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_EnableInternalSlowClock</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_EnableInternalSlowClock</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables slow internal oscillator(fOSI).<linebreak/>
<linebreak/>
By default on device power up, the slow internall oscillator is enabled. It can be disabled only if the external oscillator(fULP) is enabled and toggling. It is recommended to enable fOSI to prevent deadlock if fULP fails. fOSI is enabled by clearing the <emphasis>PWD</emphasis> bit of <emphasis>OSCSICTRL</emphasis> register. The API waits for the mirror register update of the configured register. The slow internal oscillator registers are in hibernate domain. Ensure that the hibernate domain is enabled before changing the configuration.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaa09c64c2a7a15e6cba8b97de86c87c6e" kindref="member">XMC_SCU_HIB_DisableInternalSlowClock()</ref>, <ref refid="group___s_c_u_1ga8ae09f0a2575e72f52d961ea5a4622cf" kindref="member">XMC_SCU_CLOCK_SetBackupClockCalibrationMode()</ref>, <ref refid="group___s_c_u_1ga2f73953dadc8eaa2fad5e66a2c2e57a4" kindref="member">XMC_SCU_HIB_EnableHibernateDomain()</ref>, <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga3ec3bf0d71bb4ad9c82993c3e1f313f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_EnterHibernateState</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_EnterHibernateState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Request enter external hibernate state</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga10f3e5dc9ef1e9eb176b176190eb9e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_EnterHibernateStateEx</definition>
        <argsstring>(XMC_SCU_HIB_HIBERNATE_MODE_t mode)</argsstring>
        <name>XMC_SCU_HIB_EnterHibernateStateEx</name>
        <param>
          <type><ref refid="group___s_c_u_1gae174cb4d0d8d67e2f830f06ba7460b57" kindref="member">XMC_SCU_HIB_HIBERNATE_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>hibernate mode <ref refid="group___s_c_u_1gae174cb4d0d8d67e2f830f06ba7460b57" kindref="member">XMC_SCU_HIB_HIBERNATE_MODE_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Request enter external hibernate state</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga5001c2e36acfcb57ddf301b23cee2262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_SCU_HIB_GetEventStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_GetEventStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group___s_c_u_1ga11fb0524a44f3c744946c7969a806a5b" kindref="member">XMC_SCU_HIB_EVENT_t</ref></para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Returns status of hibernate wakeup events. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3104" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="3104" bodyend="3107"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga7ada4665b0f7c75e569746554041c625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_SCU_HIB_GetHibernateControlStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_GetHibernateControlStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group___s_c_u_1ga641e0585e99029c106ad8ef6ae3b92b5" kindref="member">XMC_SCU_HIB_CTRL_STATUS_t</ref></para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Returns status of the external hibernate control. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3092" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="3092" bodyend="3095"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaff7d07fb799f33da6bd55dfec0938f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1gad0408131d64c97d53a863b982225e664" kindref="member">XMC_SCU_HIB_RTCCLKSRC_t</ref></type>
        <definition>XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetRtcClockSource</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_GetRtcClockSource</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XMC_SCU_HIB_RTCCLKSRC_t Source of RTC clock.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gad0408131d64c97d53a863b982225e664" kindref="member">XMC_SCU_HIB_RTCCLKSRC_t</ref> to identify the clock source.<linebreak/>
 XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). <linebreak/>
 XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). <linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the source of RTC clock (fRTC). The value is obtained by reading <emphasis>RCS</emphasis> bit of <emphasis>HDCR</emphasis> register. The frequency of the clock will be 32.768 kHz. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gadca7d1332ed62fda2a1a85550d12f06d" kindref="member">XMC_SCU_HIB_SetRtcClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1915" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1915" bodyend="1918"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga893f5ed38bc3417a1b6482bda5031e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1gad0408131d64c97d53a863b982225e664" kindref="member">XMC_SCU_HIB_RTCCLKSRC_t</ref></type>
        <definition>XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetStdbyClockSource</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_GetStdbyClockSource</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XMC_SCU_HIB_RTCCLKSRC_t Source clock of standby clock(fSTDBY).<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga8290034e7a28d8e2e8ed0086d6f92ab5" kindref="member">XMC_SCU_HIB_STDBYCLKSRC_t</ref> to identify the clock source.<linebreak/>
 XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) <linebreak/>
 XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) <linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the source of standby clock (fSTDBY).<linebreak/>
<linebreak/>
The value is obtained by reading <emphasis>STDBYSEL</emphasis> bits of <emphasis>HDCR</emphasis> register.<linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga387a75bbd0299d99fd8f818d1ea9886a" kindref="member">XMC_SCU_HIB_SetStandbyClockSource()</ref>, <ref refid="group___s_c_u_1ga2f73953dadc8eaa2fad5e66a2c2e57a4" kindref="member">XMC_SCU_HIB_EnableHibernateDomain()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1874" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1874" bodyend="1877"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga725038f7765622ede258de69e21971a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_HIB_IsHibernateDomainEnabled</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_IsHibernateDomainEnabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Power status of hibernate domain.<linebreak/>
 <bold>Range:</bold> Boolean state value.<linebreak/>
 <emphasis>true</emphasis> if hibernate domain is enabled.<linebreak/>
 <emphasis>false</emphasis> if hibernate domain is disabled.<linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Checks whether hibernation domain is enabled/disabled.<linebreak/>
<linebreak/>
The API can be used before using the peripherals from hibernation domain to ensure that the power is supplied to the peripherals and also that the hibernation domain is not in reset state. The status is obtained using the <emphasis>HIBEN</emphasis> bit of <emphasis>PWRSTAT</emphasis> register and <emphasis>HIBRS</emphasis> bit of <emphasis>RSTSET</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga2f73953dadc8eaa2fad5e66a2c2e57a4" kindref="member">XMC_SCU_HIB_EnableHibernateDomain()</ref>, <ref refid="group___s_c_u_1gae5c8ea8d8a577e936a3dde5239966337" kindref="member">XMC_SCU_HIB_DisableHibernateDomain()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3083" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga5847f968eb7850945a60a121fd4d2cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_HIB_IsWakeupEventDetected</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_IsWakeupEventDetected</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Detection of a wakeup from hibernate mode</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Detection of a wakeup from hibernate mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3217" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="3217" bodyend="3220"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab3a7aec158c910324d5fb986a75fd61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_LPAC_ClearStatus</definition>
        <argsstring>(int32_t status)</argsstring>
        <name>XMC_SCU_HIB_LPAC_ClearStatus</name>
        <param>
          <type>int32_t</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>HIB LPAC status. Values from <ref refid="group___s_c_u_1ga5ffee972b02e57f54d05e14e4b369052" kindref="member">XMC_SCU_HIB_LPAC_STATUS_t</ref> can be ORed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Clear status of HIB LPAC.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3463" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga4c262b639a01080caa9b61196fa2d1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_SCU_HIB_LPAC_GetStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_HIB_LPAC_GetStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>HIB LPAC status <ref refid="group___s_c_u_1ga5ffee972b02e57f54d05e14e4b369052" kindref="member">XMC_SCU_HIB_LPAC_STATUS_t</ref></para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Return status of HIB LPAC. </para>
</simplesect>
<simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series and in certain packages </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaffcb710feb96baa9eda31de6721d5fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_LPAC_SetHIBIO0Thresholds</definition>
        <argsstring>(uint8_t lower, uint8_t upper)</argsstring>
        <name>XMC_SCU_HIB_LPAC_SetHIBIO0Thresholds</name>
        <param>
          <type>uint8_t</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low</parametername>
</parameternamelist>
<parameterdescription>
<para>HIB_IO_0 low threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high</parametername>
</parameternamelist>
<parameterdescription>
<para>HIB_IO_0 high threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Select compare thresholds for HIB_IO_0. After the reset of HCU the upper threshold is applied to LPAC for all consecutive measurements until it has been crossed upwards. Once upper threshold crossed upwards the lower threshold gets applied and remains applied for all consecutive measuremements until it has been crossed downwards and the threshold values gets swapped again.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaa0f25dc27039fba0f08fdbc6daabae8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_LPAC_SetHIBIO1Thresholds</definition>
        <argsstring>(uint8_t lower, uint8_t upper)</argsstring>
        <name>XMC_SCU_HIB_LPAC_SetHIBIO1Thresholds</name>
        <param>
          <type>uint8_t</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low</parametername>
</parameternamelist>
<parameterdescription>
<para>HIB_IO_1 low threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high</parametername>
</parameternamelist>
<parameterdescription>
<para>HIB_IO_1 high threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Select compare thresholds for HIB_IO_1. After the reset of HCU the upper threshold is applied to LPAC for all consecutive measurements until it has been crossed upwards. Once upper threshold crossed upwards the lower threshold gets applied and remains applied for all consecutive measuremements until it has been crossed downwards and the threshold values gets swapped again.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="note"><para>Only available in XMC44 series and LQFP100 package </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab273b856c3d288329625125687024ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_LPAC_SetInput</definition>
        <argsstring>(XMC_SCU_HIB_LPAC_INPUT_t input)</argsstring>
        <name>XMC_SCU_HIB_LPAC_SetInput</name>
        <param>
          <type><ref refid="group___s_c_u_1ga491ac2d1f6d99b31e2c831a87c5d66ed" kindref="member">XMC_SCU_HIB_LPAC_INPUT_t</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>LPAC compare input. Values from <ref refid="group___s_c_u_1ga491ac2d1f6d99b31e2c831a87c5d66ed" kindref="member">XMC_SCU_HIB_LPAC_INPUT_t</ref> can be ORed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects inputs to the LPAC comparator. Several inputs can be selected (time multiplexing).</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga5f8a8156ce19f2efb3c58d816febd301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_LPAC_SetTiming</definition>
        <argsstring>(bool enable_delay, uint16_t interval_count, uint8_t settle_count)</argsstring>
        <name>XMC_SCU_HIB_LPAC_SetTiming</name>
        <param>
          <type>bool</type>
          <declname>enable_delay</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>interval_count</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>settle_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable_delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable conversion delay </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interval_count</parametername>
</parameternamelist>
<parameterdescription>
<para>compare interval (interval_count + 16) * 1/32768 (s) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settle_count</parametername>
</parameternamelist>
<parameterdescription>
<para>settleing time of LPAC after powered up (triggered) before measurement start (settle_count + 1) * 1/32768 (s) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures timing behavior of comparator.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gac8cef3d27654e2b0818b8379e9b038b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_LPAC_SetTrigger</definition>
        <argsstring>(XMC_SCU_HIB_LPAC_TRIGGER_t trigger)</argsstring>
        <name>XMC_SCU_HIB_LPAC_SetTrigger</name>
        <param>
          <type><ref refid="group___s_c_u_1ga1250a82e3f4b1d8428cb3e3c0b8d3a14" kindref="member">XMC_SCU_HIB_LPAC_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>LPAC compare trigger </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects trigger mechanism to start a comparison.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga641021132dd174f62a7699bb7988eec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_LPAC_SetVBATThresholds</definition>
        <argsstring>(uint8_t lower, uint8_t upper)</argsstring>
        <name>XMC_SCU_HIB_LPAC_SetVBATThresholds</name>
        <param>
          <type>uint8_t</type>
          <declname>lower</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>upper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>low</parametername>
</parameternamelist>
<parameterdescription>
<para>VBAT low threshold </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high</parametername>
</parameternamelist>
<parameterdescription>
<para>VBAT high threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Select compare thresholds for VBAT. After the reset of HCU the upper threshold is applied to LPAC for all consecutive measurements until it has been crossed upwards. Once upper threshold crossed upwards the lower threshold gets applied and remains applied for all consecutive measuremements until it has been crossed downwards and the threshold values gets swapped again.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga9e5ac953233f15eaf399d956e7fe6163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_LPAC_TriggerCompare</definition>
        <argsstring>(XMC_SCU_HIB_LPAC_INPUT_t input)</argsstring>
        <name>XMC_SCU_HIB_LPAC_TriggerCompare</name>
        <param>
          <type><ref refid="group___s_c_u_1ga491ac2d1f6d99b31e2c831a87c5d66ed" kindref="member">XMC_SCU_HIB_LPAC_INPUT_t</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>LPAC compare input. Values from <ref refid="group___s_c_u_1ga491ac2d1f6d99b31e2c831a87c5d66ed" kindref="member">XMC_SCU_HIB_LPAC_INPUT_t</ref> can be ORed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Trigger comparasion on the selected inputs.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="note"><para>Only available in XMC44, XMC42 and XMC41 series </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga781006133ffe258774b67cad8156be5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_SetInput0</definition>
        <argsstring>(XMC_SCU_HIB_IO_t pin)</argsstring>
        <name>XMC_SCU_HIB_SetInput0</name>
        <param>
          <type><ref refid="group___s_c_u_1gabaf5bdae1d6dffc54f13feef86a133c6" kindref="member">XMC_SCU_HIB_IO_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Hibernate domain dedicated pin <ref refid="group___s_c_u_1gabaf5bdae1d6dffc54f13feef86a133c6" kindref="member">XMC_SCU_HIB_IO_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects input to ERU0 module (HIB_SR0) that optionally can be used with software as a general purpose input.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga18fc457f4295f92889a89bc2fc3b0f3d" kindref="member">XMC_SCU_HIB_SetSR0Input()</ref>, <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga57a27b38b451c5da7e9e4877e9ab65c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_SetPinMode</definition>
        <argsstring>(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)</argsstring>
        <name>XMC_SCU_HIB_SetPinMode</name>
        <param>
          <type><ref refid="group___s_c_u_1gabaf5bdae1d6dffc54f13feef86a133c6" kindref="member">XMC_SCU_HIB_IO_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type><ref refid="group___s_c_u_1ga3ba6c043570286f2194b5cbef1ce73a5" kindref="member">XMC_SCU_HIB_PIN_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Hibernate domain dedicated pin <ref refid="group___s_c_u_1gabaf5bdae1d6dffc54f13feef86a133c6" kindref="member">XMC_SCU_HIB_IO_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Hibernate domain dedicated pin mode <ref refid="group___s_c_u_1ga3ba6c043570286f2194b5cbef1ce73a5" kindref="member">XMC_SCU_HIB_PIN_MODE_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects mode of hibernate domain dedicated pins HIB_IOx</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab416d2ed128019d53a14bd417e625004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_SetPinOutputLevel</definition>
        <argsstring>(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)</argsstring>
        <name>XMC_SCU_HIB_SetPinOutputLevel</name>
        <param>
          <type><ref refid="group___s_c_u_1gabaf5bdae1d6dffc54f13feef86a133c6" kindref="member">XMC_SCU_HIB_IO_t</ref></type>
          <declname>pin</declname>
        </param>
        <param>
          <type><ref refid="group___s_c_u_1ga3810fe2c38e7abef292ceaecd5660194" kindref="member">XMC_SCU_HIB_IO_OUTPUT_LEVEL_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Hibernate domain dedicated pin <ref refid="group___s_c_u_1gabaf5bdae1d6dffc54f13feef86a133c6" kindref="member">XMC_SCU_HIB_IO_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Output polarity of the hibernate domain dedicated pins HIB_IOx <ref refid="group___s_c_u_1ga3810fe2c38e7abef292ceaecd5660194" kindref="member">XMC_SCU_HIB_IO_OUTPUT_LEVEL_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the output polarity of the hibernate domain dedicated pins HIB_IOx</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gadca7d1332ed62fda2a1a85550d12f06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_SetRtcClockSource</definition>
        <argsstring>(const XMC_SCU_HIB_RTCCLKSRC_t source)</argsstring>
        <name>XMC_SCU_HIB_SetRtcClockSource</name>
        <param>
          <type>const <ref refid="group___s_c_u_1gad0408131d64c97d53a863b982225e664" kindref="member">XMC_SCU_HIB_RTCCLKSRC_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source of RTC clock.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gad0408131d64c97d53a863b982225e664" kindref="member">XMC_SCU_HIB_RTCCLKSRC_t</ref> to identify the clock source.<linebreak/>
 XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). <linebreak/>
 XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the source of RTC clock (fRTC).<linebreak/>
<linebreak/>
The value is configured to <emphasis>RCS</emphasis> bit of <emphasis>HDCR</emphasis> register. fULP needs external input powered by VBAT or VDDP. fOSI is internal clock. The frequency of the clock will be 32.768 kHz.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaff7d07fb799f33da6bd55dfec0938f53" kindref="member">XMC_SCU_HIB_GetRtcClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1900" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga18fc457f4295f92889a89bc2fc3b0f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_SetSR0Input</definition>
        <argsstring>(XMC_SCU_HIB_SR0_INPUT_t input)</argsstring>
        <name>XMC_SCU_HIB_SetSR0Input</name>
        <param>
          <type><ref refid="group___s_c_u_1gae6ba5b64dd9c71b767434b26687e8154" kindref="member">XMC_SCU_HIB_SR0_INPUT_t</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input signal HIB_SR0 of ERU0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects input to ERU0 module (HIB_SR0).</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga781006133ffe258774b67cad8156be5e" kindref="member">XMC_SCU_HIB_SetInput0()</ref>,<ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga387a75bbd0299d99fd8f818d1ea9886a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_SetStandbyClockSource</definition>
        <argsstring>(const XMC_SCU_HIB_STDBYCLKSRC_t source)</argsstring>
        <name>XMC_SCU_HIB_SetStandbyClockSource</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga8290034e7a28d8e2e8ed0086d6f92ab5" kindref="member">XMC_SCU_HIB_STDBYCLKSRC_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Source for standby clock.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga8290034e7a28d8e2e8ed0086d6f92ab5" kindref="member">XMC_SCU_HIB_STDBYCLKSRC_t</ref> to identify the clock source.<linebreak/>
 XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) <linebreak/>
 XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the source of Standby clock (fSTDBY).<linebreak/>
<linebreak/>
Clock source is configured by setting the <emphasis>STDBYSEL</emphasis> bits of <emphasis>HDCR</emphasis> register. Hibernate domain should be enabled explicitly before using the API.</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga893f5ed38bc3417a1b6482bda5031e0c" kindref="member">XMC_SCU_HIB_GetStdbyClockSource()</ref>, <ref refid="group___s_c_u_1ga2f73953dadc8eaa2fad5e66a2c2e57a4" kindref="member">XMC_SCU_HIB_EnableHibernateDomain()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1860" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaadf040d1469a36ba894350f9edac2ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_SetWakeupTriggerInput</definition>
        <argsstring>(XMC_SCU_HIB_IO_t pin)</argsstring>
        <name>XMC_SCU_HIB_SetWakeupTriggerInput</name>
        <param>
          <type><ref refid="group___s_c_u_1gabaf5bdae1d6dffc54f13feef86a133c6" kindref="member">XMC_SCU_HIB_IO_t</ref></type>
          <declname>pin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Hibernate domain dedicated pin <ref refid="group___s_c_u_1gabaf5bdae1d6dffc54f13feef86a133c6" kindref="member">XMC_SCU_HIB_IO_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects input for Wake-Up from Hibernate</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga1f936e085a93195fe021774ecd4f988b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_HIB_TriggerEvent</definition>
        <argsstring>(int32_t event)</argsstring>
        <name>XMC_SCU_HIB_TriggerEvent</name>
        <param>
          <type>int32_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Hibernate wakeup event <ref refid="group___s_c_u_1ga11fb0524a44f3c744946c7969a806a5b" kindref="member">XMC_SCU_HIB_EVENT_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Trigger hibernate wakeup event</para>
</simplesect>
<simplesect kind="note"><para>The register update in HIB domain is indicated by the MIRRST register which can be polled using <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga7987387b331ea0c7ba5bd582629cdbc2" kindref="member">XMC_SCU_HIB_ClearEventStatus()</ref>, <ref refid="group___s_c_u_1gaa2489ef97769bad35feb64b93c1b5050" kindref="member">XMC_SCU_HIB_EnableEvent()</ref>, <ref refid="group___s_c_u_1ga3c6db429c2b7079ce32ee286c4fba09e" kindref="member">XMC_SCU_HIB_DisableEvent()</ref>, <ref refid="group___s_c_u_1ga494b75a841498374cfee9664e6ce9cee" kindref="member">XMC_SCU_GetMirrorStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gabd2e577339ff5af48261d18e0e41dc50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_INTERRUPT_ClearEventStatus</definition>
        <argsstring>(const XMC_SCU_INTERRUPT_EVENT_t event)</argsstring>
        <name>XMC_SCU_INTERRUPT_ClearEventStatus</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit mask of the events to clear. <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref> for providing the input value. Multiple events can be combined using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Clears the event status bit in SRRAW register.<linebreak/>
<linebreak/>
The events are cleared by writing value 1 to their bit positions in the SRCLR register. The API can be used when polling method is used. After detecting the event, the event status should be cleared using software to detect the event again.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae23dfad3e5e11c78791e5d5a777c44a8" kindref="member">XMC_SCU_INTERUPT_GetEventStatus()</ref>, <ref refid="group___s_c_u_1gaa55b2098ce803174e7dfd680d0c30728" kindref="member">XMC_SCU_INTERRUPT_TriggerEvent()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaa814678729d6b7f41c558e768ba8ecd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_INTERRUPT_DisableEvent</definition>
        <argsstring>(const XMC_SCU_INTERRUPT_EVENT_t event)</argsstring>
        <name>XMC_SCU_INTERRUPT_DisableEvent</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit mask of the event to disable. <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref> for providing the input value. Multiple events can be combined using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables generation of interrupt on occurrence of the input event.<linebreak/>
<linebreak/>
The events are disabled by resetting the respective bit fields in the SRMSK register. <linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>NVIC_DisableIRQ(), <ref refid="group___s_c_u_1gab4cfb9545d1e561e1f24aeaa69af821c" kindref="member">XMC_SCU_INTERRUPT_EnableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gada4c1f90be9bb22b2b404d26fd88535c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_INTERRUPT_DisableNmiRequest</definition>
        <argsstring>(const uint32_t request)</argsstring>
        <name>XMC_SCU_INTERRUPT_DisableNmiRequest</name>
        <param>
          <type>const uint32_t</type>
          <declname>request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-maskable interrupt (NMI) request source to be disabled.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga5a0bae480e780bdd2dd407dfd1c30816" kindref="member">XMC_SCU_NMIREQ_t</ref> for selecting the source of NMI. Multiple sources can be combined using <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selectively disables interrupt sources from generating non maskable interrupt(NMI).<linebreak/>
<linebreak/>
NMI assertion can be individually disabled by clearing corresponding bits in the <emphasis>NMIREQEN</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab4cfb9545d1e561e1f24aeaa69af821c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_INTERRUPT_EnableEvent</definition>
        <argsstring>(const XMC_SCU_INTERRUPT_EVENT_t event)</argsstring>
        <name>XMC_SCU_INTERRUPT_EnableEvent</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit mask of the event to enable. <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref> for providing the input value. Multiple events can be combined using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables the generation of interrupt for the input events.<linebreak/>
<linebreak/>
The events are enabled by setting the respective bit fields in the SRMSK register. <linebreak/>
Note: User should separately enable the NVIC node responsible for handling the SCU interrupt. The interrupt will be generated when the respective event occurs. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>NVIC_EnableIRQ(), <ref refid="group___s_c_u_1gaa814678729d6b7f41c558e768ba8ecd4" kindref="member">XMC_SCU_INTERRUPT_DisableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_INTERRUPT_EnableNmiRequest</definition>
        <argsstring>(const uint32_t request)</argsstring>
        <name>XMC_SCU_INTERRUPT_EnableNmiRequest</name>
        <param>
          <type>const uint32_t</type>
          <declname>request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>request</parametername>
</parameternamelist>
<parameterdescription>
<para>Non-maskable interrupt (NMI) request source to be enabled.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga5a0bae480e780bdd2dd407dfd1c30816" kindref="member">XMC_SCU_NMIREQ_t</ref> for selecting the source of NMI. Multiple sources can be combined using <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selectively enables interrupt sources to generate non maskable interrupt(NMI).<linebreak/>
<linebreak/>
NMI assertion can be individually enabled by setting corresponding bit of an interrupt in the <emphasis>NMIREQEN</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gada4c1f90be9bb22b2b404d26fd88535c" kindref="member">XMC_SCU_INTERRUPT_DisableNmiRequest()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga4ae03c6bcc3ccade266b46d84f7715e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1gaff029b1575acc0712d494932d8ca6d60" kindref="member">XMC_SCU_STATUS_t</ref></type>
        <definition>XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler</definition>
        <argsstring>(const XMC_SCU_INTERRUPT_EVENT_t event, const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)</argsstring>
        <name>XMC_SCU_INTERRUPT_SetEventHandler</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_c_u_1ga4b50170c441fb21833c07a27b814a581" kindref="member">XMC_SCU_INTERRUPT_EVENT_HANDLER_t</ref></type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>The event for which the interrupt handler is to be configured. <linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref> for identifying the event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the function to be executed when the event if detected. <linebreak/>
 <bold>Range:</bold> The function accepts no arguments and returns no value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_SCU_STATUS_t Status of configuring the event handler function for the selected event.<linebreak/>
 <bold>Range:</bold> <emphasis>XMC_SCU_STATUS_OK</emphasis> if the event handler is successfully configured.<linebreak/>
 <emphasis>XMC_SCU_STATUS_ERROR</emphasis> if the input event is invalid.<linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Assigns the event handler function to be executed on occurrence of the selected event.<linebreak/>
<linebreak/>
If the input event is valid, the handler function will be assigned to a table to be executed when the interrupt is generated and the event status is set in the event status register. By using this API, polling for a particular event can be avoided. This way the CPU utilization will be optimized. Multiple SCU events can generate a common interrupt. When the interrupt is generated, a common interrupt service routine is executed. It checks for status flags of events which can generate the interrupt. The handler function will be executed if the event flag is set.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaa55b2098ce803174e7dfd680d0c30728" kindref="member">XMC_SCU_INTERRUPT_TriggerEvent()</ref>, <ref refid="group___s_c_u_1gae23dfad3e5e11c78791e5d5a777c44a8" kindref="member">XMC_SCU_INTERUPT_GetEventStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaa55b2098ce803174e7dfd680d0c30728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_INTERRUPT_TriggerEvent</definition>
        <argsstring>(const XMC_SCU_INTERRUPT_EVENT_t event)</argsstring>
        <name>XMC_SCU_INTERRUPT_TriggerEvent</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit mask of the event to be triggered. <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref> for providing the input value. Multiple events can be combined using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Triggers the event as if the hardware raised it.<linebreak/>
<linebreak/>
Event will be triggered by setting the respective bitfield in the SRSET register.<linebreak/>
Note: User should enable the NVIC node that handles the respective event for interrupt generation. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>NVIC_EnableIRQ(), <ref refid="group___s_c_u_1gae23dfad3e5e11c78791e5d5a777c44a8" kindref="member">XMC_SCU_INTERUPT_GetEventStatus()</ref>, <ref refid="group___s_c_u_1gabd2e577339ff5af48261d18e0e41dc50" kindref="member">XMC_SCU_INTERRUPT_ClearEventStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae23dfad3e5e11c78791e5d5a777c44a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref></type>
        <definition>XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_INTERUPT_GetEventStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Status of the SCU events.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the status of all SCU events.<linebreak/>
<linebreak/>
The status is read from the SRRAW register. To check the status of a particular event, the returned value should be masked with the bit mask of the event. The bitmask of events can be obtained using the type <ref refid="group___s_c_u_1ga18e68742408210603bed8d0806ce1573" kindref="member">XMC_SCU_INTERRUPT_EVENT_t</ref>. Multiple events&apos; status can be checked by combining the bit masks using <emphasis>OR</emphasis> operation. After detecting the event, the event status should be cleared using software to detect the event again. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gabd2e577339ff5af48261d18e0e41dc50" kindref="member">XMC_SCU_INTERRUPT_ClearEventStatus()</ref>, <ref refid="group___s_c_u_1gaa55b2098ce803174e7dfd680d0c30728" kindref="member">XMC_SCU_INTERRUPT_TriggerEvent()</ref>, <ref refid="group___s_c_u_1ga4ae03c6bcc3ccade266b46d84f7715e6" kindref="member">XMC_SCU_INTERRUPT_SetEventHandler()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga9ba1ce317ce89edfea107893fbd8a0be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_IRQHandler</definition>
        <argsstring>(uint32_t sr_num)</argsstring>
        <name>XMC_SCU_IRQHandler</name>
        <param>
          <type>uint32_t</type>
          <declname>sr_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sr_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Service request number identifying the SCU interrupt generated.<linebreak/>
 <bold>Range:</bold> 0 to 2. XMC4x devices have one common SCU interrupt, so the value should be 0.<linebreak/>
 But XMC1x devices support 3 interrupt nodes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None </para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>A common function to execute callback functions for multiple events.<linebreak/>
<linebreak/>
It checks for the status of events which can generate the interrupt with the selected service request. If the event is set, the corresponding callback function will be executed. It also clears the event status bit.<linebreak/>
<bold>Note:</bold> This is an internal function. It should not be called by the user application.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga4ae03c6bcc3ccade266b46d84f7715e6" kindref="member">XMC_SCU_INTERRUPT_SetEventHandler()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="588" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga09f2786f94680cc125ead431f3c4d9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_IsTemperatureSensorBusy</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_IsTemperatureSensorBusy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Indicates if the die temperature sensor is busy.<linebreak/>
 <bold>Range:</bold> <emphasis>true</emphasis> if sensor is busy in temperature measurement. <emphasis>false</emphasis> if sensor is free and can accept a new request for measurement.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Checks whether Die Temperature Sensor (DTS) is busy in temperature measurement.<linebreak/>
<linebreak/>
The status is read from the <emphasis>BUSY</emphasis> bit field of the <emphasis>DTSSTAT</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga8ac62bd07097bb83cd294a1d6625af36" kindref="member">XMC_SCU_GetTemperatureMeasurement()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaedec5f2ce4cc799cad5026d5ec76a1f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_IsTemperatureSensorEnabled</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_IsTemperatureSensorEnabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Status of die temperature sensor. <linebreak/>
 <bold>Range:</bold> true - if temperature sensor is enabled.<linebreak/>
 false - if temperature sensor is disabled.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the die temperature sensor power status.<linebreak/>
<linebreak/>
The status is obtained by reading the PWD bit of DTSCON register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga3f6a1e71b005175777c6dd9a069e325c" kindref="member">XMC_SCU_EnableTemperatureSensor()</ref>, <ref refid="group___s_c_u_1gacf86e99e8def2e37a0b484982e61256d" kindref="member">XMC_SCU_CalibrateTemperatureSensor()</ref>, <ref refid="group___s_c_u_1gabac9292e193c9804b5a6856de186737e" kindref="member">XMC_SCU_StartTemperatureMeasurement()</ref>, <ref refid="group___s_c_u_1ga8ac62bd07097bb83cd294a1d6625af36" kindref="member">XMC_SCU_GetTemperatureMeasurement()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1042" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gac57499ff739d75ea0f53f51d2fd51505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_IsTemperatureSensorReady</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_IsTemperatureSensorReady</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>bool Status of die temperature sensor whether it is ready to start measurement. <linebreak/>
 <bold>Range:</bold> <linebreak/>
 <emphasis>true</emphasis> if temperature sensor is ready to start measurement. <linebreak/>
 <emphasis>false</emphasis> if temperature sensor is not ready to start measurement.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Checks if the die temperature sensor is ready to start a measurement<linebreak/>
<linebreak/>
The status is obtained by reading <emphasis>RDY</emphasis> bit of <emphasis>DTSSTAT</emphasis> register. It is recommended to check the ready status of die temperature sensor before starting it. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gabac9292e193c9804b5a6856de186737e" kindref="member">XMC_SCU_StartTemperatureMeasurement()</ref>, <ref refid="group___s_c_u_1ga09f2786f94680cc125ead431f3c4d9c4" kindref="member">XMC_SCU_IsTemperatureSensorBusy()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga0c564412ab3d6a5d43c4fde9035cf07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_PARITY_ClearStatus</definition>
        <argsstring>(const uint32_t memory)</argsstring>
        <name>XMC_SCU_PARITY_ClearStatus</name>
        <param>
          <type>const uint32_t</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>The on-chip RAM type, for which the parity error status has to be cleared.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref> to identify the on-chip RAM type. Multiple memory status bits can be cleared by using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Clears the parity error status bit. <linebreak/>
<linebreak/>
When a memory parity error is detected using the status bits in <emphasis>PEFLAG</emphasis> register. It has to be cleared by software to detect the parity error from the same memory next time. The API clears the parity error status bit of the selected peripheral by setting the respective bit in the <emphasis>PEFLAG</emphasis> register. Status of multiple memory parity errors can be cleared by combining the enum values using <emphasis>OR</emphasis> operation. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gabfb74be3c54ea80b2fd25d20e143a299" kindref="member">XMC_SCU_PARITY_GetStatus()</ref>, <ref refid="group___s_c_u_1gab020813ed43c4a858e3866254546aca3" kindref="member">XMC_SCU_PARITY_Enable()</ref>, <ref refid="group___s_c_u_1gafef433d566f700f9106db98439af3f88" kindref="member">XMC_SCU_PARITY_EnableTrapGeneration()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae85c78b1d38fcd51069d4f2a131d280f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_PARITY_Disable</definition>
        <argsstring>(const uint32_t memory)</argsstring>
        <name>XMC_SCU_PARITY_Disable</name>
        <param>
          <type>const uint32_t</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>The on-chip RAM type, for which the parity error checking has to be disabled.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref> to identify the on-chip RAM type. Multiple memory types can be combined using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables parity error checking for the selected on-chip RAM type.<linebreak/>
<linebreak/>
Parity error detection can be disabled by clearing the respective bit in the <emphasis>PEEN</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gab020813ed43c4a858e3866254546aca3" kindref="member">XMC_SCU_PARITY_Enable()</ref>, <ref refid="group___s_c_u_1ga763ff133611bd2b42456fa9e8f3e34af" kindref="member">XMC_SCU_PARITY_DisableTrapGeneration()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga763ff133611bd2b42456fa9e8f3e34af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_PARITY_DisableTrapGeneration</definition>
        <argsstring>(const uint32_t memory)</argsstring>
        <name>XMC_SCU_PARITY_DisableTrapGeneration</name>
        <param>
          <type>const uint32_t</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>The on-chip RAM type, for which the parity error trap generation has to be disabled.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref> to identify the on-chip RAM type. Multiple memory types can be combined using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables the assertion of trap for the parity error source.<linebreak/>
<linebreak/>
Trap assertion can be disabled by clearing the respective bit of the RAM type in the <emphasis>PETE</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gafef433d566f700f9106db98439af3f88" kindref="member">XMC_SCU_PARITY_EnableTrapGeneration()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1585" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab020813ed43c4a858e3866254546aca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_PARITY_Enable</definition>
        <argsstring>(const uint32_t memory)</argsstring>
        <name>XMC_SCU_PARITY_Enable</name>
        <param>
          <type>const uint32_t</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>The on-chip RAM type, for which the parity error checking has to be enabled.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref> to identify the on-chip RAM type. Multiple memory types can be combined using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables parity error checking for the selected on-chip RAM type.<linebreak/>
<linebreak/>
Parity error checking can be enabled by setting respective bits in the <emphasis>PEEN</emphasis> register. Additionally parity error can be configured to generate trap when the error is detected, using the API <ref refid="group___s_c_u_1gafef433d566f700f9106db98439af3f88" kindref="member">XMC_SCU_PARITY_EnableTrapGeneration()</ref>. Such a trap can be further configured to generate non maskable interrupt(NMI) using the API <ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref>. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gafef433d566f700f9106db98439af3f88" kindref="member">XMC_SCU_PARITY_EnableTrapGeneration()</ref>, <ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gafef433d566f700f9106db98439af3f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_PARITY_EnableTrapGeneration</definition>
        <argsstring>(const uint32_t memory)</argsstring>
        <name>XMC_SCU_PARITY_EnableTrapGeneration</name>
        <param>
          <type>const uint32_t</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>The on-chip RAM type, for which the parity error trap generation has to be enabled.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref> to identify the on-chip RAM type. Multiple memory types can be combined using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables trap assertion for the parity error source.<linebreak/>
<linebreak/>
Parity error detection for different types of on-chip RAM can generate trap. Trap assertion for parity error can be individually enabled by setting the respective bits in the <emphasis>PETE</emphasis> register. The generated trap can be additionally configured to generate non maskable interrupt(NMI) using the API <ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref>. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref>, <ref refid="group___s_c_u_1ga763ff133611bd2b42456fa9e8f3e34af" kindref="member">XMC_SCU_PARITY_DisableTrapGeneration()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga83edc196c488b1c81055d6edf4225a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t XMC_SCU_PARITY_GetParityReadValue</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_PARITY_GetParityReadValue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>parity bits generated during last read access</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>For each byte of a memory module the parity bits generated during the most recent read access can be read.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae74c277267d0d539a55c87bbe4a1bc54" kindref="member">XMC_SCU_PARITY_OverrideParityBitLogic()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1668" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1668" bodyend="1671"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gabfb74be3c54ea80b2fd25d20e143a299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_PARITY_GetStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_PARITY_GetStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Status of parity error detection for the on-chip RAM modules.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref> to get the bit mask of each RAM module type.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the status of parity error detection for the on-chip RAM modules.<linebreak/>
<linebreak/>
Parity error status information is obtained from the <emphasis>PEFLAG</emphasis> register. If a particular RAM module has parity error, its respective bit field will be set to 1 in the returned value. A check for the status of a particular RAM module can be done by masking the returned value with the RAM module identifier from the type <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref>. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga0c564412ab3d6a5d43c4fde9035cf07f" kindref="member">XMC_SCU_PARITY_ClearStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae74c277267d0d539a55c87bbe4a1bc54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_PARITY_OverrideParityBitLogic</definition>
        <argsstring>(uint32_t memory)</argsstring>
        <name>XMC_SCU_PARITY_OverrideParityBitLogic</name>
        <param>
          <type>uint32_t</type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>The on-chip RAM type, for which the parity logic should be overriden.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref> to identify the on-chip RAM type. Multiple memory types can be combined using the <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enable access to parity bits of SRAM modules for various types of peripherals. Enable direct write to parity bits using value selected using <ref refid="group___s_c_u_1gaf0f583c308bba3a39561e83bf3ec802f" kindref="member">XMC_SCU_PARITY_SetParityWriteValue()</ref><linebreak/>
<linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaf0f583c308bba3a39561e83bf3ec802f" kindref="member">XMC_SCU_PARITY_SetParityWriteValue()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1618" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1618" bodyend="1621"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga33092936078880aa0f1efa350ab1416a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_PARITY_SelectMemoryTest</definition>
        <argsstring>(const XMC_SCU_PARITY_t memory)</argsstring>
        <name>XMC_SCU_PARITY_SelectMemoryTest</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref></type>
          <declname>memory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memory</parametername>
</parameternamelist>
<parameterdescription>
<para>The on-chip RAM type, for which the parity test has to be enabled.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga22ea4f1155833e07a1ec13cd2c4cb4e0" kindref="member">XMC_SCU_PARITY_t</ref> to identify the on-chip RAM type. <bold>Only</bold> a single memory type should be specified.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects parity test output from a memory instance that can be inspected using <ref refid="group___s_c_u_1ga83edc196c488b1c81055d6edf4225a67" kindref="member">XMC_SCU_PARITY_GetParityReadValue()</ref> </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga83edc196c488b1c81055d6edf4225a67" kindref="member">XMC_SCU_PARITY_GetParityReadValue()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1636" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1636" bodyend="1639"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaf0f583c308bba3a39561e83bf3ec802f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_PARITY_SetParityWriteValue</definition>
        <argsstring>(uint8_t write_value)</argsstring>
        <name>XMC_SCU_PARITY_SetParityWriteValue</name>
        <param>
          <type>uint8_t</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>parity bits value stored with next write access<linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>For each byte of a memory module the parity bits corresponding to the next write access are selected here.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gae74c277267d0d539a55c87bbe4a1bc54" kindref="member">XMC_SCU_PARITY_OverrideParityBitLogic()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1653" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="1653" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga4105a1ad04e87b7ca5ec0c88242ed991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_POWER_DisableMonitor</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_POWER_DisableMonitor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
Disable power monitoring control register for brown-out detection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2968" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2968" bodyend="2971"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gacf750b3451bbdd00820d54f25100bd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_POWER_DisableUsb</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_POWER_DisableUsb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables the USB PHY and also OTG comparator if available.<linebreak/>
<linebreak/>
Configures the <emphasis>USBPHYPDQ</emphasis> bit of <emphasis>PWRSET</emphasis> register to move the USB PHY to power down state. If USB OTG is available in the device, the <emphasis>USBOTGEN</emphasis> bit of <emphasis>PWRSET</emphasis> register is set to 0. This disables the USB on the go comparators.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga4d0a5061d139bb8e136316a2fcc98bab" kindref="member">XMC_SCU_POWER_EnableUsb()</ref>, <ref refid="group___s_c_u_1ga5332425bae1da209b9c6cc857f53d51e" kindref="member">XMC_SCU_CLOCK_SetUsbClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3029" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gae91191a2fd70dca90ff7fd9912500b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_POWER_EnableMonitor</definition>
        <argsstring>(uint8_t threshold, uint8_t interval)</argsstring>
        <name>XMC_SCU_POWER_EnableMonitor</name>
        <param>
          <type>uint8_t</type>
          <declname>threshold</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Threshold value for comparison to VDDP for brownout detection. LSB33V is 22.5mV </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Interval value for comparison to VDDP expressed in cycles of system clock </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
Enable power monitoring control register for brown-out detection. Brown Out Trap need to be enabled using <ref refid="group___s_c_u_1ga51a3e55dedfde788f1ba5e3bad7fdb4e" kindref="member">XMC_SCU_TRAP_Enable()</ref> and event handling done in NMI_Handler.</para>
<para><simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga51a3e55dedfde788f1ba5e3bad7fdb4e" kindref="member">XMC_SCU_TRAP_Enable()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2955" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2955" bodyend="2960"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga4d0a5061d139bb8e136316a2fcc98bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_POWER_EnableUsb</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_POWER_EnableUsb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables the USB PHY and also OTG comparator if available.<linebreak/>
<linebreak/>
Configures the <emphasis>USBPHYPDQ</emphasis> bit of <emphasis>PWRSET</emphasis> register to move the USB PHY from power down state. If USB OTG is available in the device, the <emphasis>USBOTGEN</emphasis> bit of <emphasis>PWRSET</emphasis> register is set to 1. This enables the USB on the go comparators.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gacf750b3451bbdd00820d54f25100bd75" kindref="member">XMC_SCU_POWER_DisableUsb()</ref>, <ref refid="group___s_c_u_1ga5332425bae1da209b9c6cc857f53d51e" kindref="member">XMC_SCU_CLOCK_SetUsbClockSource()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3015" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga70101836e63982417dea51031e5cbc67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float XMC_SCU_POWER_GetEVR13Voltage</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_POWER_GetEVR13Voltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>EVR13 voltage in volts</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Returns EVR13 voltage in volts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2992" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaf931ceae656bd6dae31cf66a107457b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float XMC_SCU_POWER_GetEVR33Voltage</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_POWER_GetEVR33Voltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>EVR33 voltage in volts</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Returns EVR33 voltage in volts </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="3001" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga5c7efb298beadae160cc1b0bbd2e2cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_SCU_POWER_GetEVRStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_POWER_GetEVRStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="group___s_c_u_1ga167a7544a2eb6c4e5ce7b2f192015a9d" kindref="member">XMC_SCU_POWER_EVR_STATUS_t</ref></para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Returns status of the EVR13. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2980" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2980" bodyend="2983"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga012cf8d64e3ab3c1ac31a2a7b3ffc21d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_POWER_WaitForEvent</definition>
        <argsstring>(XMC_SCU_POWER_MODE_t mode)</argsstring>
        <name>XMC_SCU_POWER_WaitForEvent</name>
        <param>
          <type><ref refid="group___s_c_u_1gad97c10a5c5d47ad0b1aaf0c951b60791" kindref="member">XMC_SCU_POWER_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Low power mode<linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enter selected low power mode and wait for event</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad337ef7ef0786c19225a5c1a69b4fe09" kindref="member">XMC_SCU_CLOCK_SetSleepConfig()</ref>, <ref refid="group___s_c_u_1ga195b4578bc2ddafae6a3a59c53325a0c" kindref="member">XMC_SCU_CLOCK_SetDeepSleepConfig()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2936" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2936" bodyend="2941"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga42e79334669c4bb6d55e9f09d419616a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_POWER_WaitForInterrupt</definition>
        <argsstring>(XMC_SCU_POWER_MODE_t mode, bool sleep_on_exit)</argsstring>
        <name>XMC_SCU_POWER_WaitForInterrupt</name>
        <param>
          <type><ref refid="group___s_c_u_1gad97c10a5c5d47ad0b1aaf0c951b60791" kindref="member">XMC_SCU_POWER_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sleep_on_exit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Low power mode<linebreak/>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sleep_on_exit</parametername>
</parameternamelist>
<parameterdescription>
<para>Enter sleep, or deep sleep, on return from an ISR</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enter selected low power mode and wait for interrupt</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad337ef7ef0786c19225a5c1a69b4fe09" kindref="member">XMC_SCU_CLOCK_SetSleepConfig()</ref>, <ref refid="group___s_c_u_1ga195b4578bc2ddafae6a3a59c53325a0c" kindref="member">XMC_SCU_CLOCK_SetDeepSleepConfig()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="2918" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="2918" bodyend="2923"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga315dd2a00d282eddb3056118c86e6da9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_ReadFromRetentionMemory</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>XMC_SCU_ReadFromRetentionMemory</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Location in the retention memory to be read.<linebreak/>
 <bold>Range:</bold> 4 bit address space is provided for selecting 16 words of 32 bits. equivalent to 64 bytes of data. <emphasis>address</emphasis> value should be from 0 to 15.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t 32 bit data read from retention memory. The API reads one word(4 bytes) of data from the address specified.<linebreak/>
 <bold>Range:</bold> 32 bit data.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Reads data from selected address of retention memory in hibernate domain.<linebreak/>
<linebreak/>
The retention memory is located in hibernate domain. It is used for the purpose of store/restore of context information. Access to the retention memory space is served over shared serial interface. Retention memory content is retained even in hibernate mode. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gab835560fc4cd24d8f03043d39e52b5ac" kindref="member">XMC_SCU_WriteToRetentionMemory()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gaa7000d0aa26ac656926b108b49e0f73d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_ReadGPR</definition>
        <argsstring>(const uint32_t index)</argsstring>
        <name>XMC_SCU_ReadGPR</name>
        <param>
          <type>const uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The SCU general purpose register to be read.<linebreak/>
 <bold>Range:</bold> 0 and 1 corresponding to GPR0 and GPR1.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Data read from the selected general purpose register.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides stored data from general purpose SCU register.<linebreak/>
<linebreak/>
SCU consists of 2 general purpose registers. These registers can be used for storing data. The API reads from either GPR0 or GPR1 based on the <emphasis>index</emphasis> value. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gad0681ca8911f106c0c9f6fd65db89e1c" kindref="member">XMC_SCU_WriteGPR()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab00fa5e7e6ed73767de6f80b9a849543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_RESET_AssertPeripheralReset</definition>
        <argsstring>(const XMC_SCU_PERIPHERAL_RESET_t peripheral)</argsstring>
        <name>XMC_SCU_RESET_AssertPeripheralReset</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga8a897b11f9bf2e3cba0a33b127ee972a" kindref="member">XMC_SCU_PERIPHERAL_RESET_t</ref></type>
          <declname>peripheral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peripheral</parametername>
</parameternamelist>
<parameterdescription>
<para>The peripheral to be reset.<linebreak/>
 <bold>Range:</bold> Type <ref refid="group___s_c_u_1ga8a897b11f9bf2e3cba0a33b127ee972a" kindref="member">XMC_SCU_PERIPHERAL_RESET_t</ref> enumerates all the peripherals that can be reset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Puts the specified peripheral in to reset state. <linebreak/>
<linebreak/>
The API achieves reset of peripherals by setting the respective bit in the <emphasis>PRSET0</emphasis>, <emphasis>PRSET1</emphasis> or <emphasis>PRSET2</emphasis> register. Status of reset assertion automatically stored in the <emphasis>PRSTATn</emphasis> register and can be checked by user software to determine the state of the system and for debug purpose.<linebreak/>
It is recommended to use following steps to assert a peripheral reset:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis><ref refid="group___s_c_u_1gab00fa5e7e6ed73767de6f80b9a849543" kindref="member">XMC_SCU_RESET_AssertPeripheralReset()</ref></emphasis> with desired peripheral identifier.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_RESET_IsPeripheralResetAsserted</emphasis> with same peripheral identifier to verify whether peripheral is in reset state.<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga09011e9b100f1a164c3b908cc9bdf77f" kindref="member">XMC_SCU_RESET_IsPeripheralResetAsserted()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga4bf9396e8b46be98f73999575d13bf6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_RESET_ClearDeviceResetReason</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_RESET_ClearDeviceResetReason</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Clears the reset reason bits in the reset status register. <linebreak/>
<linebreak/>
Clearing of the reset status information in the <emphasis>SCU_RSTSTAT</emphasis> register via register bit <emphasis>RSTCLR.RSCLR</emphasis> is strongly recommended to ensure a clear indication of the cause of next reset.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga3f779c81bdc29b44c644017a52aff300" kindref="member">XMC_SCU_RESET_GetDeviceResetReason()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="410" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" bodystart="410" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gac88ad38d3473b139dafef29dc3ba5216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_RESET_DeassertPeripheralReset</definition>
        <argsstring>(const XMC_SCU_PERIPHERAL_RESET_t peripheral)</argsstring>
        <name>XMC_SCU_RESET_DeassertPeripheralReset</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga8a897b11f9bf2e3cba0a33b127ee972a" kindref="member">XMC_SCU_PERIPHERAL_RESET_t</ref></type>
          <declname>peripheral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peripheral</parametername>
</parameternamelist>
<parameterdescription>
<para>The peripheral to be moved out of reset state.<linebreak/>
 <bold>Range:</bold> Type <ref refid="group___s_c_u_1ga8a897b11f9bf2e3cba0a33b127ee972a" kindref="member">XMC_SCU_PERIPHERAL_RESET_t</ref> enumerates all the peripherals that can be reset.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables the specified peripheral by moving it out of reset state. <linebreak/>
<linebreak/>
Any peripheral should be moved out of reset state for executing its functionality. The API enables the peripheral by setting its respective bit in the <emphasis>PRCLR0</emphasis>, <emphasis>PRCLR1</emphasis> or <emphasis>PRCLR2</emphasis> register. Status of reset deassertion is automatically stored in the <emphasis>PRSTATn</emphasis> register and can be checked by the user software to determine the state of the system and for debug purpose.<linebreak/>
It is recommended to use following steps to deassert a peripheral reset:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis><ref refid="group___s_c_u_1gac88ad38d3473b139dafef29dc3ba5216" kindref="member">XMC_SCU_RESET_DeassertPeripheralReset()</ref></emphasis> with desired peripheral identifier.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis><ref refid="group___s_c_u_1ga09011e9b100f1a164c3b908cc9bdf77f" kindref="member">XMC_SCU_RESET_IsPeripheralResetAsserted()</ref></emphasis> with desired peripheral identifier to verify whether peripheral has been enabled.<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gab00fa5e7e6ed73767de6f80b9a849543" kindref="member">XMC_SCU_RESET_AssertPeripheralReset()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga3f779c81bdc29b44c644017a52aff300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_RESET_GetDeviceResetReason</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_RESET_GetDeviceResetReason</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Status representing the reason for device reset.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the value representing the reason for device reset.<linebreak/>
<linebreak/>
The return value is an encoded word, which can indicate multiple reasons for the last reset. Each bit position of the returned word is representative of a last reset cause. The returned value should be appropriately masked to check the cause of reset. The cause of the last reset gets automatically stored in the <emphasis>SCU_RSTSTAT</emphasis> register. The reset status shall be reset after each startup in order to ensure consistent source indication after the next reset. <bold>Range:</bold> The type <ref refid="group___s_c_u_1gae01c08f5d524dadbc6e0c4128b348dc3" kindref="member">XMC_SCU_RESET_REASON_t</ref> can be used to get the bit masks of the reset cause.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga4bf9396e8b46be98f73999575d13bf6d" kindref="member">XMC_SCU_RESET_ClearDeviceResetReason()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="395" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga09011e9b100f1a164c3b908cc9bdf77f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_SCU_RESET_IsPeripheralResetAsserted</definition>
        <argsstring>(const XMC_SCU_PERIPHERAL_RESET_t peripheral)</argsstring>
        <name>XMC_SCU_RESET_IsPeripheralResetAsserted</name>
        <param>
          <type>const <ref refid="group___s_c_u_1ga8a897b11f9bf2e3cba0a33b127ee972a" kindref="member">XMC_SCU_PERIPHERAL_RESET_t</ref></type>
          <declname>peripheral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>peripheral</parametername>
</parameternamelist>
<parameterdescription>
<para>The peripheral, whose reset status has to be checked.<linebreak/>
 <bold>Range:</bold> Type <ref refid="group___s_c_u_1ga8a897b11f9bf2e3cba0a33b127ee972a" kindref="member">XMC_SCU_PERIPHERAL_RESET_t</ref> enumerates all the peripherals.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool Status of peripheral reset. <linebreak/>
 <bold>Range:</bold> <emphasis>true</emphasis> if peripheral is in reset state. <emphasis>false</emphasis> if peripheral is enabled and out of reset state.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Checks the reset status of the selected peripheral.<linebreak/>
<linebreak/>
The API reads the reset status from <emphasis>PRSTATn</emphasis> register. Returns true if the peripheral is in reset state. On power up of the device, all the peripherals will be in reset state. If the peripheral is enabled, <emphasis>false</emphasis> will be returned as the status. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gab00fa5e7e6ed73767de6f80b9a849543" kindref="member">XMC_SCU_RESET_AssertPeripheralReset()</ref>, <ref refid="group___s_c_u_1gac88ad38d3473b139dafef29dc3ba5216" kindref="member">XMC_SCU_RESET_DeassertPeripheralReset()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga3ebb50291e4fc5722746f2f40fadb6a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_SetBootMode</definition>
        <argsstring>(const XMC_SCU_BOOTMODE_t mode)</argsstring>
        <name>XMC_SCU_SetBootMode</name>
        <param>
          <type>const <ref refid="group___s_c_u_1gaee17d2349a9e695f89aaa67972035bb6" kindref="member">XMC_SCU_BOOTMODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Boot mode to be configured for the device.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1gaee17d2349a9e695f89aaa67972035bb6" kindref="member">XMC_SCU_BOOTMODE_t</ref> for selecting the boot mode.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configures the desired boot mode for the device.<linebreak/>
<linebreak/>
The XMC4 series devices support multiple boot modes. A running application can set a desired bootmode and launch it by means of software reset. Switching of boot modes should be handled carefully. User should ensure that the initial boot sequence is executed. A stable execution environment should be maintained when program control is eventually handed over to the application program.<linebreak/>
It is recommended to use following steps to launch requested bootmode:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis><ref refid="group___s_c_u_1ga3ebb50291e4fc5722746f2f40fadb6a8" kindref="member">XMC_SCU_SetBootMode()</ref></emphasis> with desired boot mode value.<linebreak/>
</para>
</listitem><listitem><para>Trigger a software reset using system reset request by enabling a bit <emphasis>SYSRESETREQ</emphasis> of AIRCR register (PPB-&gt;AIRCR |= PPB_AIRCR_SYSRESETREQ_Msk).<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga2a6d9572718fe6822b42522947fe822b" kindref="member">XMC_SCU_GetBootMode()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gac10ca2cd72477476ffe38a4818bcae4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_SetCcuTriggerHigh</definition>
        <argsstring>(const uint32_t trigger)</argsstring>
        <name>XMC_SCU_SetCcuTriggerHigh</name>
        <param>
          <type>const uint32_t</type>
          <declname>trigger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>CCU slices to be triggered synchronously via software. The value is a bitmask of CCU slice bits in the register CCUCON. <linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga51850699f03c906a5fefcc4f04c6b2c1" kindref="member">XMC_SCU_CCU_TRIGGER_t</ref> for bitmask of individual CCU slices. Multiple slices can be combined using <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Generates active edge(low to high) trigger for multiple CCU units at the same time.<linebreak/>
<linebreak/>
Before executing this API, all the required CCU timers should configure external start. The edge of the start signal should be selected as active edge. The input signal for the CCU slice should be selected as SCU input. The above mentioned configurations can be made using the CCU LLD API <ref refid="group___c_c_u4_1gac029dc08c5d54be8e773df0de9641691" kindref="member">XMC_CCU4_SLICE_StartConfig()</ref>. CCU timer slice should be started using <ref refid="group___c_c_u4_1ga9997bb59706a4034e3e3be33a4935a7c" kindref="member">XMC_CCU4_SLICE_StartTimer()</ref> before triggering the timer using this API.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___c_c_u4_1gac029dc08c5d54be8e773df0de9641691" kindref="member">XMC_CCU4_SLICE_StartConfig()</ref>, <ref refid="group___c_c_u4_1ga28e214514acb1a75a67de63e6d74b167" kindref="member">XMC_CCU4_SLICE_SetInput()</ref>, <ref refid="group___s_c_u_1ga53300d587bbd03bc34c5a4396f5a34b9" kindref="member">XMC_SCU_SetCcuTriggerLow()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="234" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga53300d587bbd03bc34c5a4396f5a34b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_SetCcuTriggerLow</definition>
        <argsstring>(const uint32_t trigger)</argsstring>
        <name>XMC_SCU_SetCcuTriggerLow</name>
        <param>
          <type>const uint32_t</type>
          <declname>trigger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>CCU slices to be triggered synchronously via software. The value is a bitmask of CCU slice bits in the register CCUCON. <linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga51850699f03c906a5fefcc4f04c6b2c1" kindref="member">XMC_SCU_CCU_TRIGGER_t</ref> for bitmask of individual CCU slices. Multiple slices can be combined using <emphasis>OR</emphasis> operation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Generates passive edge(high to low) trigger for multiple CCU units at the same time.<linebreak/>
<linebreak/>
Before executing this API, all the required CCU timers should configure external start. The edge of the start signal should be selected as passive edge. The input signal for the CCU slice should be selected as SCU input. The above mentioned configurations can be made using the CCU LLD API <ref refid="group___c_c_u4_1gac029dc08c5d54be8e773df0de9641691" kindref="member">XMC_CCU4_SLICE_StartConfig()</ref>. CCU timer slice should be started using <ref refid="group___c_c_u4_1ga9997bb59706a4034e3e3be33a4935a7c" kindref="member">XMC_CCU4_SLICE_StartTimer()</ref> before triggering the timer using this API.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___c_c_u4_1gac029dc08c5d54be8e773df0de9641691" kindref="member">XMC_CCU4_SLICE_StartConfig()</ref>, <ref refid="group___c_c_u4_1ga28e214514acb1a75a67de63e6d74b167" kindref="member">XMC_CCU4_SLICE_SetInput()</ref>, <ref refid="group___s_c_u_1gac10ca2cd72477476ffe38a4818bcae4b" kindref="member">XMC_SCU_SetCcuTriggerHigh()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" line="259" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_scu.h" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gabac9292e193c9804b5a6856de186737e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_c_u_1gaff029b1575acc0712d494932d8ca6d60" kindref="member">XMC_SCU_STATUS_t</ref></type>
        <definition>XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_StartTemperatureMeasurement</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>XMC_SCU_STATUS_t Result of starting the temperature measurement.<linebreak/>
 <bold>Range:</bold> <linebreak/>
 XMC_SCU_STATUS_OK if the measurement is started successfully.<linebreak/>
 XMC_SCU_STATUS_ERROR if temperature sensor is not enabled.<linebreak/>
 XMC_SCU_STATUS_BUSY if temperature sensor is busy measuring the temperature.<linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Starts die temperature measurement using internal temperature sensor.<linebreak/>
<linebreak/>
The API checks if the temperature sensor is enabled and is not busy in measurement.<linebreak/>
It is recommended to use following steps:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis>XMC_SCU_StopTempMeasurement</emphasis> to stop temperature measurement if it was started previously.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_SetRawTempLimits</emphasis> with desired lower and upper temperature threshold limit values if it is needed.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_StartTempMeasurement</emphasis> to start temperature measurement.<linebreak/>
</para>
</listitem><listitem><para>Check whether Die Temperature Sensor (DTS) is busy in conversion by calling <emphasis><ref refid="group___s_c_u_1ga09f2786f94680cc125ead431f3c4d9c4" kindref="member">XMC_SCU_IsTemperatureSensorBusy()</ref></emphasis> and wait till conversion complete.<linebreak/>
</para>
</listitem><listitem><para>Read the die temperature value using <emphasis>XMC_SCU_GetTemperatureMeasurement</emphasis> API. </para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga3f6a1e71b005175777c6dd9a069e325c" kindref="member">XMC_SCU_EnableTemperatureSensor()</ref>, <ref refid="group___s_c_u_1gacf86e99e8def2e37a0b484982e61256d" kindref="member">XMC_SCU_CalibrateTemperatureSensor()</ref>, <ref refid="group___s_c_u_1ga8ac62bd07097bb83cd294a1d6625af36" kindref="member">XMC_SCU_GetTemperatureMeasurement()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1098" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga6fef80ad14de7e792696cbd892b1ad26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_TRAP_ClearStatus</definition>
        <argsstring>(const uint32_t trap)</argsstring>
        <name>XMC_SCU_TRAP_ClearStatus</name>
        <param>
          <type>const uint32_t</type>
          <declname>trap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trap</parametername>
</parameternamelist>
<parameterdescription>
<para>The event for which, trap status bit has to be cleared.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga4de86b97726dc23fabd8c4e573b1bdb0" kindref="member">XMC_SCU_TRAP_t</ref> to identify the event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Clears the trap status of input event.<linebreak/>
<linebreak/>
Once a trap event is detected, it will have to be acknowledged and later serviced. The trap status bit should be cleared to detect the occurence of trap next time. This is useful while polling for TRAPSTAT without enabling the NMI for trap. Trap status can be cleared by setting the event bit in the <emphasis>TRAPCLR</emphasis> register. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref>, <ref refid="group___s_c_u_1gada772bc64ad61ae19612224ae7f3855c" kindref="member">XMC_SCU_TRAP_GetStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1396" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gacfb00024734804883905d6a423f69a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_TRAP_Disable</definition>
        <argsstring>(const uint32_t trap)</argsstring>
        <name>XMC_SCU_TRAP_Disable</name>
        <param>
          <type>const uint32_t</type>
          <declname>trap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trap</parametername>
</parameternamelist>
<parameterdescription>
<para>The event for which, trap generation has to be disabled.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga4de86b97726dc23fabd8c4e573b1bdb0" kindref="member">XMC_SCU_TRAP_t</ref> to identify the event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables assertion of trap for the selected trap event.<linebreak/>
<linebreak/>
Trap assertion can be individually disabled by setting the respective event bit in the <emphasis>TRAPDIS</emphasis> register in order to suppress trap generation. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga51a3e55dedfde788f1ba5e3bad7fdb4e" kindref="member">XMC_SCU_TRAP_Enable()</ref>, <ref refid="group___s_c_u_1ga6fef80ad14de7e792696cbd892b1ad26" kindref="member">XMC_SCU_TRAP_ClearStatus()</ref>, <ref refid="group___s_c_u_1gada772bc64ad61ae19612224ae7f3855c" kindref="member">XMC_SCU_TRAP_GetStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga51a3e55dedfde788f1ba5e3bad7fdb4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_TRAP_Enable</definition>
        <argsstring>(const uint32_t trap)</argsstring>
        <name>XMC_SCU_TRAP_Enable</name>
        <param>
          <type>const uint32_t</type>
          <declname>trap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trap</parametername>
</parameternamelist>
<parameterdescription>
<para>The event for which, trap generation has to be enabled.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga4de86b97726dc23fabd8c4e573b1bdb0" kindref="member">XMC_SCU_TRAP_t</ref> to identify the event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables assertion of trap for the selected trap event.<linebreak/>
<linebreak/>
Trap assertion can be individually enabled by clearing respective bit of the event in <emphasis>TRAPDIS</emphasis> register in order to get an exception. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gacfb00024734804883905d6a423f69a39" kindref="member">XMC_SCU_TRAP_Disable()</ref>, <ref refid="group___s_c_u_1ga6fef80ad14de7e792696cbd892b1ad26" kindref="member">XMC_SCU_TRAP_ClearStatus()</ref>, <ref refid="group___s_c_u_1gada772bc64ad61ae19612224ae7f3855c" kindref="member">XMC_SCU_TRAP_GetStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gada772bc64ad61ae19612224ae7f3855c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SCU_TRAP_GetStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_SCU_TRAP_GetStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t Status of trap generating events.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga4de86b97726dc23fabd8c4e573b1bdb0" kindref="member">XMC_SCU_TRAP_t</ref> to identify the event. The returned value indicates the status of multiple events at their respective bit positions. User should mask the bits of the events of interest using the type specified.</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Provides the status of trap generating events. <linebreak/>
<linebreak/>
The status is read from <emphasis>TRAPRAW</emphasis> register. Status of the specific events can be checked using their respective bits in the <emphasis>TRAPRAW</emphasis> register. The bit masks can be obtained from the enumeration type <ref refid="group___s_c_u_1ga4de86b97726dc23fabd8c4e573b1bdb0" kindref="member">XMC_SCU_TRAP_t</ref>. Multiple events can be combined using <emphasis>OR</emphasis> operation. A trap event is considered to be asserted if the respective bit of the event is set to 1. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref>, <ref refid="group___s_c_u_1ga6fef80ad14de7e792696cbd892b1ad26" kindref="member">XMC_SCU_TRAP_ClearStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1ga706f23b13aabcbcd5ad3ece9cf77a58f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_TRAP_Trigger</definition>
        <argsstring>(const uint32_t trap)</argsstring>
        <name>XMC_SCU_TRAP_Trigger</name>
        <param>
          <type>const uint32_t</type>
          <declname>trap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trap</parametername>
</parameternamelist>
<parameterdescription>
<para>The event for which, trap has to be triggered.<linebreak/>
 <bold>Range:</bold> Use type <ref refid="group___s_c_u_1ga4de86b97726dc23fabd8c4e573b1bdb0" kindref="member">XMC_SCU_TRAP_t</ref> to identify the event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Triggers trap generation for the event specified. <linebreak/>
<linebreak/>
The trap source has to be enabled before invocation of this API. Trap event can be triggered by setting its respective bit in the <emphasis>TRAPSET</emphasis> register. Trap event can be configured to generate a non maskable interrupt by using the API <ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref>.<linebreak/>
It is recommended to use following steps to manually assert a trap event:<linebreak/>
<itemizedlist>
<listitem><para>Call <emphasis>XMC_SCU_TRAP_EnableEvent</emphasis> with desired trap request source ID.<linebreak/>
</para>
</listitem><listitem><para>Call <emphasis>XMC_SCU_TRAP_SetEvent</emphasis> with same trap request source ID to manually assert a trap event.<linebreak/>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref>, <ref refid="group___s_c_u_1gada772bc64ad61ae19612224ae7f3855c" kindref="member">XMC_SCU_TRAP_GetStatus()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gad0681ca8911f106c0c9f6fd65db89e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_WriteGPR</definition>
        <argsstring>(const uint32_t index, const uint32_t data)</argsstring>
        <name>XMC_SCU_WriteGPR</name>
        <param>
          <type>const uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The SCU general purpose register to be written.<linebreak/>
 <bold>Range:</bold> 0 and 1 corresponding to GPR0 and GPR1. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written to the selected general purpose register.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Stores data in the selected general purpose SCU register.<linebreak/>
<linebreak/>
SCU consists of 2 general purpose registers. These registers can be used for storing data. The API writes data to either GPR0 or GPR1 based on the <emphasis>index</emphasis> value. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1gaa7000d0aa26ac656926b108b49e0f73d" kindref="member">XMC_SCU_ReadGPR()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_c_u_1gab835560fc4cd24d8f03043d39e52b5ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SCU_WriteToRetentionMemory</definition>
        <argsstring>(uint32_t address, uint32_t data)</argsstring>
        <name>XMC_SCU_WriteToRetentionMemory</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Location in the retention memory to be written.<linebreak/>
 <bold>Range:</bold> 4 bit address space is provided for selecting 16 words of 32 bits. equivalent to 64 bytes of data. <emphasis>address</emphasis> value should be from 0 to 15. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>32 bit data to be written into retention memory. The API writes one word(4 bytes) of data to the address specified.<linebreak/>
 <bold>Range:</bold> 32 bit data.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Writes input data to the selected address of Retention memory in hibernate domain.<linebreak/>
<linebreak/>
The retention memory is located in hibernate domain. It is used for the purpose of store/restore of context information. Access to the retention memory space is served over shared serial interface. Retention memory content is retained even in hibernate mode. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_c_u_1ga315dd2a00d282eddb3056118c86e6da9" kindref="member">XMC_SCU_ReadFromRetentionMemory()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="1291" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___s_c_u_1ga5b43f96dc025bf54a1d4e3cf761be131" prot="public" static="no">
        <name>PLL_K2DIV_XTAL_12MHZ</name>
        <initializer>(3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 12MHz */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="123" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga83883b17210c8cd127b1cda2ea514164" prot="public" static="no">
        <name>PLL_K2DIV_XTAL_16MHZ</name>
        <initializer>(3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 16MHz */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="127" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1gac8b1a976482c9ef6403801dafddaf27e" prot="public" static="no">
        <name>PLL_K2DIV_XTAL_8MHZ</name>
        <initializer>(2U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MHz */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="119" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga342aa8bc54ec1e9a2524dbccadce071b" prot="public" static="no">
        <name>PLL_NDIV_XTAL_12MHZ</name>
        <initializer>(79U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12MHz */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="122" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga93a164f60742179f2852f938252e048c" prot="public" static="no">
        <name>PLL_NDIV_XTAL_16MHZ</name>
        <initializer>(59U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16MHz */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="126" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1gaac6dfcd559d1adc605466f511e7d6856" prot="public" static="no">
        <name>PLL_NDIV_XTAL_8MHZ</name>
        <initializer>(89U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MHz */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="118" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga53e02c788773639aeae2b1f810cb9deb" prot="public" static="no">
        <name>PLL_PDIV_XTAL_12MHZ</name>
        <initializer>(1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12MHz */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="121" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga28cae7983f5fb3a48f84c8fcf7635ceb" prot="public" static="no">
        <name>PLL_PDIV_XTAL_16MHZ</name>
        <initializer>(1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16MHz */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="125" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1gac7ea63b7b6cdcac0883c6d23f252461a" prot="public" static="no">
        <name>PLL_PDIV_XTAL_8MHZ</name>
        <initializer>(1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MHz */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="117" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1gab645bf93d140a469fb94f5a50b81043c" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_DLR_OVERRUN</name>
        <initializer>SCU_INTERRUPT_SRSTAT_DLROVR_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DLR overrun event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="132" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga5350d7ebb5bdbec5b511a8bada81e418" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_HDCLR_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB HDCLR register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="160" column="18" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga7c1ff0412abb2208a9b5186760d86ef8" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_HDCR_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB HDCR register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="162" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga95958fca048b8558aca91badd5782e82" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_HDSET_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_HDSET_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB HDSET register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="161" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga502c7593b8fd66f1d2d566da69d35aa9" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_OSCSICTRL_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_OSCSICTRL_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB OSCSICTRL register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="163" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1gace9451749d951a975241a3f06a61f53c" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_OSCULCTRL_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB OSCULCTRL register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="164" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga9ec8f143f2c150b61329cbe4333ddc51" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_RMX_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_RMX_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB RMX register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="170" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1gab2de9ba5dfa78e350e552cc36529ad22" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_RTC_ALARM</name>
        <initializer>SCU_INTERRUPT_SRSTAT_AI_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RTC alarm event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="131" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga2b86e6490dd0310069274f042ef47625" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC</name>
        <initializer>SCU_INTERRUPT_SRSTAT_PI_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RTC periodic interrupt. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="130" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga33dc60f1ff3285386633b53623dca92b" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_RTC_ATIM0_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB RTCATIM0 register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="166" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga19a78d87581dbbf3db6f3f23ee4db98e" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_RTC_ATIM1_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB RTCATIM1 register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="167" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga07039df071591f92674bdd82fc735030" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_RTC_CTR_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB RTCCTR register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="165" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga34acc61e5b01e7f6b4ea1d7a9a9195c9" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_RTC_TIM0_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB TIM0 register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="168" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga7fcaa73f61c18ec8237e076da6c3bc0e" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED</name>
        <initializer>SCU_INTERRUPT_SRSTAT_RTC_TIM1_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HIB TIM1 register update event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="169" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_c_u_1ga61bedea1698b39bbd1fa3d2cd79a9f33" prot="public" static="no">
        <name>XMC_SCU_INTERRUPT_EVENT_WDT_WARN</name>
        <initializer>SCU_INTERRUPT_SRSTAT_PRWARN_Msk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Watchdog prewarning event. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" line="129" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc4_scu.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>System Control Unit(SCU) driver for XMC microcontroller family. </para>
    </briefdescription>
    <detaileddescription>
<para>System control unit is the SoC power, reset and a clock manager with additional responsibility of providing system stability protection and other auxiliary functions.<linebreak/>
 SCU provides the following features,<orderedlist>
<listitem><para>Power control</para>
</listitem><listitem><para>Hibernate control</para>
</listitem><listitem><para>Reset control</para>
</listitem><listitem><para>Clock control</para>
</listitem><listitem><para>Miscellaneous control(boot mode, system interrupts etc.)<linebreak/>
<linebreak/>
</para>
</listitem></orderedlist>
</para>
<para>The SCU driver is divided in to clock control logic, reset control logic, system interrupt control logic , hibernate control logic, trap control logic, parity control logic and miscellaneous control logic.<linebreak/>
</para>
<para>Clock driver features:<orderedlist>
<listitem><para>Allows clock configuration using the structure <ref refid="struct_x_m_c___s_c_u___c_l_o_c_k___c_o_n_f_i_g__t" kindref="compound">XMC_SCU_CLOCK_CONFIG_t</ref> and API <ref refid="group___s_c_u_1ga08c337e8a728604e7eb54dff78ae2d9d" kindref="member">XMC_SCU_CLOCK_Init()</ref></para>
</listitem><listitem><para>Provides structure <ref refid="struct_x_m_c___s_c_u___c_l_o_c_k___s_y_s_p_l_l___c_o_n_f_i_g__t" kindref="compound">XMC_SCU_CLOCK_SYSPLL_CONFIG_t</ref> for configuring the system PLL</para>
</listitem><listitem><para>Allows selection of clock source for system PLL, <ref refid="group___s_c_u_1ga00b75ab108bf4a3b1e153a339b77a62c" kindref="member">XMC_SCU_CLOCK_GetSystemPllClockSource()</ref></para>
</listitem><listitem><para>Provides APIs for configuring different module clock frequencies <ref refid="group___s_c_u_1ga8f338f60cac7809fafd01b0941d1a2c1" kindref="member">XMC_SCU_CLOCK_SetWdtClockDivider()</ref>, <ref refid="group___s_c_u_1ga6bfbeee9da8ba9c854c34fc5da9a7d7d" kindref="member">XMC_SCU_CLOCK_SetUsbClockDivider()</ref></para>
</listitem><listitem><para>Allows selection of clock source for external output, <ref refid="group___s_c_u_1gae0e95e282cd20159627d036941caf0c7" kindref="member">XMC_SCU_CLOCK_SetExternalOutputClockSource()</ref></para>
</listitem><listitem><para>Provides APIs for enabling external high power oscillator and ultra low power oscillator, <ref refid="group___s_c_u_1gad8179be793c17dda72a87dea440dd118" kindref="member">XMC_SCU_CLOCK_EnableHighPerformanceOscillator()</ref>, <ref refid="group___s_c_u_1gad827fd74357895b8387e896501f21579" kindref="member">XMC_SCU_CLOCK_EnableLowPowerOscillator()</ref></para>
</listitem><listitem><para>Provides APIs for getting various clock frequencies <ref refid="group___s_c_u_1ga55a1be4f0e96fcda7b2c0feb542af250" kindref="member">XMC_SCU_CLOCK_GetPeripheralClockFrequency()</ref>, <ref refid="group___s_c_u_1ga3e78410c4d0c9f9b54aa0965d16c3795" kindref="member">XMC_SCU_CLOCK_GetCpuClockFrequency()</ref>, <ref refid="group___s_c_u_1ga0a9fd5e87ad27c874c88706ba43772c2" kindref="member">XMC_SCU_CLOCK_GetSystemClockFrequency()</ref><linebreak/>
</para>
</listitem></orderedlist>
</para>
<para>Reset driver features:<orderedlist>
<listitem><para>Allows to handle peripheral reset <ref refid="group___s_c_u_1gab00fa5e7e6ed73767de6f80b9a849543" kindref="member">XMC_SCU_RESET_AssertPeripheralReset()</ref>, <ref refid="group___s_c_u_1gac88ad38d3473b139dafef29dc3ba5216" kindref="member">XMC_SCU_RESET_DeassertPeripheralReset()</ref></para>
</listitem><listitem><para>Allows configuration of NMI generation for selected events, <ref refid="group___s_c_u_1ga9595d70f3cb1cd35b236afdd058c5895" kindref="member">XMC_SCU_INTERRUPT_EnableNmiRequest()</ref> <linebreak/>
</para>
</listitem></orderedlist>
</para>
<para>Interrupt driver features:<orderedlist>
<listitem><para>Provides APIs for enabling/ disabling interrupt event generation <ref refid="group___s_c_u_1gab4cfb9545d1e561e1f24aeaa69af821c" kindref="member">XMC_SCU_INTERRUPT_EnableEvent()</ref>, <ref refid="group___s_c_u_1gaa814678729d6b7f41c558e768ba8ecd4" kindref="member">XMC_SCU_INTERRUPT_DisableEvent()</ref></para>
</listitem><listitem><para>Provides API for registering callback function for events <ref refid="group___s_c_u_1ga4ae03c6bcc3ccade266b46d84f7715e6" kindref="member">XMC_SCU_INTERRUPT_SetEventHandler()</ref><linebreak/>
</para>
</listitem></orderedlist>
</para>
<para>Hibernate driver features:<orderedlist>
<listitem><para>Allows configuration of hibernate domain <ref refid="group___s_c_u_1ga2f73953dadc8eaa2fad5e66a2c2e57a4" kindref="member">XMC_SCU_HIB_EnableHibernateDomain()</ref>, <ref refid="group___s_c_u_1gae5c8ea8d8a577e936a3dde5239966337" kindref="member">XMC_SCU_HIB_DisableHibernateDomain()</ref></para>
</listitem><listitem><para>Allows selection of standby clock source, <ref refid="group___s_c_u_1ga387a75bbd0299d99fd8f818d1ea9886a" kindref="member">XMC_SCU_HIB_SetStandbyClockSource()</ref></para>
</listitem><listitem><para>Allows selection of RTC clock source, <ref refid="group___s_c_u_1gadca7d1332ed62fda2a1a85550d12f06d" kindref="member">XMC_SCU_HIB_SetRtcClockSource()</ref></para>
</listitem><listitem><para>Provides API for enabling slow internal clock used for backup clock, <ref refid="group___s_c_u_1gadaa00ec6206d10e3840504ba592f5725" kindref="member">XMC_SCU_HIB_EnableInternalSlowClock()</ref><linebreak/>
</para>
</listitem></orderedlist>
</para>
<para>Trap driver features:<orderedlist>
<listitem><para>Allows handling of trap <ref refid="group___s_c_u_1ga51a3e55dedfde788f1ba5e3bad7fdb4e" kindref="member">XMC_SCU_TRAP_Enable()</ref>, <ref refid="group___s_c_u_1gada772bc64ad61ae19612224ae7f3855c" kindref="member">XMC_SCU_TRAP_GetStatus()</ref>, <ref refid="group___s_c_u_1ga706f23b13aabcbcd5ad3ece9cf77a58f" kindref="member">XMC_SCU_TRAP_Trigger()</ref><linebreak/>
</para>
</listitem></orderedlist>
</para>
<para>Parity driver features:<orderedlist>
<listitem><para>Parity error generated by on-chip RAM can be monitored, <ref refid="group___s_c_u_1gab020813ed43c4a858e3866254546aca3" kindref="member">XMC_SCU_PARITY_Enable()</ref>, <ref refid="group___s_c_u_1gabfb74be3c54ea80b2fd25d20e143a299" kindref="member">XMC_SCU_PARITY_GetStatus()</ref></para>
</listitem><listitem><para>Allows configuration of trap generation on detection of parity error, <ref refid="group___s_c_u_1gafef433d566f700f9106db98439af3f88" kindref="member">XMC_SCU_PARITY_EnableTrapGeneration()</ref></para>
</listitem></orderedlist>
</para>
<para>Power driver features:<orderedlist>
<listitem><para>Allows to power the USB module <ref refid="group___s_c_u_1ga4d0a5061d139bb8e136316a2fcc98bab" kindref="member">XMC_SCU_POWER_EnableUsb()</ref>, <ref refid="group___s_c_u_1gacf750b3451bbdd00820d54f25100bd75" kindref="member">XMC_SCU_POWER_DisableUsb()</ref></para>
</listitem></orderedlist>
</para>
<para>Miscellaneous features:<orderedlist>
<listitem><para>Allows to trigger multiple capture compare unit(CCU) channels to be started together <ref refid="group___s_c_u_1gac10ca2cd72477476ffe38a4818bcae4b" kindref="member">XMC_SCU_SetCcuTriggerHigh()</ref></para>
</listitem><listitem><para>Enables configuration of out of range comparator (ORC) <ref refid="group___s_c_u_1ga51d593608a5e056fb40c1cc2b340fb2a" kindref="member">XMC_SCU_EnableOutOfRangeComparator()</ref></para>
</listitem><listitem><para>Enables configuration of die temperature sensor <ref refid="group___s_c_u_1ga3f6a1e71b005175777c6dd9a069e325c" kindref="member">XMC_SCU_EnableTemperatureSensor()</ref>, <ref refid="group___s_c_u_1gacf86e99e8def2e37a0b484982e61256d" kindref="member">XMC_SCU_CalibrateTemperatureSensor()</ref></para>
</listitem><listitem><para>Enables configuration of device boot mode <ref refid="group___s_c_u_1ga3ebb50291e4fc5722746f2f40fadb6a8" kindref="member">XMC_SCU_SetBootMode()</ref><linebreak/>
 </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>

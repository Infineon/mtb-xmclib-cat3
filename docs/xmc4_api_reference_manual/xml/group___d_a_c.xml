<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group___d_a_c" kind="group">
    <compoundname>DAC</compoundname>
    <title>Digital to Analog Converter (DAC)</title>
    <innerclass refid="struct_x_m_c___d_a_c___c_h___c_o_n_f_i_g__t" prot="public">XMC_DAC_CH_CONFIG_t</innerclass>
    <innerclass refid="struct_x_m_c___d_a_c__t" prot="public">XMC_DAC_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___d_a_c_1gabed6dedd39e5a4e8b5b88c780de85ea9" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_DATA_TYPE_t</name>
        <enumvalue id="group___d_a_c_1ggabed6dedd39e5a4e8b5b88c780de85ea9a515ff00c5ccd8b9565257a0771347583" prot="public">
          <name>XMC_DAC_CH_DATA_TYPE_UNSIGNED</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input data is unsigned </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggabed6dedd39e5a4e8b5b88c780de85ea9a3258da7e193fc755383c480a337037ff" prot="public">
          <name>XMC_DAC_CH_DATA_TYPE_SIGNED</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>input data is signed </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Data type of the input data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="219" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1gab145218c4b905bdd94c85811b8ec7a2c" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_MODE_t</name>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cab60cc89d056f1e994f95e5cf0ab3ee3f" prot="public">
          <name>XMC_DAC_CH_MODE_IDLE</name>
          <initializer>= 0x0U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DAC is disabled </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caebed4f6d5058ad45ab0a93322898a102" prot="public">
          <name>XMC_DAC_CH_MODE_SINGLE</name>
          <initializer>= 0x1U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Single value mode - single data value is updated and maintained </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca9dae61c469e47cd75be8a9e9689d8393" prot="public">
          <name>XMC_DAC_CH_MODE_DATA</name>
          <initializer>= 0x2U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data mode - continuous data processing </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca00245fd95505e05d1c3cc6670265fef0" prot="public">
          <name>XMC_DAC_CH_MODE_PATTERN</name>
          <initializer>= 0x3U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Pattern mode - inbuilt pattern waveform generation - Sine, Triangle, Rectangle </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caf63f03eca43e965fba40285cb92e3e62" prot="public">
          <name>XMC_DAC_CH_MODE_NOISE</name>
          <initializer>= 0x4U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Noise mode - pseudo-random noise generation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cac6e5937740ac5cc3200c5f590e091fbf" prot="public">
          <name>XMC_DAC_CH_MODE_RAMP</name>
          <initializer>= 0x5U &lt;&lt; DAC_DAC0CFG0_MODE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ramp mode - ramp generation </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Operating modes of DAC </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="180" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="179" bodyend="188"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1gaf5e272a25affac666157d497783ccb2b" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_OUTPUT_NEGATION_t</name>
        <enumvalue id="group___d_a_c_1ggaf5e272a25affac666157d497783ccb2ba356969170b9cf3b7f70fd82d9bfe373a" prot="public">
          <name>XMC_DAC_CH_OUTPUT_NEGATION_DISABLED</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>XMC_DAC_CH_OUTPUT_NEGATION_DISABLED </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggaf5e272a25affac666157d497783ccb2ba42549ee202f4c08f9e638656ae320dbb" prot="public">
          <name>XMC_DAC_CH_OUTPUT_NEGATION_ENABLED</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>XMC_DAC_CH_OUTPUT_NEGATION_ENABLED </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Negation of input data (applicable only for XMC44 device) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="265" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_OUTPUT_SCALE_t</name>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007ae98552d53e632106ecf1ce567b570a47" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_NONE</name>
          <initializer>=
    0x0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No scaling </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a01ebb295f7321fddbaa3ec0a969bdad6" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_2</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x1U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a7e8a6467c766097010ce1c173715dbc8" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_4</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x2U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 4 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007aae6733f0486d9c306e749f222ef32e86" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_8</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x3U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 8 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a985ee78289a117a0f2277f8293385e50" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_16</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x4U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 16 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a6bcf2a549695fde6da39e76711f13f69" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_32</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x5U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 32 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a3d0fc15564713d3176a85f326c3c100a" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_64</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x6U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 64 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007af6b6551310573ea15e033fa2220ccea9" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_MUL_128</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_MULDIV_Pos) | (0x7U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>multiplied by 128 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a81b76aa6cd1039295158077f779bcfbe" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_2</name>
          <initializer>=
    0x1U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a097c24e5d23da7a32ae91d98ba51cc8e" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_4</name>
          <initializer>=
    0x2U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 4 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a677b0dc54045bcec45ed017b90585726" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_8</name>
          <initializer>=
    0x3U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 8 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a66927dc300c8176b545bb8b3ac886ef2" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_16</name>
          <initializer>=
    0x4U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 16 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a43798edd742ce7279d2604f9e9c51a44" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_32</name>
          <initializer>=
    0x5U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 32 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a23006b4a49f768550ba7ca5928344281" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_64</name>
          <initializer>=
    0x6U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 64 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007afed3adc5704981d3b3efab55fea9842a" prot="public">
          <name>XMC_DAC_CH_OUTPUT_SCALE_DIV_128</name>
          <initializer>=
    0x7U &lt;&lt; DAC_DAC0CFG1_SCALE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>divided by 128 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scaling of the input data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="228" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="227" bodyend="259"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1gaf1e4fb1ca9c2bad0de893feee98e6228" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t</name>
        <enumvalue id="group___d_a_c_1ggaf1e4fb1ca9c2bad0de893feee98e6228a4ae92975858953559259477d7de9274c" prot="public">
          <name>XMC_DAC_CH_PATTERN_SIGN_OUTPUT_DISABLED</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sign output signal generation is disabled </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1ggaf1e4fb1ca9c2bad0de893feee98e6228a4735536396880c1868745af9944ad12a" prot="public">
          <name>XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Sign output signal generation is enabled </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output sign signal for the Pattern Generation Mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="274" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="273" bodyend="277"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_STATUS_t</name>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4da4143bb37824ebceee0c840d12ed980ef" prot="public">
          <name>XMC_DAC_CH_STATUS_OK</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status is ok, no error detected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dab37b65d8effd30615d9e519bf684e647" prot="public">
          <name>XMC_DAC_CH_STATUS_ERROR</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Error detected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dab66a1d8173c7ca28c3f23d41f9bde504" prot="public">
          <name>XMC_DAC_CH_STATUS_BUSY</name>
          <initializer>= 2U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DAC is busy </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dae5e20892a46f623543cddfc268d55cf6" prot="public">
          <name>XMC_DAC_CH_STATUS_ERROR_FREQ2LOW</name>
          <initializer>= 3U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Frequency can&apos;t be configured. Frequency is to low. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga4e37be380b4227fc103ef44c765f2d4dabceea708468c56846195fb5a6336527b" prot="public">
          <name>XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH</name>
          <initializer>= 4U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Frequency can&apos;t be configured. Frequency is to high. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return types of the API&apos;s </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="168" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="167" bodyend="174"/>
      </memberdef>
      <memberdef kind="enum" id="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_DAC_CH_TRIGGER_t</name>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaf3c5c5c663d068867d11158e19e0c6e2" prot="public">
          <name>XMC_DAC_CH_TRIGGER_INTERNAL</name>
          <initializer>=
    (0x0U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal trigger as per frequency divider value </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaae8546e01f01037086fe41be6aeb3a07a" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | 0x0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from CCU80 Interrupt SR1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaa13dab51ee1d83ec23cfbe90deed07cb" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x2U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from CCU40 Interrupt SR1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa333a073d7997ad313e648b396c6fdbea" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x3U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from CCU41 Interrupt SR1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa44cd76b8737807422c8759b6ee6b8897" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x4U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from pin 2.9 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa2cfc68d782d6639fcfe359b7b9f1dee3" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x5U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from pin 2.8 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa0dd9de57bceb55915b0af6cb99fcfdac" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x6U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from USIC-0 DX1 Input Signal </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa5dd09d96ded088ce1f261e3446207a4d" prot="public">
          <name>XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS</name>
          <initializer>=
    (0x1U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos) | (0x7U &lt;&lt; DAC_DAC0CFG1_TRIGSEL_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger from USIC-1 DX1 Input Signal </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaad533a56154220c6844903436e8cc03a2" prot="public">
          <name>XMC_DAC_CH_TRIGGER_SOFTWARE</name>
          <initializer>=
    (0x2U &lt;&lt; DAC_DAC0CFG1_TRIGMOD_Pos)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Software trigger </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Trigger sources for the data update </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="194" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="193" bodyend="213"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___d_a_c_1ga7612bd7d9cc0ff5168d9db256442f894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_DisableEvent</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_DisableEvent</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables service request by clearing <emphasis>SREN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gac2e2a705070f03534b1b91ea873b0aab" kindref="member">XMC_DAC_CH_EnableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1147" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1147" bodyend="1153"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gac8fe5610029750fe602088229eb3337c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_DisableOutput</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_DisableOutput</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Channel <emphasis>channel</emphasis> output is disabled by clearing the <emphasis>ANAEN</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title></title><para>A call to this API stops driving the converted digital input to its output.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" kindref="member">XMC_DAC_CH_EnableOutput()</ref>, <ref refid="group___d_a_c_1ga18bb5866a5a41077e678ff8c7c6de58c" kindref="member">XMC_DAC_CH_IsOutputEnabled()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="543" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="543" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga901c74dfd9e06a0bdb4ead0d87bb4f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_DisableOutputNegation</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_DisableOutputNegation</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Description:</title><para>Disables output negation.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Negation is disabled by clearing <emphasis>NEGATE</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Negation feature is not applicable for XMC45 devices. Calling this API in XMC45 devices doesn&apos;t have any effect.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga8bf98abf89180297539722636ed9d51d" kindref="member">XMC_DAC_CH_EnableOutputNegation()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1281" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1281" bodyend="1287"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga1b40c57534700d37e8b70c2ea2f2eea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_DisablePatternSignOutput</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_DisablePatternSignOutput</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables output sign information for Pattern Mode.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Sign output is disabled by clearing <emphasis>SIGNEN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / DAC1CFG0 register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode()</ref>, <ref refid="group___d_a_c_1ga973af2e272600c5eeb163ee83579c738" kindref="member">XMC_DAC_CH_EnablePatternSignOutput()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="792" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="792" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gac2e2a705070f03534b1b91ea873b0aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_EnableEvent</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_EnableEvent</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables service request by setting <emphasis>SREN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1). Trigger signal is generated upon conversion of each data.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>The service request signal can be connected to NVIC, DMA.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga7612bd7d9cc0ff5168d9db256442f894" kindref="member">XMC_DAC_CH_DisableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1126" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1126" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_EnableOutput</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_EnableOutput</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Channel <emphasis>channel</emphasis> output is enabled by setting the <emphasis>ANAEN</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para><emphasis>tSTARTUP</emphasis> time for DAC analog output starts after the <emphasis>ANAEN</emphasis> bit is set to one. After the expiry of the startup time the default value is driven to DAC output and a new value can be written.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gac8fe5610029750fe602088229eb3337c" kindref="member">XMC_DAC_CH_DisableOutput()</ref>, <ref refid="group___d_a_c_1ga18bb5866a5a41077e678ff8c7c6de58c" kindref="member">XMC_DAC_CH_IsOutputEnabled()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="519" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="519" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga8bf98abf89180297539722636ed9d51d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_EnableOutputNegation</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_EnableOutputNegation</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Description:</title><para>Enables output negation.</para>
</simplesect>
<simplesect kind="par"><title></title><para>By negating the DAC value is converted to its two&apos;s complement values. Can be used in Ramp mode to generate negative ramp. Negation in enabled by setting <emphasis>NEGATE</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Negation feature is not applicable for XMC45 devices. Calling this API in XMC45 devices doesn&apos;t have any effect.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga901c74dfd9e06a0bdb4ead0d87bb4f71" kindref="member">XMC_DAC_CH_DisableOutputNegation()</ref>, <ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1256" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1256" bodyend="1262"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga973af2e272600c5eeb163ee83579c738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_EnablePatternSignOutput</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_EnablePatternSignOutput</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the output sign information for Pattern Mode.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Sign output is enabled by setting <emphasis>SIGNEN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / DAC1CFG0 register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode()</ref>, <ref refid="group___d_a_c_1ga1b40c57534700d37e8b70c2ea2f2eea3" kindref="member">XMC_DAC_CH_DisablePatternSignOutput()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="764" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="764" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga08350c8116ed004dd36f5ba0902df12d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_t</ref></type>
        <definition>XMC_DAC_CH_OUTPUT_SCALE_t XMC_DAC_CH_GetOutputScale</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_GetOutputScale</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_OUTPUT_SCALE_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns scaling information for the data. The input data could be either up-scaled (multiplied), down-scaled (divided) or without scaling (as is).<linebreak/>
Scaling factor is determined by reading bit-fields <emphasis>MULDIV</emphasis> and <emphasis>SCALE</emphasis> of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1229" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1229" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga3cd25ca6afe7a138dcb5bb42c449db0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t XMC_DAC_CH_GetRampStart</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_GetRampStart</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Gets the ramp start value by reading <emphasis>DATA0</emphasis> bit-field of <emphasis>DAC0DATA</emphasis> register (for channel 0) / <emphasis>DATA1</emphasis> bit-field of <emphasis>DAC1DATA</emphasis> register (for channel 1). If the ramp counter reaches its stop value, it restarts from the start value with the next trigger pulse.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Ramp mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gaf692f5b60cf4c74192b554ec88254aab" kindref="member">XMC_DAC_CH_SetRampStart()</ref>, <ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref>, <ref refid="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" kindref="member">XMC_DAC_CH_GetRampStop()</ref>, <ref refid="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" kindref="member">XMC_DAC_CH_SetRampStop()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="846" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="846" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t XMC_DAC_CH_GetRampStop</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_GetRampStop</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Gets the ramp stop value by reading <emphasis>DATA0</emphasis> bit-field of <emphasis>DAC01DATA</emphasis> register (for channel 0) / <emphasis>DATA1</emphasis> bit-field of <emphasis>DAC01DATA</emphasis> register (for channel 1). If the ramp counter reaches its stop value, it restarts from the start value with the next trigger pulse.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Ramp mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" kindref="member">XMC_DAC_CH_SetRampStop()</ref>, <ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref>, <ref refid="group___d_a_c_1ga3cd25ca6afe7a138dcb5bb42c449db0f" kindref="member">XMC_DAC_CH_GetRampStart()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="900" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="900" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_Init</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)</argsstring>
        <name>XMC_DAC_CH_Init</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_DAC_CH_CONFIG_t</ref> *const</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the DAC channel configuration structure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Initialises and configures the DAC <emphasis>channel</emphasis> with the configuration date pointed by <emphasis>config</emphasis>.</para>
</simplesect>
<simplesect kind="par"><title></title><para>DAC channel is initialised by configuring the registers <emphasis>DAC0CFG0</emphasis> and <emphasis>DAC0CFG1</emphasis> registers (for channel 0) / <emphasis>DAC1CFG0</emphasis> and <emphasis>DAC1CFG1</emphasis> registers (for channel 1). It enables the channel output by calling <ref refid="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" kindref="member">XMC_DAC_CH_EnableOutput()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga200437bd896ff475b50a8aa30aea0b42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_DAC_CH_IsFifoEmpty</definition>
        <argsstring>(const XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_IsFifoEmpty</name>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool<linebreak/>
true - if FIFO is empty<linebreak/>
false - if FIFO is not empty</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns FIFO status.</para>
</simplesect>
<simplesect kind="par"><title></title><para>FIFIO empty status is determined by reading <emphasis>FIFOEMP</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga73e8d8035927fad18c69a6adf9451ace" kindref="member">XMC_DAC_CH_IsFifoFull()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1333" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1333" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga73e8d8035927fad18c69a6adf9451ace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_DAC_CH_IsFifoFull</definition>
        <argsstring>(const XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_IsFifoFull</name>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool<linebreak/>
true - if FIFO is full<linebreak/>
false - if FIFO is not full</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns FIFO status.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title></title><para>FIFIO full status is determined by reading <emphasis>FIFOFUL</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga200437bd896ff475b50a8aa30aea0b42" kindref="member">XMC_DAC_CH_IsFifoEmpty()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1307" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1307" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga18bb5866a5a41077e678ff8c7c6de58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_DAC_CH_IsOutputEnabled</definition>
        <argsstring>(const XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_IsOutputEnabled</name>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool <linebreak/>
 true - if analog output is enabled <linebreak/>
 false - if analog output is disabled <linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the status of DAC analog output.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Channel <emphasis>channel</emphasis> output enabled or disabled is determined by reading the <emphasis>ANAEN</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" kindref="member">XMC_DAC_CH_EnableOutput()</ref>, <ref refid="group___d_a_c_1gac8fe5610029750fe602088229eb3337c" kindref="member">XMC_DAC_CH_DisableOutput()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="569" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="569" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_SetFrequency</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Waveform frequency in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>frequency</emphasis> of DAC channel.</para>
</simplesect>
<simplesect kind="par"><title></title><para>The value <emphasis>frequency</emphasis> acts as clock divider. The smallest <emphasis>frequency</emphasis> divider value is 16. A valid <emphasis>frequency</emphasis> value should be within the range XMC_DAC_MIN_FREQ_DIVIDER to XMC_DAC_MAX_FREQ_DIVIDER. A value outside this range is considered as in valid and API returns error. Frequency <emphasis>frequency</emphasis> is configured by setting <emphasis>FREQ</emphasis> bit-field of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API only for Single value mode, Data mode and Noise mode. Call <ref refid="group___d_a_c_1gabdf995111daf8c4495bf1d2ef2ce58e3" kindref="member">XMC_DAC_CH_SetRampFrequency()</ref> in case of Ramp mode and <ref refid="group___d_a_c_1ga592cefaf4c5cc8e2cd83a1fa5472845d" kindref="member">XMC_DAC_CH_SetPatternFrequency()</ref> in case of Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gabdf995111daf8c4495bf1d2ef2ce58e3" kindref="member">XMC_DAC_CH_SetRampFrequency()</ref>, <ref refid="group___d_a_c_1ga592cefaf4c5cc8e2cd83a1fa5472845d" kindref="member">XMC_DAC_CH_SetPatternFrequency()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="955" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga1774217be659f37d640d13d48816762f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)</argsstring>
        <name>XMC_DAC_CH_SetMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1gab145218c4b905bdd94c85811b8ec7a2c" kindref="member">XMC_DAC_CH_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC operation mode</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the operating <emphasis>mode</emphasis> for the <emphasis>channel</emphasis> by setting the <emphasis>MODE</emphasis> bit-field of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1). Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1023" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1023" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga1e1f75defe221c0db5b4133ca927e574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetOutputOffset</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint8_t offset)</argsstring>
        <name>XMC_DAC_CH_SetOutputOffset</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the offset value.<linebreak/>
Offset range:0 - 255<linebreak/>
interpreted as : -128 to 127 (twos complement) in signed mode and 0 to 255 in unsigned mode.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Scaling can be applied to the output data after adding the <emphasis>offset</emphasis> value.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Channel <emphasis>channel</emphasis> <emphasis>offset</emphasis> value is loaded to the bit-field <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1177" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1177" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetOutputScale</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_OUTPUT_SCALE_t scale)</argsstring>
        <name>XMC_DAC_CH_SetOutputScale</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9372c99ba8d8daa984786b8f042d4007" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_t</ref></type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scale</parametername>
</parameternamelist>
<parameterdescription>
<para>Input data scaling</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Data of the <emphasis>channel</emphasis> is scaled.</para>
</simplesect>
<simplesect kind="par"><title></title><para>The data can either be scaled up-scaled (multiplied), down-scaled (divided) or no scaling (as is) based on the value of <emphasis>scale</emphasis>. Scaling is configured by setting bit-fields <emphasis>MULDIV</emphasis> and <emphasis>SCALE</emphasis> of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1).</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga08350c8116ed004dd36f5ba0902df12d" kindref="member">XMC_DAC_CH_GetOutputScale()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1204" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1204" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gab3c155e1596241e323a06bd449674410" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetPattern</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint8_t *const pattern)</argsstring>
        <name>XMC_DAC_CH_SetPattern</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint8_t *const</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data table</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>The data for the Pattern mode is written to the <emphasis>DAC0PATL</emphasis> and <emphasis>DAC0PATH</emphasis> registers. The API is called by <ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga973af2e272600c5eeb163ee83579c738" kindref="member">XMC_DAC_CH_EnablePatternSignOutput()</ref>, <ref refid="group___d_a_c_1ga1b40c57534700d37e8b70c2ea2f2eea3" kindref="member">XMC_DAC_CH_DisablePatternSignOutput()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga592cefaf4c5cc8e2cd83a1fa5472845d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetPatternFrequency</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_SetPatternFrequency</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>frequency</emphasis> of DAC channel by calling <ref refid="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" kindref="member">XMC_DAC_CH_SetFrequency()</ref>.</para>
</simplesect>
<simplesect kind="par"><title></title><para>For the Pattern mode, the <emphasis>frequency</emphasis> of operation depends on the total number of sample points <emphasis>XMC_DAC_SAMPLES_PER_PERIOD</emphasis>. Frequency <emphasis>frequency</emphasis> is multiplied by the total number of sample points, so that each trigger instance converts all the sample points of the pattern.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API only if the <emphasis>channel</emphasis> is set to Pattern mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; DAC samples per period in pattern mode </para>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1001" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1001" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gabdf995111daf8c4495bf1d2ef2ce58e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_SetRampFrequency</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>[Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>frequency</emphasis> of DAC channel by calling <ref refid="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" kindref="member">XMC_DAC_CH_SetFrequency()</ref>.</para>
</simplesect>
<simplesect kind="par"><title></title><para>For the Ramp mode, the <emphasis>frequency</emphasis> of operation depends on the total number of sample points (<emphasis>stop</emphasis> - <emphasis>start</emphasis>). Frequency <emphasis>frequency</emphasis> is multiplied by the total number of sample points, so that each trigger instance converts all the sample points of ramp.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API only if the <emphasis>channel</emphasis> is set to Ramp mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="978" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gaf692f5b60cf4c74192b554ec88254aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetRampStart</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)</argsstring>
        <name>XMC_DAC_CH_SetRampStart</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Ramp start point [0-4095]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the ramp start value by writing to the register <emphasis>DAC0DATA</emphasis> (for <emphasis>channel</emphasis> 0) or <emphasis>DAC1DATA</emphasis> (for <emphasis>channel</emphasis> 1). If the ramp counter reaches its stop value, it restarts from the <emphasis>start</emphasis> value with the next trigger pulse. Ensure <emphasis>start</emphasis> value is lower than the stop value.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Ramp mode. Start value is a 12 bit data.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga3cd25ca6afe7a138dcb5bb42c449db0f" kindref="member">XMC_DAC_CH_GetRampStart()</ref>, <ref refid="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" kindref="member">XMC_DAC_CH_GetRampStop()</ref>, <ref refid="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" kindref="member">XMC_DAC_CH_SetRampStop()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="821" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="821" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetRampStop</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)</argsstring>
        <name>XMC_DAC_CH_SetRampStop</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Ramp stop point [0-4095]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the ramp stop value by writing to the bit-field <emphasis>DATA0</emphasis> (for <emphasis>channel</emphasis> 0) or <emphasis>DATA1</emphasis> (for <emphasis>channel</emphasis> 1) of <emphasis>DAC01DATA</emphasis> register. If the ramp counter reaches its <emphasis>stop</emphasis> value, it restarts from the start value with the next trigger pulse. Ensure <emphasis>stop</emphasis> value is higher than the start value.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call this API if the <emphasis>channel</emphasis> is set to Ramp mode. Stop value is a 12 bit data.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" kindref="member">XMC_DAC_CH_GetRampStop()</ref>, <ref refid="group___d_a_c_1gaf692f5b60cf4c74192b554ec88254aab" kindref="member">XMC_DAC_CH_SetRampStart()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="874" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="874" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga5b0260c72dc3e2772c589ec48ffd2c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetSignedDataType</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_SetSignedDataType</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel&apos;s</emphasis> data to signed type by setting <emphasis>SIGN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1). The data for the conversion would then be treated as signed data type.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Offset and scaling can be applied to the data by calling <ref refid="group___d_a_c_1ga1e1f75defe221c0db5b4133ca927e574" kindref="member">XMC_DAC_CH_SetOutputOffset()</ref>, <ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gae4aae1cc510efc383a66eb5c9d258769" kindref="member">XMC_DAC_CH_SetUnsignedDataType()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1050" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1050" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gac96c41befd18976b555d134013f231c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetTrigger</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)</argsstring>
        <name>XMC_DAC_CH_SetTrigger</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Trigger source</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Selects the <emphasis>trigger</emphasis> source for the <emphasis>channel</emphasis> by configuring the bits TRIGSEL &amp; TRIGMOD of CFG register.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Channel <emphasis>channel</emphasis> trigger source is selected by <emphasis>TRIGSEL</emphasis> bit-field of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / DAC1CFG1 register(for channel 1). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="922" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="922" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gae4aae1cc510efc383a66eb5c9d258769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SetUnsignedDataType</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_SetUnsignedDataType</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel&apos;s</emphasis> data to unsigned type by clearing <emphasis>SIGN</emphasis> bit of <emphasis>DAC0CFG0</emphasis> register (for channel 0) / <emphasis>DAC1CFG0</emphasis> register (for channel 1). The data for the conversion would then be treated as unsigned data type.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Offset and scaling can be applied to the data by calling <ref refid="group___d_a_c_1ga1e1f75defe221c0db5b4133ca927e574" kindref="member">XMC_DAC_CH_SetOutputOffset()</ref>, <ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga5b0260c72dc3e2772c589ec48ffd2c80" kindref="member">XMC_DAC_CH_SetSignedDataType()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1075" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1075" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga9620b8278dcabb391d7cf8b2b69f8311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_SoftwareTrigger</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_SoftwareTrigger</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>A call to this API generates a trigger pulse by setting <emphasis>SWTRIG</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register (for channel 0) / <emphasis>DAC1CFG1</emphasis> register (for channel 1), provided the <emphasis>TRIGMOD</emphasis> bit of CFG register is set to <emphasis>XMC_DAC_CH_TRIGGER_SOFTWARE</emphasis>.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>If the <emphasis>channel</emphasis> is set to simultaneous data mode, SWTRIG bit of <emphasis>channel</emphasis> 1 is not valid. Only <emphasis>SWTRIG</emphasis> bit of channel 0 is used for channel 1.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gac96c41befd18976b555d134013f231c3" kindref="member">XMC_DAC_CH_SetTrigger()</ref>, <ref refid="group___d_a_c_1gac2e2a705070f03534b1b91ea873b0aab" kindref="member">XMC_DAC_CH_EnableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="1101" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="1101" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_StartDataMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points update trigger </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Waveform frequency [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t status</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Data mode. Trigger and frequency are configured.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call <ref refid="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" kindref="member">XMC_DAC_CH_Write()</ref> API to write the data. Call <ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode()</ref> to switch to Simultaneous data mode.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref>, <ref refid="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" kindref="member">XMC_DAC_CH_Write()</ref>, <ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga8cdc0d2ae0c0d3e0ad8ed6babcbd4c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_StartNoiseMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points update trigger </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Waveform frequency in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t status</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Noise mode. Trigger and frequency are configured. On a <emphasis>trigger</emphasis> the DAC starts converting and drives to <emphasis>channel</emphasis> output.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="720" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartPatternMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint8_t *const pattern, const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output, const XMC_DAC_CH_TRIGGER_t trigger, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_StartPatternMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint8_t *const</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1gaf1e4fb1ca9c2bad0de893feee98e6228" kindref="member">XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t</ref></type>
          <declname>sign_output</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>Data table of a pattern </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign_output</parametername>
</parameternamelist>
<parameterdescription>
<para>Sign information of the waveform </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points update trigger </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Waveform frequency in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t status</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Pattern mode. Trigger, frequency, sign output and data are configured. On a <emphasis>trigger</emphasis>, the <emphasis>pattern</emphasis> values are converted and driven to <emphasis>channel</emphasis> output.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref>, <ref refid="group___d_a_c_1ga1b40c57534700d37e8b70c2ea2f2eea3" kindref="member">XMC_DAC_CH_DisablePatternSignOutput()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartRampMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start, const uint16_t stop, const XMC_DAC_CH_TRIGGER_t trigger, const uint32_t frequency)</argsstring>
        <name>XMC_DAC_CH_StartRampMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>const <ref refid="group___d_a_c_1ga9176e4c7b167ec22b5673e05ade18eba" kindref="member">XMC_DAC_CH_TRIGGER_t</ref></type>
          <declname>trigger</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Start point of the ramp [0-4095] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Stop point of the ramp [0-4095] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Data points update trigger </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Ramp frequency in [Hz]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_DAC_CH_STATUS_t status</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Ramp mode. Trigger, frequency, start and stop values are configured. On a <emphasis>trigger</emphasis> ramp values are converted and driven to <emphasis>channel</emphasis> output. Start and stop have the range of [0-4095]. Stop should be equal or greater than start.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>If the ramp counter reaches its <emphasis>stop</emphasis> value, it restarts from the <emphasis>start</emphasis> value with the next trigger pulse.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref>, <ref refid="group___d_a_c_1ga3cd25ca6afe7a138dcb5bb42c449db0f" kindref="member">XMC_DAC_CH_GetRampStart()</ref>, <ref refid="group___d_a_c_1ga5dd54e68ac3b4403aa5ba432f545f02e" kindref="member">XMC_DAC_CH_GetRampStop()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga6c8a12197978db3edc3216444faee6b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___d_a_c_1ga4e37be380b4227fc103ef44c765f2d4d" kindref="member">XMC_DAC_CH_STATUS_t</ref></type>
        <definition>XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel)</argsstring>
        <name>XMC_DAC_CH_StartSingleValueMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the <emphasis>channel</emphasis> to Single Value Mode by calling <ref refid="group___d_a_c_1ga1774217be659f37d640d13d48816762f" kindref="member">XMC_DAC_CH_SetMode()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Call <ref refid="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" kindref="member">XMC_DAC_CH_Write()</ref> API to write the data.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" kindref="member">XMC_DAC_CH_Write()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga8e3093f1aa4f47b0793ea0e992580040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_CH_Write</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t data)</argsstring>
        <name>XMC_DAC_CH_Write</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>DAC channel number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be written [0-4095]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Writes the <emphasis>data</emphasis> to the <emphasis>channel&apos;s</emphasis> DATA register.</para>
</simplesect>
<simplesect kind="par"><title></title><para>The <emphasis>data</emphasis> is then converted and driven to the output. If the trigger is set, On a trigger event the data in DATA register is converted and driven to <emphasis>channel</emphasis> output. Data <emphasis>data</emphasis> is written to the <emphasis>channel</emphasis> by loading <emphasis>data</emphasis> to <emphasis>DATA0</emphasis> bit-field of <emphasis>DAC0DATA</emphasis> (for channel 0) / <emphasis>DATA1</emphasis> bit-field of <emphasis>DAC1DATA</emphasis> register (for channel 1). data has the range of [0-4095].</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>The API can be used for Single Value Mode, Data Mode (Individual) &amp; Ramp Mode. Call <ref refid="group___d_a_c_1gaf3fe5631a70e40f4d25c473b553ed5af" kindref="member">XMC_DAC_CH_EnableOutput()</ref> API to enable analog output.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga6c8a12197978db3edc3216444faee6b8" kindref="member">XMC_DAC_CH_StartSingleValueMode()</ref>, <ref refid="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" kindref="member">XMC_DAC_CH_StartDataMode()</ref>, <ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="601" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="601" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga67de176f36749cba8a65ad1b9815f0dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_Disable</definition>
        <argsstring>(XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_Disable</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables DAC clock and resets DAC.</para>
</simplesect>
<simplesect kind="par"><title></title><para>DAC clock is disabled by setting <emphasis>DAC</emphasis> bit of <emphasis>CGATSET1</emphasis> register. DAC is reset by setting <emphasis>DACRS</emphasis> bit of <emphasis>PRSET1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gafdcd0136ab6dfc0d98d463136765ab69" kindref="member">XMC_DAC_IsEnabled()</ref>, <ref refid="group___d_a_c_1gab97383cd03ebb21046c403c5c835f55c" kindref="member">XMC_DAC_Enable()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gab9668535a4a093bd1a3eb36cbc474a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_DisableSimultaneousDataMode</definition>
        <argsstring>(XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_DisableSimultaneousDataMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>DAC switches to independent data mode from simultaneous Data mode.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Independent data mode is the default data mode. Simultaneous data mode is disabled by clearing <emphasis>DATMOD</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" kindref="member">XMC_DAC_CH_StartDataMode()</ref>, <ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="453" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="453" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gab97383cd03ebb21046c403c5c835f55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_Enable</definition>
        <argsstring>(XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_Enable</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables DAC clock and releases DAC reset.<linebreak/>
</para>
</simplesect>
<simplesect kind="par"><title></title><para>Enabling DAC is the first step of DAC initialisation. This API is called by <ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref>. DAC clock is enabled by setting <emphasis>DAC</emphasis> bit of <emphasis>CGATCLR1</emphasis> register. DAC reset is released by setting <emphasis>DACRS</emphasis> bit of <emphasis>PRCLR1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gafdcd0136ab6dfc0d98d463136765ab69" kindref="member">XMC_DAC_IsEnabled()</ref>, <ref refid="group___d_a_c_1ga67de176f36749cba8a65ad1b9815f0dd" kindref="member">XMC_DAC_Disable()</ref>, <ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_EnableSimultaneousDataMode</definition>
        <argsstring>(XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_EnableSimultaneousDataMode</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>DAC switches to Simultaneous data mode from Independent data mode.</para>
</simplesect>
<simplesect kind="par"><title></title><para>Independent data mode is the default data mode. Simultaneous data mode is enabled by setting <emphasis>DATMOD</emphasis> bit of <emphasis>DAC0CFG1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Set channel 0 and channel 1 to Data mode before calling this API.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga6c8a12197978db3edc3216444faee6b8" kindref="member">XMC_DAC_CH_StartSingleValueMode()</ref>, <ref refid="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" kindref="member">XMC_DAC_CH_StartDataMode()</ref>, <ref refid="group___d_a_c_1ga81b11cead3aaabed68b046d40628f89d" kindref="member">XMC_DAC_SimultaneousWrite()</ref>, <ref refid="group___d_a_c_1gab9668535a4a093bd1a3eb36cbc474a9f" kindref="member">XMC_DAC_DisableSimultaneousDataMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="430" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="430" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1gafdcd0136ab6dfc0d98d463136765ab69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_DAC_IsEnabled</definition>
        <argsstring>(const XMC_DAC_t *const dac)</argsstring>
        <name>XMC_DAC_IsEnabled</name>
        <param>
          <type>const <ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool<linebreak/>
 true - if DAC is enabled<linebreak/>
 false - if DAC is disabled</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the state of the DAC.</para>
</simplesect>
<simplesect kind="par"><title></title><para>DAC enabled status is determined by referring to <emphasis>DACRS</emphasis> bit of <emphasis>PRSTAT1</emphasis> register.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1gab97383cd03ebb21046c403c5c835f55c" kindref="member">XMC_DAC_Enable()</ref>, <ref refid="group___d_a_c_1ga67de176f36749cba8a65ad1b9815f0dd" kindref="member">XMC_DAC_Disable()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c_1ga81b11cead3aaabed68b046d40628f89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_DAC_SimultaneousWrite</definition>
        <argsstring>(XMC_DAC_t *const dac, const uint16_t data0, const uint16_t data1)</argsstring>
        <name>XMC_DAC_SimultaneousWrite</name>
        <param>
          <type><ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *const</type>
          <declname>dac</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>data0</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>data1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dac</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an instance of DAC module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data0</parametername>
</parameternamelist>
<parameterdescription>
<para>Data for DAC channel 0 [0-4095] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data1</parametername>
</parameternamelist>
<parameterdescription>
<para>Data for DAC channel 1 [0-4095]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>The data (<emphasis>data0</emphasis> &amp; <emphasis>data1</emphasis>) to be converted by channel 0 &amp; channel 1 are updated to <emphasis>DATA1</emphasis> bit-fields of <emphasis>DAC01DATA</emphasis> register. data0 and data1 have the range of [0-4095].</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Channel 0 and Channel 1 should be set to simultaneous data mode before calling this API.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="478" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="478" bodyend="483"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___d_a_c_1gafc2efa750fdd4aedbaa5be736a28400e" prot="public" static="no">
        <name>XMC_DAC0</name>
        <initializer>((<ref refid="struct_x_m_c___d_a_c__t" kindref="compound">XMC_DAC_t</ref> *)DAC_BASE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DAC module register base </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="116" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gab813b33cdf9d40f046283a1b4e6feea4" prot="public" static="no">
        <name>XMC_DAC_DACCFG_NEGATE_Msk</name>
        <initializer>(0x10000000UL) /*&lt; DAC negation enable mask in XMC44 device */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="118" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga66217cfe3a783cdb0103e0ad86817e5f" prot="public" static="no">
        <name>XMC_DAC_IS_CHANNEL_VALID</name>
        <param><defname>CH</defname></param>
        <initializer>(CH &lt; <ref refid="group___d_a_c_1gaca090211fa47a1235a81308382f7241c" kindref="member">XMC_DAC_NO_CHANNELS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="127" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga2ea47447513a439b8cb61098456eff23" prot="public" static="no">
        <name>XMC_DAC_IS_DAC_VALID</name>
        <param><defname>PTR</defname></param>
        <initializer>((PTR) == <ref refid="group___d_a_c_1gafc2efa750fdd4aedbaa5be736a28400e" kindref="member">XMC_DAC0</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="126" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga999b18a418cf42fc5306d9bdd3460dc7" prot="public" static="no">
        <name>XMC_DAC_IS_MODE_VALID</name>
        <param><defname>MODE</defname></param>
        <initializer>((MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cab60cc89d056f1e994f95e5cf0ab3ee3f" kindref="member">XMC_DAC_CH_MODE_IDLE</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caebed4f6d5058ad45ab0a93322898a102" kindref="member">XMC_DAC_CH_MODE_SINGLE</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca9dae61c469e47cd75be8a9e9689d8393" kindref="member">XMC_DAC_CH_MODE_DATA</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2ca00245fd95505e05d1c3cc6670265fef0" kindref="member">XMC_DAC_CH_MODE_PATTERN</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2caf63f03eca43e965fba40285cb92e3e62" kindref="member">XMC_DAC_CH_MODE_NOISE</ref>) ||\
                                              (MODE == <ref refid="group___d_a_c_1ggab145218c4b905bdd94c85811b8ec7a2cac6e5937740ac5cc3200c5f590e091fbf" kindref="member">XMC_DAC_CH_MODE_RAMP</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="137" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gaf4b72f33f37ade76e586364d47542bee" prot="public" static="no">
        <name>XMC_DAC_IS_OUTPUT_SCALE_VALID</name>
        <param><defname>SCALE</defname></param>
        <initializer>((SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007ae98552d53e632106ecf1ce567b570a47" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_NONE</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a01ebb295f7321fddbaa3ec0a969bdad6" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_2</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a7e8a6467c766097010ce1c173715dbc8" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_4</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007aae6733f0486d9c306e749f222ef32e86" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_8</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a985ee78289a117a0f2277f8293385e50" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_16</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a6bcf2a549695fde6da39e76711f13f69" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_32</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a3d0fc15564713d3176a85f326c3c100a" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_64</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007af6b6551310573ea15e033fa2220ccea9" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_MUL_128</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a81b76aa6cd1039295158077f779bcfbe" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_2</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a097c24e5d23da7a32ae91d98ba51cc8e" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_4</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a677b0dc54045bcec45ed017b90585726" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_8</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a66927dc300c8176b545bb8b3ac886ef2" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_16</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a43798edd742ce7279d2604f9e9c51a44" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_32</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007a23006b4a49f768550ba7ca5928344281" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_64</ref>) ||\
                                              (SCALE == <ref refid="group___d_a_c_1gga9372c99ba8d8daa984786b8f042d4007afed3adc5704981d3b3efab55fea9842a" kindref="member">XMC_DAC_CH_OUTPUT_SCALE_DIV_128</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="143" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gada64ad16bfc8f312f56378244d2a1344" prot="public" static="no">
        <name>XMC_DAC_IS_TRIGGER_VALID</name>
        <param><defname>TRIGGER</defname></param>
        <initializer>((TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaf3c5c5c663d068867d11158e19e0c6e2" kindref="member">XMC_DAC_CH_TRIGGER_INTERNAL</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaae8546e01f01037086fe41be6aeb3a07a" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_CCU80_SR1</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaaa13dab51ee1d83ec23cfbe90deed07cb" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_CCU40_SR1</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa333a073d7997ad313e648b396c6fdbea" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_CCU41_SR1</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa44cd76b8737807422c8759b6ee6b8897" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_P2_9</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa2cfc68d782d6639fcfe359b7b9f1dee3" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_P2_8</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa0dd9de57bceb55915b0af6cb99fcfdac" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_U0C0_DX1INS</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaa5dd09d96ded088ce1f261e3446207a4d" kindref="member">XMC_DAC_CH_TRIGGER_EXTERNAL_U1C0_DX1INS</ref>) ||\
                                              (TRIGGER == <ref refid="group___d_a_c_1gga9176e4c7b167ec22b5673e05ade18ebaad533a56154220c6844903436e8cc03a2" kindref="member">XMC_DAC_CH_TRIGGER_SOFTWARE</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="128" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gaca090211fa47a1235a81308382f7241c" prot="public" static="no">
        <name>XMC_DAC_NO_CHANNELS</name>
        <initializer>(2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DAC maximum channels </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="119" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga98fe05010708becbd4f109ccee7088b3" prot="public" static="no">
        <name>XMC_DAC_PATTERN_RECTANGLE</name>
        <initializer>{31U, 31U, 31U, 31U, 31U, 31U, 31U, 31U, 31U}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>First quarter Rectangle waveform samples </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="124" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1ga13c819b94bc1c769a4c879825accd83d" prot="public" static="no">
        <name>XMC_DAC_PATTERN_SINE</name>
        <initializer>{0U, 6U, 12U, 17U, 22U, 26U, 29U, 30U, 31U}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>First quarter Sine waveform samples </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="123" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gacb2705c3a364d91468f4a4f47f7d5145" prot="public" static="no">
        <name>XMC_DAC_PATTERN_TRIANGLE</name>
        <initializer>{0U, 4U, 8U, 12U, 16U, 19U, 23U, 27U, 31U}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>First quarter Triangle waveform samples </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="122" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c_1gaed680bf1e0aacea27ca505c00822eef9" prot="public" static="no">
        <name>XMC_DAC_SAMPLES_PER_PERIOD</name>
        <initializer>(32U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DAC samples per period in pattern mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" line="120" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_dac.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Digital to Analog Converter (DAC) driver for XMC 4000 microcontroller family. <linebreak/>
 </para>
    </briefdescription>
    <detaileddescription>
<para>DAC driver uses DAC peripheral to convert digital value to analog value. XMC4000 microcontroller family has two DAC channels of 12-bit resolution and maximum conversion rate of 2MHz with full accuracy and 5MHz with reduced accuracy. It consists of inbuilt pattern generator, ramp generator and noise generator modes. Additionally, waveforms can be generated by configuring data registers in single value mode and in data mode. It has DMA handling capability to generate custom waveforms in data mode without CPU intervention.</para>
<para>DAC driver features:<orderedlist>
<listitem><para>Configuration structure <ref refid="struct_x_m_c___d_a_c___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_DAC_CH_CONFIG_t</ref> and initialization function <ref refid="group___d_a_c_1ga94d6569836131b45c58c039fd2fa6a04" kindref="member">XMC_DAC_CH_Init()</ref> to initialize DAC and configure channel settings</para>
</listitem><listitem><para>Pattern Generator Mode:<itemizedlist>
<listitem><para>DAC is configured in pattern generator mode using <ref refid="group___d_a_c_1ga9c8c3079b34269e1190e067c34a55f48" kindref="member">XMC_DAC_CH_StartPatternMode()</ref></para>
</listitem><listitem><para><ref refid="group___d_a_c_1gab3c155e1596241e323a06bd449674410" kindref="member">XMC_DAC_CH_SetPattern()</ref> is used to set the waveform pattern values in pattern register for one quarter</para>
</listitem><listitem><para>Allows to change the trigger frequency using <ref refid="group___d_a_c_1ga592cefaf4c5cc8e2cd83a1fa5472845d" kindref="member">XMC_DAC_CH_SetPatternFrequency()</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Single Value Mode:<itemizedlist>
<listitem><para>DAC is configured in single value mode using <ref refid="group___d_a_c_1ga6c8a12197978db3edc3216444faee6b8" kindref="member">XMC_DAC_CH_StartSingleValueMode()</ref></para>
</listitem><listitem><para>Allows to change the trigger frequency using <ref refid="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" kindref="member">XMC_DAC_CH_SetFrequency()</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Data Mode:<itemizedlist>
<listitem><para>DAC is configured in data mode using <ref refid="group___d_a_c_1ga34d4edcff18efbc8893148120362a589" kindref="member">XMC_DAC_CH_StartDataMode()</ref></para>
</listitem><listitem><para>Allows to change the trigger frequency using <ref refid="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" kindref="member">XMC_DAC_CH_SetFrequency()</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Ramp Mode:<itemizedlist>
<listitem><para>DAC is configured in ramp generator mode using <ref refid="group___d_a_c_1ga1301e3dd09e47e4e81934de759675230" kindref="member">XMC_DAC_CH_StartRampMode()</ref></para>
</listitem><listitem><para>Allows to change the trigger frequency using <ref refid="group___d_a_c_1gabdf995111daf8c4495bf1d2ef2ce58e3" kindref="member">XMC_DAC_CH_SetRampFrequency()</ref></para>
</listitem><listitem><para>Allows to set the start and stop values of the ramp using <ref refid="group___d_a_c_1gaf692f5b60cf4c74192b554ec88254aab" kindref="member">XMC_DAC_CH_SetRampStart()</ref> and <ref refid="group___d_a_c_1gafe44b3910c68e67808aa372a4c6c86ce" kindref="member">XMC_DAC_CH_SetRampStop()</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Noise Mode:<itemizedlist>
<listitem><para>DAC is configured in noise mode using <ref refid="group___d_a_c_1ga8cdc0d2ae0c0d3e0ad8ed6babcbd4c04" kindref="member">XMC_DAC_CH_StartNoiseMode()</ref></para>
</listitem><listitem><para>Allows to change the trigger frequency using <ref refid="group___d_a_c_1gacdcfe6cd44bef3ebd95f96998604fec1" kindref="member">XMC_DAC_CH_SetFrequency()</ref></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Allows to change the scale, offset dynamically using <ref refid="group___d_a_c_1gabc5544309ce97e7edf14b950e72ffa3d" kindref="member">XMC_DAC_CH_SetOutputScale()</ref> and <ref refid="group___d_a_c_1ga1e1f75defe221c0db5b4133ca927e574" kindref="member">XMC_DAC_CH_SetOutputOffset()</ref> respectively</para>
</listitem><listitem><para>Allows to select one of the eight possible trigger sources using <ref refid="group___d_a_c_1gac96c41befd18976b555d134013f231c3" kindref="member">XMC_DAC_CH_SetTrigger()</ref></para>
</listitem><listitem><para>2 DAC channels can be used in synchronization in single value mode and data mode to generate two analog outputs in sync. <ref refid="group___d_a_c_1ga4c81d639c99a26cebaeea3b20947a15c" kindref="member">XMC_DAC_EnableSimultaneousDataMode()</ref> </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>

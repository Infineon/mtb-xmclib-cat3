<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="page_personalities_reference" kind="page">
    <compoundname>page_personalities_reference</compoundname>
    <title>Personalities Reference</title>
    <detaileddescription>
<sect1 id="page_personalities_reference_1section_personality_introduction">
<title>Personality Introduction</title>
<para>The XMC Peripheral Library includes a set of files to enable the ModusToolbox™ Device Configurator functionality. These files are known as personalities. They describe the GUI to the microcontroller hardware resources for the Device Configurator in the xml format. Each hardware resource of a microcontroller has its own personality.<linebreak/>
 Based on the user settings, personalities generate initialization code (configuration structures and initialization API calls) executed within the init_cycfg_all() function. The init_cycfg_all() function is usually executed within the cybsp_init() function or may be called directly in the main() function by the user. The system clock personalities generate a strong definition of the SystemCoreClockSetup() function executed at a startup (before jumping to main.c, not within the init_cycfg_all() unlike other ModusToolbox™ PDL products).</para><para>For more details, refer to:<linebreak/>
<itemizedlist>
<listitem><para>ModusToolbox™ <ulink url="../../../output/tools_3.1/device-configurator/docs/device-configurator.pdf"><bold>Device Configurator user guide.</bold> </ulink> <linebreak/>
</para></listitem><listitem><para>ModusToolbox™ <ulink url="https://www.infineon.com/dgdl/Infineon-ModusToolbox_Device_Configurator_Guide_(Version_2.20)-Software-v01_00-EN.pdf?fileId=8ac78c8c7e7124d1017ed92244542bab&amp;utm_source=cypress&amp;utm_medium=referral&amp;utm_campaign=202110_globe_en_all_integration-files"><bold>Device Configurator guide.</bold> </ulink> <linebreak/>
</para></listitem></itemizedlist>
</para><sect2 id="page_personalities_reference_1subsection_personality_common_groups">
<title>Common Groups</title>
<para>The parameters of microcontroller resources are allocated in groups. Most of the personalities have groups named:<bold> Documentation, Connections, Advanced.</bold></para><para><anchor id="page_personalities_reference_1paragraph_personality_documentation"/><simplesect kind="par"><title>Documentation</title><para><parblock><para>The &quot;Documentation&quot; group displays one or more links to the documentation:<itemizedlist>
<listitem><para><bold>API Help:</bold> is the link to the application programing interface (API) documentation of the hardware resource to which the current displayed personality is related.</para></listitem><listitem><para><bold>Personality Help:</bold> is the link to the documentation of the current personality. </para></listitem></itemizedlist>
</para></parblock></para></simplesect>
</para><para><anchor id="page_personalities_reference_1paragraph_personality_connections"/><simplesect kind="par"><title>Connections</title><para><parblock><para>The &quot;Connections&quot; group contains the parameters, which link different personalities and different hardware resources. This way, configurations chains are formed. <linebreak/>
 </para></parblock></para></simplesect>
</para><para><anchor id="page_personalities_reference_1paragraph_personality_advanced"/><simplesect kind="par"><title>Advanced</title><para><parblock><para>The &quot;Advanced&quot; group may contain all or one of the listed parameters:</para><para><itemizedlist>
<listitem><para><bold>Start After Initialization:</bold> If enabled, the peripheral will start at the end of the peripheral initialization.</para></listitem><listitem><para><bold>Store Config in Flash:</bold> Controls whether the configuration structure is stored in flash (const, true) or SRAM (not const, false). </para></listitem></itemizedlist>
</para></parblock></para></simplesect>
</para></sect2>
</sect1>
<sect1 id="page_personalities_reference_1section_personality_pin">
<title>Pin Personality</title>
<para>The pins of the Pin personality for XMC family microcontrollers do not generate service requests. This feature is determined by the hardware architecture of the XMC family.<linebreak/>
 However, pins can be configured as event resources for the Event Request Unit (ERU), and ERU will generate a service request instead of Pin.<linebreak/>
</para><para>To adjust an Interrupt from a pin (GPIO) requires the adjustments by the configurations chain: <ref refid="page_personalities_reference_1section_personality_pin" kindref="member">Pin</ref> - <ref refid="page_personalities_reference_1subsection_personality_ers" kindref="member">ERU_ERS</ref> - <ref refid="page_personalities_reference_1subsection_personality_etl" kindref="member">ERU_ETL</ref> - <ref refid="page_personalities_reference_1subsection_personality_ogu" kindref="member">ERU_OGU/Service Request</ref>. <image type="html" name="pin_interrupt_config.png" width="70%"></image>
</para><para>Refer to the <ref refid="page_personalities_reference_1section_personality_eru" kindref="member">ERU Personality</ref> section for Interrupt configuration details. <linebreak/>
 Refer to the API reference <ref refid="group___g_p_i_o" kindref="compound">General Purpose Input Output (GPIO)</ref> for the API details. <linebreak/>
 Refer to the device Datasheet and Reference Manual for HW details.</para></sect1>
<sect1 id="page_personalities_reference_1section_personality_eru">
<title>ERU Personality</title>
<para>The Event Request Unit (ERU) architecture includes three subunits: Event Request Select (ERS), Event Trigger Logic (ETL), and Output Gating Unit (OGU).<linebreak/>
 Thus, the ERU personality is represented as the three personalities of the ERU subunits. <linebreak/>
</para><para>For more details, refer to:<linebreak/>
<itemizedlist>
<listitem><para><ref refid="group___e_r_u_1brief_pdlapi_eru" kindref="member">ERU Detailed Description</ref> from the API reference.<linebreak/>
</para></listitem><listitem><para>XMC 1000, XMC 4000 <ulink url="https://www.infineon.com/dgdl/Infineon-ERU-XMC1000_XMC4000-AP32306-AN-v01_00-EN.pdf?fileId=5546d4624e765da5014ed914180d1c24"><bold>Event Request Unit (ERU)</bold> </ulink> Application Note. <linebreak/>
</para></listitem></itemizedlist>
</para><sect2 id="page_personalities_reference_1subsection_personality_ers">
<title>ERS Personality</title>
<para>The ERS personality provides a graphical interface to connect a corresponding ERS input channel to a specific event source, to determine the ERS output signal Combination Logic, and to connect an ERS unit with a corresponding ETL unit.</para><para><image type="html" name="ers_personality_connections.png" width="55%"></image>
 After ERS is set, the next step of the ERU adjustment by the configuration chain is configuration of the <ref refid="page_personalities_reference_1subsection_personality_etl" kindref="member">ETL</ref>.</para></sect2>
<sect2 id="page_personalities_reference_1subsection_personality_etl">
<title>ETL Personality</title>
<para>The ETL personality provides a graphical interface to determine the conditions of incoming signal processing. If the incoming signal satisfies the conditions defined by the &quot;Edge Detection&quot; parameter, the signal is regarded as a true event.<linebreak/>
 The event generates a trigger, whose distribution path to OGU is also controlled by the parameters of the ETL personality GUI. <linebreak/>
</para><para><image type="html" name="etl_personality_connections.png" width="53%"></image>
 To continue ERU adjustments, go to the <ref refid="page_personalities_reference_1subsection_personality_ogu" kindref="member">OGU</ref> personality configuration by the configuration chain.</para></sect2>
<sect2 id="page_personalities_reference_1subsection_personality_ogu">
<title>OGU Personality.</title>
<para>An OGU unit combines trigger events and status information and gates the Output. The OGU personality provides a graphical interface to determine in which way that will occurs. <simplesect kind="note"><para>The OGU settings may be set so that an event of one Input will lead to reactions on several Outputs.</para></simplesect>
OGU Outputs may be used as triggers for the other units, for example, to DMA.<linebreak/>
 An OGU reaction may be setting the service request generation. To enable the service request generation, check the &quot;Pattern Detection&quot; parameter. <linebreak/>
</para><para><image type="html" name="ogu_personality_connections.png" width="70%"></image>
</para><para>Refer to the API reference <ref refid="group___e_r_u" kindref="compound">Event Request Unit (ERU)</ref> for the API details.<linebreak/>
 Refer to the XMC 1000, XMC 4000 <ulink url="https://www.infineon.com/dgdl/Infineon-ERU-XMC1000_XMC4000-AP32306-AN-v01_00-EN.pdf?fileId=5546d4624e765da5014ed914180d1c24"><bold>Event Request Unit (ERU)</bold> </ulink> Application Note. <linebreak/>
 Refer to the device Datasheet and Reference Manual for HW details.</para></sect2>
</sect1>
<sect1 id="page_personalities_reference_1section_personality_eth">
<title>ETH Personality</title>
<para><simplesect kind="note"><para>The Ethernet personality has version 0.5 due to the limitations listed below.<linebreak/>
 These limitations will be removed in version 1.0. </para></simplesect>
</para><para>The Ethernet MAC (ETH) personality provides a graphical interface to configure the ETH hardware module.<linebreak/>
 The settings collected in the ETH Personality GUI allow to configure only part of the consumer&apos;s Ethernet application - the physical layer (PHY) and data exchange layer, see the picture below.</para><para><image type="html" name="eth_persinality_inOSI_model.png" width="20%"></image>
</para><para>The network and protocol layers, as well as their configuration, must be implemented by the user in their application. The initialization code generated by the ETH personality is a basic template for the user application or for a code example from the manufacturer.<linebreak/>
</para><para>When the ETH Personality connects to a project, an informational message displays in the Notice List pane.</para><para><image type="html" name="eth_personality_permanentMSG.png" width="40%"></image>
</para><para>The message reminds the user to make additional settings (global preprocessor #define) for the MTB project after completing the settings in the Device Configurator.<linebreak/>
 After performing this additional definition, the function call will become available:<linebreak/>
 <emphasis><bold>XMC_ETH_PHY_Init((XMC_ETH_MAC_t*)&amp;myETH_mac, MyETH_PHY_ADDR, &amp;myETH_phy_config);</bold></emphasis><linebreak/>
</para><para>The global #define can be made in several ways:<linebreak/>
<orderedlist>
<listitem><para>correct the &quot;DEFINES=&quot; string from the &quot;Advanced Configuration&quot; section in &quot;Makefile&quot; located in the root directory of the project.<linebreak/>
</para></listitem><listitem><para>correct the &quot;BSP_DEFINES:=&quot; string at the beginning of &quot;bsp.mk&quot; located in the &quot;./bsps/TARGET_APP...&quot; directory of the project.<linebreak/>
</para></listitem><listitem><para>configure the project properties by clicking the project/C++ General Include Path, Macros etc. User Setting Entries).<linebreak/>
</para></listitem></orderedlist>
</para><para>The ETH personality configurations allow the user to configure the usage of one of the three PHY device drivers included in the XMClib or create their own driver for an alternative PHY device.</para><para>The interface between the microcontroller and the PHY device may be configured by the personality settings. This may be either an RMII or MII interface. The RMII interface is always available for configuration, but the MII interface is only available for MCUs with more than 100 pins.</para><para>After selecting the “Enable Autonegotiation” and/or “Poll Received Data”, messages display in the Notice List pane to inform the user to implement such functionality on their own.</para><para><image type="html" name="eth_personality_temporaryMSG.png" width="60%"></image>
</para><para>The selection of the &quot;Receive Broadcast Frames&quot; and &quot;Enable Promiscuous Mode&quot; options just adds function calls to the generated code without displaying messages for the user. <simplesect kind="note"><para>In addition to the global definition of the PHY device, after completing the ETH Personality settings and code generation by the Device Configurator, it is necessary to additionally initialize the fields (<emphasis><bold>.rx_desc, .tx_desc, .rx_buf, .tx_buf</bold></emphasis>) of the structure <emphasis><bold>myETH_mac</bold></emphasis>.<linebreak/>
 The correct addresses of declared arrays must be placed in the structure. The arrays must be independently declared by the user and have a separate attribute to place the arrays into the specialized “ETH_RAM” memory section:<linebreak/>
 <bold><emphasis>static <computeroutput>__attribute__</computeroutput>((aligned(4))) <ref refid="struct_x_m_c___e_t_h___m_a_c___d_m_a___d_e_s_c__t" kindref="compound">XMC_ETH_MAC_DMA_DESC_t</ref> myETH_MTL_rx_desc[myETH_MTL_NUM_RX_BUF] <computeroutput>__attribute__</computeroutput>((section (&quot;ETH_RAM&quot;)));</emphasis></bold><linebreak/>
 <bold><emphasis>static <computeroutput>__attribute__</computeroutput>((aligned(4))) <ref refid="struct_x_m_c___e_t_h___m_a_c___d_m_a___d_e_s_c__t" kindref="compound">XMC_ETH_MAC_DMA_DESC_t</ref> myETH_MTL_tx_desc[myETH_MTL_NUM_TX_BUF] <computeroutput>__attribute__</computeroutput>((section (&quot;ETH_RAM&quot;)));</emphasis></bold><linebreak/>
 <bold><emphasis>static <computeroutput>__attribute__</computeroutput>((aligned(4))) uint8_t myETH_MTL_rx_buf[myETH_MTL_NUM_RX_BUF][XMC_ETH_MAC_BUF_SIZE] <computeroutput>__attribute__</computeroutput>((section (&quot;ETH_RAM&quot;)));</emphasis></bold><linebreak/>
 <bold><emphasis>static <computeroutput>__attribute__</computeroutput>((aligned(4))) uint8_t myETH_MTL_tx_buf[myETH_MTL_NUM_TX_BUF][XMC_ETH_MAC_BUF_SIZE] <computeroutput>__attribute__</computeroutput>((section (&quot;ETH_RAM&quot;)));</emphasis></bold><linebreak/>
 </para></simplesect>
</para><para><simplesect kind="note"><para>That specialized memory section must be described in a linker command file which placed in &quot;./bsps/TARGET_APP.../&quot; directory.<linebreak/>
 <image type="html" name="eth_ram_section_definition.png"></image>
  </para></simplesect>
</para><para>Refer to the API reference <ref refid="group___e_t_h___m_a_c" kindref="compound">Ethernet MAC (ETH_MAC)</ref> and <ref refid="group___e_t_h___p_h_y" kindref="compound">Ethernet PHY (ETH_PHY)</ref> for the API details.<linebreak/>
 Refer to the device Datasheet and Reference Manual for HW details.</para></sect1>
<sect1 id="page_personalities_reference_1section_personality_ccu4">
<title>CCU4 Personality</title>
<para>There are two major revisions: 1.0 and 2.0.</para><para>CCU4 1.0 is legacy and contains old-style EVENT_HANDLER definitions, which are deprecated and not recommended for usage in new applications.</para><para>CCU4 1.0 is left in XMCLib for the backward compatibility with already created projects not to be updated by the user.</para><para>The CCU4 1.0 support will be removed in the next major XMCLib revision.</para><para>CCU4 2.0 is almost the same as 1.0 but without the deprecated items, so it is recommended for new applications.</para><sect2 id="page_personalities_reference_1subsection_ccu_codeGen">
<title>Code Generation</title>
<para>Modern INTERRUPT_HANDLER definitions recommended for usage in applications are generated instead of the deprecated items:</para><para><image type="html" name="ccu4_sr0_setting.png"></image>
 <image type="html" name="ccu4_sr0_handler.png"></image>
 These newly generated definitions can be used in the application code, for example for the xmc4xxx devices: <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyCCU4_SR0_INTERRUPT_HANDLER(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___c_c_u4_1ga40dd61be60dc66c77164829280181e90" kindref="member">XMC_CCU4_SLICE_ClearEvent</ref>(MyCCU4Slice_HW,<sp/><ref refid="group___c_c_u4_1gga9b6b22c75755089c6c4038de4a5d213ca1110754891260f416e50d1ad2bb30930" kindref="member">XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH</ref>);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>and for enabling the CCU4 interrupt before starting the block: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>NVIC_EnableIRQ(MyCCU4_SR0_IRQN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___c_c_u4_1ga9997bb59706a4034e3e3be33a4935a7c" kindref="member">XMC_CCU4_SLICE_StartTimer</ref>(MyCCU4Slice_HW);</highlight></codeline>
</programlisting> Refer to the API reference <ref refid="group___c_c_u4" kindref="compound">Capture Compare Unit 4(CCU4)</ref> for the API details.</para><para>Refer to the device Datasheet and Reference Manual for the HW details.</para></sect2>
</sect1>
<sect1 id="page_personalities_reference_1section_personality_dsd">
<title>DSD Personality</title>
<para>The general DSD block configuration structure: <image type="html" name="dsd_settings_general.png"></image>
</para><para>The single channel GUI configurates a separate DSD channel: <image type="html" name="dsd_configuration_advanced.png"></image>
 The Trigger (Integrator) settings are available for Advanced Preconfiguration Mode only.</para><sect2 id="page_personalities_reference_1subsection_dsd_codeGen">
<title>Code Generation</title>
<para>Note that all the public generated code items are prefixed with the name given in the Device Configurator: <image type="html" name="dsd_instName.png"></image>
 The personality generates a base address, channel ID, and interrupt-related macros that can be used in the application code: <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyDSD_MAIN_FILTER_INTERRUPT_HANDLER(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___d_s_d_1gac3e92415ba18b5bcedb454bc02409631" kindref="member">XMC_DSD_ClearResultEventFlag</ref>(MyDSD_HW,<sp/>MyDSD_CH_ID);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyDSD_AUX_FILTER_INTERRUPT_HANDLER(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___d_s_d_1ga14280e89324e1fb9adaa379d8e10b9fa" kindref="member">XMC_DSD_ClearAlarmEventFlag</ref>(MyDSD_HW,<sp/>MyDSD_CH_ID);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>and then, for enabling the DSD interrupts and starting the block itself: <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>NVIC_EnableIRQ(MyDSD_MAIN_FILTER_IRQN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>NVIC_EnableIRQ(MyDSD_AUX_FILTER_IRQN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___d_s_d_1gaf8ff4a18539762c79d68125f7298ccfe" kindref="member">XMC_DSD_Start</ref>(MyDSD_HW,<sp/>MyDSD_CH_ID);</highlight></codeline>
</programlisting> Refer to the API reference <ref refid="group___d_s_d" kindref="compound">Delta Sigma Demodulator (DSD)</ref> for the API details.</para><para>Refer to the device Datasheet and Reference Manual for the HW details.</para></sect2>
</sect1>
<sect1 id="page_personalities_reference_1section_personality_hrpwm">
<title>HRPWM Personality</title>
<sect2 id="page_personalities_reference_1subsection_personality_hrpwm_csg">
<title>Comparator &amp; Slope Generation Unit (CSG)</title>
<para>The personality provides the following functionalities using the CSG peripheral:<orderedlist>
<listitem><para>Inverting the comparator output.</para></listitem><listitem><para>Blanking the comparator output.</para></listitem><listitem><para>Clamping the comparator output.</para></listitem><listitem><para>Slope generation in Decrementing mode.</para></listitem><listitem><para>Slope generation in Incrementing mode.</para></listitem><listitem><para>Slope generation in Triangle mode.</para></listitem><listitem><para>Updating the slope start and stop value.</para></listitem></orderedlist>
</para></sect2>
<sect2 id="page_personalities_reference_1subsection_personality_hrpwm_hrc">
<title>High Resolution Channel (HRC)</title>
<para>The personality provides the following functionalities using the CCU8 and HRC peripherals:<orderedlist>
<listitem><para>PWM signal generation on the selected port pins.</para></listitem><listitem><para>Setting the required frequency of operation and initial duty cycle with the high-resolution positioning.</para></listitem><listitem><para>Start the PWM unit after initialization or at a later time as required.</para></listitem><listitem><para>Operate the PWM in Single shot or Continuous mode.</para></listitem><listitem><para>Start multiple timers in the kernel synchronously.</para></listitem><listitem><para>Generate PWM in Edge/Center aligned, Symmetric/Asymmetric mode.</para></listitem><listitem><para>Select the passive state of the output.</para></listitem><listitem><para>Connect up-to-three external event signals. The following functions can be implemented:<itemizedlist>
<listitem><para>External Start</para></listitem><listitem><para>External Stop</para></listitem><listitem><para>External Count Direction</para></listitem><listitem><para>External Gating</para></listitem><listitem><para>External Count</para></listitem><listitem><para>External Load</para></listitem><listitem><para>External Modulation</para></listitem><listitem><para>External Override (Level)</para></listitem><listitem><para>External Trap</para></listitem></itemizedlist>
</para></listitem><listitem><para>Enable the period match or compare match events.</para></listitem><listitem><para>Generate dead time between complementary outputs.</para></listitem><listitem><para>Generate up-to-two PWMs with CCU8 and HRC slices.</para></listitem></orderedlist>
</para><para>The next figure shows the functional overview of the PWM generation. The period match (PM) value is calculated based on the frequency and the compare match (CM) is calculated based on the duty cycle. The PWM state changes at the period and compare matches. <image type="html" name="hrpwm_overview.png">Overview of PWM generation</image>
 </para></sect2>
<sect2 id="page_personalities_reference_1subsection_personality_hrpwm_edge_symmetric">
<title>CCU8 in Edge Aligned Symmetric Mode of Operation</title>
<para>In this mode, we can use the 2 compare registers to generate 2 pairs of complementary outputs, which means a total of 4 outputs. The minimum duty that can be generated is 0% and the maximum is 100%. Here, the output is initially LOW until a compare match occurs. The output remains HIGH until a next match occurs. <image type="html" name="hrpwm_edge_symmetric.png">CCU8 in Edge Aligned Symmetric Mode</image>
 <bold>Example with XMC4400:</bold></para><para><formula id="0">$ Clock = 120MHz. $</formula></para><para><formula id="1">$ Prescaler = 0. $</formula></para><para><formula id="2">$ Required\:frequency\:of\:operation\:(F) = 100KHz. $</formula></para><para><formula id="3">$ Duty\:required\:(D) = 30\%. $</formula></para><para><formula id="4">$ Period = \frac{Clock}{(1 \texttt{&lt;&lt;} Prescaler) \cdot F} $</formula></para><para><formula id="5">$ Cmp_{reg} = \frac{Period \cdot (100 - D)}{100} $</formula></para><para><formula id="6">$ Period = \frac{120,000,000}{(1 \texttt{&lt;&lt;} 0) \cdot 100,000} $</formula></para><para><formula id="7">$ Period = 1200 $</formula> <ensp/> Note: The value loaded to period register is <formula id="8">$ (Period - 1) $</formula>, i.e. <formula id="9">$ 1199. $</formula></para><para><formula id="10">$ Cmp_{reg} = \frac{1200 \cdot (100 - 30)}{100} $</formula></para><para><formula id="11">$ Cmp_{reg} = 840 $</formula> <linebreak/>
 <linebreak/>
 </para></sect2>
<sect2 id="page_personalities_reference_1subsection_personality_hrpwm_center_symmetric">
<title>CCU8 in Center Aligned Symmetric Mode of Operation</title>
<para>In this mode, we can use the 2 compare registers to generate 2 pairs of complementary outputs, which means a total of 4 outputs. The minimum duty that can be generated is 0% and the maximum is 100%. Here, the output is initially LOW. When a compare match occurs during the timer up-counting, the output is set HIGH. The output remains HIGH until a compare match occurs again during the timer down-counting. Here, we can see that the ON time of channel 1 and channel 2 are aligned to the time period center. <image type="html" name="hrpwm_center_symmetric.png">CCU8 in Center Aligned Symmetric Mode</image>
 <bold>Example with XMC4400:</bold></para><para><formula id="0">$ Clock = 120MHz. $</formula></para><para><formula id="1">$ Prescaler = 0. $</formula></para><para><formula id="2">$ Required\:frequency\:of\:operation\:(F) = 100KHz. $</formula></para><para><formula id="3">$ Duty\:required\:(D) = 30\%. $</formula></para><para><formula id="12">$ Period = \frac{Clock}{(1 \texttt{&lt;&lt;} Prescaler) \cdot 2F} $</formula></para><para><formula id="5">$ Cmp_{reg} = \frac{Period \cdot (100 - D)}{100} $</formula></para><para><formula id="13">$ Period = \frac{120,000,000}{(1 \texttt{&lt;&lt;} 0) \cdot 2 \cdot 100,000} $</formula></para><para><formula id="14">$ Period = 600 $</formula> <ensp/> Note: The value loaded to period register is <formula id="8">$ (Period - 1) $</formula>, i.e. <formula id="15">$ 599. $</formula></para><para><formula id="16">$ Cmp_{reg} = \frac{600 \cdot (100 - 30)}{100} $</formula></para><para><formula id="17">$ Cmp_{reg} = 420 $</formula> <linebreak/>
 <linebreak/>
 </para></sect2>
<sect2 id="page_personalities_reference_1subsection_personality_hrpwm_edge_asymmetric">
<title>CCU8 in Edge Aligned Asymmetric Mode of Operation</title>
<para>In this mode, we can use the 2 compare registers to generate 1 pair of complementary outputs, which means a total of 2 outputs. The minimum duty that can be generated is 0% and the maximum is 100%. Here, the output remains LOW until a channel 1 compare match occurs. This duration can be called &quot;shift&quot;. The output remains HIGH until a channel 2 compare match occurs. This duration is determined by the duty. The condition is that the channel 2 register value is required to be greater that the channel 1 register value. This allows us to place the ON time anywhere in the time period, as long as the limiting conditions are met. <image type="html" name="hrpwm_edge_asymmetric.png">CCU8 in Edge Aligned Asymmetric Mode</image>
 <bold>Example with XMC4400:</bold></para><para><formula id="0">$ Clock = 120MHz. $</formula></para><para><formula id="1">$ Prescaler = 0. $</formula></para><para><formula id="2">$ Required\:frequency\:of\:operation\:(F) = 100KHz. $</formula></para><para><formula id="18">$ Shift\:required\:(S) = 40\%. $</formula></para><para><formula id="3">$ Duty\:required\:(D) = 30\%. $</formula></para><para><formula id="4">$ Period = \frac{Clock}{(1 \texttt{&lt;&lt;} Prescaler) \cdot F} $</formula></para><para><formula id="19">$ Cmp_{reg1} = \frac{Period \cdot S}{100} $</formula></para><para><formula id="20">$ Cmp_{reg2} = \frac{Period \cdot (S + D)}{100} $</formula></para><para><formula id="6">$ Period = \frac{120,000,000}{(1 \texttt{&lt;&lt;} 0) \cdot 100,000} $</formula></para><para><formula id="7">$ Period = 1200 $</formula> <ensp/> Note: The value loaded to period register is <formula id="8">$ (Period - 1) $</formula>, i.e. <formula id="9">$ 1199. $</formula></para><para><formula id="21">$ Cmp_{reg1} = \frac{1200 \cdot 40}{100} $</formula></para><para><formula id="22">$ Cmp_{reg1} = 480 $</formula></para><para><formula id="23">$ Cmp_{reg2} = \frac{1200 \cdot (40 + 30)}{100} $</formula></para><para><formula id="24">$ Cmp_{reg2} = 840 $</formula> <linebreak/>
 <linebreak/>
 </para></sect2>
<sect2 id="page_personalities_reference_1subsection_personality_hrpwm_center_asymmetric">
<title>CCU8 in Center Aligned Asymmetric Mode of Operation</title>
<para>In this mode, we can use the 2 compare registers to generate 1 pair of complementary outputs, which means a total of 2 outputs. The minimum duty that can be generated is 0% and the maximum is 100%. Here, the output remains LOW until a channel 1 compare match occurs in the timer up-counting. This duration can be called &quot;shift&quot;. The output remains HIGH until a channel 2 compare match occurs during the timer down-counting. This duration is determined by the duty. <image type="html" name="hrpwm_center_asymmetric.png">CCU8 in Center Aligned Asymmetric Mode</image>
 <bold>Example with XMC4400:</bold></para><para><formula id="0">$ Clock = 120MHz. $</formula></para><para><formula id="1">$ Prescaler = 0. $</formula></para><para><formula id="2">$ Required\:frequency\:of\:operation\:(F) = 100KHz. $</formula></para><para><formula id="18">$ Shift\:required\:(S) = 40\%. $</formula></para><para><formula id="25">$ Duty\:required\:(D) = 40\%. $</formula></para><para><formula id="12">$ Period = \frac{Clock}{(1 \texttt{&lt;&lt;} Prescaler) \cdot 2F} $</formula></para><para><formula id="26">$ Cmp_{reg1} = \frac{2 \cdot Period \cdot S}{100} $</formula></para><para><formula id="27">$ Cmp_{reg2} = \frac{2 \cdot Period \cdot (100 - (S + D))}{100} $</formula></para><para><formula id="13">$ Period = \frac{120,000,000}{(1 \texttt{&lt;&lt;} 0) \cdot 2 \cdot 100,000} $</formula></para><para><formula id="14">$ Period = 600 $</formula> <ensp/> Note: The value loaded to period register is <formula id="8">$ (Period - 1) $</formula>, i.e. <formula id="15">$ 599. $</formula></para><para><formula id="28">$ Cmp_{reg1} = \frac{2 \cdot 600 \cdot 40}{100} $</formula></para><para><formula id="22">$ Cmp_{reg1} = 480 $</formula></para><para><formula id="29">$ Cmp_{reg2} = \frac{2 \cdot 600 \cdot (40 + 40)}{100} $</formula></para><para><formula id="30">$ Cmp_{reg2} = 480 $</formula> <linebreak/>
 <linebreak/>
 </para></sect2>
<sect2 id="page_personalities_reference_1subsection_personality_hrpwm_ccu8">
<title>CCU8 with HRPWM Mode of Operation</title>
<para><image type="html" name="hrpwm_ccu8.png">CCU8</image>
 <bold>Example with XMC4400:</bold></para><para><formula id="31">$ Period = 10. $</formula></para><para><formula id="32">$ Duty\:required\:(D) = 60\%. $</formula></para><para><formula id="5">$ Cmp_{reg} = \frac{Period \cdot (100 - D)}{100} $</formula></para><para><formula id="33">$ Cmp_{reg} = \frac{10 \cdot (100 - 60)}{100} $</formula></para><para><formula id="34">$ Cmp_{reg} = 4 $</formula></para><para>Now let us say:</para><para><formula id="35">$ Duty\:required\:(D) = 65\%. $</formula></para><para><formula id="36">$ Cmp_{reg} = \frac{10 \cdot (100 - 65)}{100} = 3.5 &amp;cong; 3 $</formula></para><para>With compare register 3, we get a duty of 70%. Therefore, we are not able to get a duty of 65% with a period of 10. Hence, need to use the HRPWM module. <image type="html" name="hrpwm_ccu8_hi_res.png">CCU8 with HRPWM</image>
 The CCU8 output is fed to the HRPWM module. The HRPWM module has two registers - CR1 and CR2. CR1 delays the rising edge of the output, whereas CR2 extends the falling edge of the output. The High Resolution module has a resolution of 150 Pico second. We can achieve the positioning of the output in the step of 150ps. Thus, by configuring the CR1, CR2 registers we can achieve finer generation of the shift and duty. Refer to the reference manual to determine the minimum and maximum duty cycle feasible with the HRPWM module.</para><para>Refer to the API reference <ref refid="group___h_r_p_w_m" kindref="compound">High Resolution PWM Unit (HRPWM)</ref> for the API details.</para><para>Refer to the device Datasheet and Reference Manual for the HW details.</para></sect2>
</sect1>
<sect1 id="page_personalities_reference_1section_personality_posif">
<title>POSIF Personality</title>
<sect2 id="page_personalities_reference_1subsection_personality_posif_qd">
<title>Quadrature Decoder Mode</title>
<para>Quadrature Decoder mode is used to find the position and speed of the motor using the incremental encoder. The profile is designed so that it can estimate the angle by consuming 3 CCU4 slices and an optional CCU4 slice along with POSIF and its interconnections.</para><para>Four CCU4 slices are consumed for the following purposes:<orderedlist>
<listitem><para>Position Counter<linebreak/>
<itemizedlist>
<listitem><para>Set the slice to be in Counter mode, which starts ticking based on encoder pulses to provide the absolute position:</para></listitem><listitem><para>Connect the Status Signal of the Position Counter CCU4 to an optional Revolution Counter CCU4 slice Event 0 Input Signal.</para></listitem><listitem><para>Set the Count Function of the Revolution Counter CCU4 slice to Triggered by Event 0.</para></listitem><listitem><para>Set the Event 0 Edge Selection of the Revolution Counter CCU4 slice to Signal Active on Falling Edge.</para></listitem><listitem><para>Set the Event 0 Level Selection of the Revolution Counter CCU4 slice to Active on the High Level.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Revolution Counter (optional)<linebreak/>
<itemizedlist>
<listitem><para>Set the slice to be in Counter mode, which ticks based on the Position Counter period match (Falling edge of ST signal).</para></listitem></itemizedlist>
</para></listitem><listitem><para>Time Between Ticks<linebreak/>
<itemizedlist>
<listitem><para>The slice to measure time between ticks for the angle extrapolation.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Time Stamp Trigger<linebreak/>
<itemizedlist>
<listitem><para>The slice to generate a trigger at the time stamp point when the angle extrapolation is required.</para></listitem><listitem><para>Connect the Status Signal of the Time Stamp Trigger CCU4 slice to the Position Counter and Revolution Counter CCU4 slices Event 2 Input Signal, and the Time Between Ticks CCU4 slice Event 1 Input Signal.</para></listitem><listitem><para>Set the Capture 0 Function of the Position Counter and Revolution Counter CCU4 slices to Triggered by Event 2 and set the Capture 1 Function for the Time Between Ticks CCU4 slice to Triggered by Event 1.</para></listitem><listitem><para>Set the Event 2 Edge Selection of the Position Counter and Revolution Counter as well as Event 1 Edge Selection of the Time Between Ticks CCU4 slices to Signal Active on Falling Edge.</para></listitem><listitem><para>Set the Event 2 Level Selection of the Position Counter and Revolution Counter as well as Event 1 Level Selection of the Time Between Ticks CCU4 slices to Active on High Level.</para></listitem></itemizedlist>
</para></listitem></orderedlist>
</para><para>The POSIF module and its interconnection with CCU4 are depicted in the following diagram: <image type="html" name="posif_encoder_structure.png"></image>
</para></sect2>
<sect2 id="page_personalities_reference_1subsection_personality_posif_hsm">
<title>Hall Sensor Mode</title>
<para>Hall Sensor mode is used to find the position and speed of the motor using 2 or 3 hall sensors. The POSIF personality in Hall Sensor mode uses two CCU4 slices - one to add a phase delay and one to capture the time between two correct hall patterns.</para><para>The personality supports 3 hall sensors and 2 hall sensors in the following use cases:<orderedlist>
<listitem><para>Find the speed and position for the PMSM motor: In this use case, the speed and position of the PMSM motor is obtained based on the hall sensor input. It is used in the PMSM motor control, which drives the inverter as per SVM algorithm.</para></listitem><listitem><para>Find the speed and position for the BLDC motor: In this use case, the speed and position of the BLDC motor is obtained based on the hall sensor input. It is used in the BLDC motor control, which drives the inverter as per multi-channel pattern sequence.</para></listitem></orderedlist>
</para><para>Refer to the API reference <ref refid="group___p_o_s_i_f" kindref="compound">Position Interface Unit (POSIF)</ref> for the API details.</para><para>Refer to the device Datasheet and Reference Manual for the HW details.</para></sect2>
</sect1>
<sect1 id="page_personalities_reference_1section_personality_wdt">
<title>WDT Personality</title>
<para>The Window boundaries configuration: <image type="html" name="wdt_window.png"></image>
 <image type="html" name="wdt_window_cfg.png"></image>
</para><para>The Pre-Warning Alarm interrupt configuration: <image type="html" name="wdt_prewarn.png"></image>
 <image type="html" name="wdt_prewarn_cfg.png"></image>
</para><sect2 id="page_personalities_reference_1subsection_wdt_codeGen">
<title>Code Generation</title>
<para>The configurator performs the [name]_EventHandler registration in the generated code, so declare it in the application code, for example for the xmc4xxx devices: <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NMI_Handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___s_c_u_1ga9ba1ce317ce89edfea107893fbd8a0be" kindref="member">XMC_SCU_IRQHandler</ref>((uint32_t)SCU_0_IRQn);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyWDT_EventHandler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___w_d_t_1ga5ce909e8a079938c30259381a993d316" kindref="member">XMC_WDT_Service</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting>and then start the block itself (the rest of configurations are performed in the generated code): <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___w_d_t_1gad01935f7e01dcc6697efe642d64e0053" kindref="member">XMC_WDT_Start</ref>();</highlight></codeline>
</programlisting> Refer to the API reference <ref refid="group___w_d_t" kindref="compound">Watchdog driver (WDT)</ref> for the API details.</para><para>Refer to the device Datasheet and Reference Manual for HW details. </para></sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>

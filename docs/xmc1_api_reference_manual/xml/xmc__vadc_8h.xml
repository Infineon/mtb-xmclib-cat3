<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="xmc__vadc_8h" kind="file" language="C++">
    <compoundname>xmc_vadc.h</compoundname>
    <includes local="yes">xmc_common.h</includes>
    <includes refid="xmc__scu_8h" local="yes">xmc_scu.h</includes>
    <includes local="yes">xmc_vadc_map.h</includes>
    <incdepgraph>
      <node id="128">
        <label>xmc_common.h</label>
      </node>
      <node id="129">
        <label>xmc_scu.h</label>
        <link refid="xmc__scu_8h"/>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>xmc_vadc_map.h</label>
      </node>
      <node id="127">
        <label>xmc_vadc.h</label>
        <link refid="xmc__vadc_8h"/>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
      </node>
      <node id="130">
        <label>xmc1_scu.h</label>
        <link refid="xmc1__scu_8h"/>
        <childnode refid="128" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_x_m_c___v_a_d_c___c_h_a_n_n_e_l___c_o_n_f_i_g__t" prot="public">XMC_VADC_CHANNEL_CONFIG_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___d_e_t_a_i_l_e_d___r_e_s_u_l_t__t" prot="public">XMC_VADC_DETAILED_RESULT_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_a_s_s__t" prot="public">XMC_VADC_GLOBAL_CLASS_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_o_c_k__t" prot="public">XMC_VADC_GLOBAL_CLOCK_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_o_n_f_i_g__t" prot="public">XMC_VADC_GLOBAL_CONFIG_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___d_e_t_a_i_l_e_d___r_e_s_u_l_t__t" prot="public">XMC_VADC_GLOBAL_DETAILED_RESULT_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___s_h_s___c_o_n_f_i_g__t" prot="public">XMC_VADC_GLOBAL_SHS_CONFIG_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" prot="public">XMC_VADC_GROUP_CLASS_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_o_n_f_i_g__t" prot="public">XMC_VADC_GROUP_CONFIG_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t" prot="public">XMC_VADC_GROUP_EMUXCFG_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___c_o_n_f_i_g__t" prot="public">XMC_VADC_QUEUE_CONFIG_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___e_n_t_r_y__t" prot="public">XMC_VADC_QUEUE_ENTRY_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___r_e_s_u_l_t___c_o_n_f_i_g__t" prot="public">XMC_VADC_RESULT_CONFIG_t</innerclass>
    <innerclass refid="struct_x_m_c___v_a_d_c___s_c_a_n___c_o_n_f_i_g__t" prot="public">XMC_VADC_SCAN_CONFIG_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___v_a_d_c_1ga5493b6e76383802d08a3a1b8198e566e" prot="public" static="no">
        <name>XMC_VADC_NUM_CHANNELS_PER_GROUP</name>
        <initializer>(8U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the number of ADC channels per group </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="313" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_a_d_c_1gaa1029170a67be37a74b5ea11ae4fbc03" prot="public" static="no">
        <name>XMC_VADC_NUM_PORTS</name>
        <initializer>(16U) /* Defines the number of hardware ports that can be configured
                                                    as triggers and gating signals */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="309" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_a_d_c_1ga0c4a5522340905e2dcffec38d8f50323" prot="public" static="no">
        <name>XMC_VADC_NUM_RESULT_REGISTERS</name>
        <initializer>(16U) /* Defines the number of result holding registers per ADC group */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="311" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___v_a_d_c_1gaebb436d84700b3f1a711a834119646b8" prot="public" static="no">
        <name>XMC_VADC_BOUNDARY_NODE_t</name>
        <enumvalue id="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a5871cf5f794a93a0e7739313968df016" prot="public">
          <name>XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Route the Group boundary flag to Common boundary flag 0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a179f42ef75221f50205e67f952a71848" prot="public">
          <name>XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Route the Group boundary flag to Common boundary flag 1 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a8b150f168ea6a5fe6c44e8f9c57b63a4" prot="public">
          <name>XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Route the Group boundary flag to Common boundary flag 2 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8afe673240d00f42455d5223c28980d370" prot="public">
          <name>XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Route the Group boundary flag to Common boundary flag 3 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a3d09cf9d3fc62eda8f3d042e9274d5dc" prot="public">
          <name>XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Route the Group boundary flag to Common Service Request line 0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a5361152bc79e663402273685c284f712" prot="public">
          <name>XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Route the Group boundary flag to Common Service Request line 1 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a2ae279f48d4197a599e3f88a8ce2818f" prot="public">
          <name>XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Route the Group boundary flag to Common Service Request line 2 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a75680938f7390fc377b5a45dc8d002f2" prot="public">
          <name>XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Route the Group boundary flag to Common Service Request line 3 </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides possible routing values for the boundary flag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="779" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="778" bodyend="788"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga23f503143ad7d53a741328bf71faa03e" prot="public" static="no">
        <name>XMC_VADC_BOUNDARY_SELECT_t</name>
        <enumvalue id="group___v_a_d_c_1gga23f503143ad7d53a741328bf71faa03eacdb1f74e41391ac923fe51ebc94521f8" prot="public">
          <name>XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Select the lower boundary </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga23f503143ad7d53a741328bf71faa03eaf7cd6e9ead0944c9599e9a7cf816f3ca" prot="public">
          <name>XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND</name>
          <initializer>= 2U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Selects the upper boundary </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the boundary select for Channel. Use <ref refid="group___v_a_d_c_1ga017b3c6d3e14d46d5cf60602f262659d" kindref="member">XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="694" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="693" bodyend="697"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga32e761497c835cb7995991380b8b9676" prot="public" static="no">
        <name>XMC_VADC_CHANNEL_ALIAS_t</name>
        <enumvalue id="group___v_a_d_c_1gga32e761497c835cb7995991380b8b9676a9071f27d36e98489c88ab1bb93b2f9b9" prot="public">
          <name>XMC_VADC_CHANNEL_ALIAS_DISABLED</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga32e761497c835cb7995991380b8b9676adbb2e368806721f2285e10e7181069be" prot="public">
          <name>XMC_VADC_CHANNEL_ALIAS_CH0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga32e761497c835cb7995991380b8b9676ab0865d04e50803459129f15b4f864fa2" prot="public">
          <name>XMC_VADC_CHANNEL_ALIAS_CH1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga32e761497c835cb7995991380b8b9676ae08ce3182a155da35c172cd4f1c0c31b" prot="public">
          <name>XMC_VADC_CHANNEL_ALIAS_CH2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga32e761497c835cb7995991380b8b9676a0ebd58eb60d14fb7c72a4ac357613f67" prot="public">
          <name>XMC_VADC_CHANNEL_ALIAS_CH3</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga32e761497c835cb7995991380b8b9676a9e2d33b23f5ec43915f676237f5961bf" prot="public">
          <name>XMC_VADC_CHANNEL_ALIAS_CH4</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga32e761497c835cb7995991380b8b9676acf90cbc1bf5c9ae7ad28385e47e5b954" prot="public">
          <name>XMC_VADC_CHANNEL_ALIAS_CH5</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga32e761497c835cb7995991380b8b9676a60f8138711dac1daf9a8ae1c9f170a00" prot="public">
          <name>XMC_VADC_CHANNEL_ALIAS_CH6</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga32e761497c835cb7995991380b8b9676a6d46b3dfed8e26b972bd02de79fe44bd" prot="public">
          <name>XMC_VADC_CHANNEL_ALIAS_CH7</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines channel alias. All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNEL_ALIAS_DISABLED. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="718" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="717" bodyend="728"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga69fe77fd05cfd4a502f14becf6352cea" prot="public" static="no">
        <name>XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t</name>
        <enumvalue id="group___v_a_d_c_1gga69fe77fd05cfd4a502f14becf6352ceaa12e3fcda7b15fb19e8a24875dc4e140a" prot="public">
          <name>XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Set Boundary condition criteria to assert above the band </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga69fe77fd05cfd4a502f14becf6352ceaa37e4c015407377c2514bd9c44c4d6662" prot="public">
          <name>XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Set Boundary condition criteria to assert below the band </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the criteria for boundary flag assertion. Use <ref refid="group___v_a_d_c_1ga69fe77fd05cfd4a502f14becf6352cea" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="564" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="563" bodyend="567"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga203ae2271679fb3e05d185a6bd14b8b2" prot="public" static="no">
        <name>XMC_VADC_CHANNEL_BOUNDARY_t</name>
        <enumvalue id="group___v_a_d_c_1gga203ae2271679fb3e05d185a6bd14b8b2a2eb22e6976e5553aaacea29538beda6b" prot="public">
          <name>XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group specific Boundary-0 value </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga203ae2271679fb3e05d185a6bd14b8b2a103e8fab52a5fe949383b59872d02069" prot="public">
          <name>XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group specific Boundary-1 value </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga203ae2271679fb3e05d185a6bd14b8b2addb07a657e568468242cd7f4d6b37575" prot="public">
          <name>XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module wide Boundary-0 value </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga203ae2271679fb3e05d185a6bd14b8b2add5718928c0d3516f42886d6c96fe790" prot="public">
          <name>XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module wide Boundary-1 value </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the references to boundary values used for limit checking feature. Each of these can be assigned as either an upper bound or a lower bound. Use <ref refid="group___v_a_d_c_1ga203ae2271679fb3e05d185a6bd14b8b2" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="520" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="519" bodyend="525"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga91049cf62e24988e2df8554af78e2183" prot="public" static="no">
        <name>XMC_VADC_CHANNEL_BWDCH_t</name>
        <enumvalue id="group___v_a_d_c_1gga91049cf62e24988e2df8554af78e2183a6557c82bb5f3f79333dc0f5adf72bb40" prot="public">
          <name>XMC_VADC_CHANNEL_BWDCH_VAGND</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capacitor pre-charged to ground </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga91049cf62e24988e2df8554af78e2183ad30d5559ec906982f98c5c3b9f3a2149" prot="public">
          <name>XMC_VADC_CHANNEL_BWDCH_VAREF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Capacitor pre-charged to reference voltage </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Use <ref refid="group___v_a_d_c_1ga91049cf62e24988e2df8554af78e2183" kindref="member">XMC_VADC_CHANNEL_BWDCH_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="532" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="531" bodyend="535"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" prot="public" static="no">
        <name>XMC_VADC_CHANNEL_CONV_t</name>
        <enumvalue id="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03a01d1d18f4ea33aae01eb486660393989" prot="public">
          <name>XMC_VADC_CHANNEL_CONV_GROUP_CLASS0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Conversion property set-0 specific to the group </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03aa39fbfa369d7a906592f7849e58298a2" prot="public">
          <name>XMC_VADC_CHANNEL_CONV_GROUP_CLASS1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Conversion property set-1 specific to the group </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03a6092acad2d6d9493846dbd0c2ac67daf" prot="public">
          <name>XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Conversion property set-0, Module wide </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03a17cadc6c0c0772e937e23f1ad1818264" prot="public">
          <name>XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Conversion property set-1, Module wide </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the conversion classes that can be selected for each channel. The enumeration members holds the group or global classes. The conversion classes decides the properties of conversion, like resolution, sampling time etc Use <ref refid="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" kindref="member">XMC_VADC_CHANNEL_CONV_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="507" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="506" bodyend="512"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga1b6bf4c15562eef67deac95cb36a48d6" prot="public" static="no">
        <name>XMC_VADC_CHANNEL_EVGEN_t</name>
        <enumvalue id="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a84a7270450c56954fea5768f8dfd9f1a" prot="public">
          <name>XMC_VADC_CHANNEL_EVGEN_NEVER</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No event generated </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a81136e28dae1a2b4b27184f47b197199" prot="public">
          <name>XMC_VADC_CHANNEL_EVGEN_INBOUND</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event generated when the result is within the normal range </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a13b50b90ecfc83823ebd41d6399078af" prot="public">
          <name>XMC_VADC_CHANNEL_EVGEN_COMPHIGH</name>
          <initializer>= 1U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event generated when the result of fast compare operation is high </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a67fa97a42d92971a0628e4c96102e602" prot="public">
          <name>XMC_VADC_CHANNEL_EVGEN_OUTBOUND</name>
          <initializer>= 2U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event generated when the result is outside the normal range </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a26977d4681508972cfa75c3b49be7ea9" prot="public">
          <name>XMC_VADC_CHANNEL_EVGEN_COMPLOW</name>
          <initializer>= 2U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event generated when the result result of fast compare operation is low </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a9743b4856f1e187c9143dad7613defde" prot="public">
          <name>XMC_VADC_CHANNEL_EVGEN_ALWAYS</name>
          <initializer>= 3U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Event generated always after conversion - unconditionally </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the criteria for event generation by the channel. Use <ref refid="group___v_a_d_c_1ga1b6bf4c15562eef67deac95cb36a48d6" kindref="member">XMC_VADC_CHANNEL_EVGEN_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="541" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="540" bodyend="548"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gab0c1eb7f8d8743b6b98ebfe8acd14e28" prot="public" static="no">
        <name>XMC_VADC_CHANNEL_REF_t</name>
        <enumvalue id="group___v_a_d_c_1ggab0c1eb7f8d8743b6b98ebfe8acd14e28aca253c1b3d320840ed1d64e5791a69a4" prot="public">
          <name>XMC_VADC_CHANNEL_REF_INTREF</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal VARef </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab0c1eb7f8d8743b6b98ebfe8acd14e28a4b8c8f8bfbbd58dcf804d166f159a654" prot="public">
          <name>XMC_VADC_CHANNEL_REF_ALT_CH0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External voltage available on Channel-0 of the perticular group </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the reference voltage selection for conversion. Use <ref refid="group___v_a_d_c_1gab0c1eb7f8d8743b6b98ebfe8acd14e28" kindref="member">XMC_VADC_CHANNEL_REF_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="554" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="553" bodyend="557"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga9f7e6983d71750230e15684a2dc0cf12" prot="public" static="no">
        <name>XMC_VADC_CONVMODE_t</name>
        <enumvalue id="group___v_a_d_c_1gga9f7e6983d71750230e15684a2dc0cf12a92a1dd71052d7784f1b2325a3e14df70" prot="public">
          <name>XMC_VADC_CONVMODE_12BIT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Results of conversion are 12bits wide </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga9f7e6983d71750230e15684a2dc0cf12af7a5c377d4788520327c0822e0ccd18b" prot="public">
          <name>XMC_VADC_CONVMODE_10BIT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Results of conversion are 10bits wide </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga9f7e6983d71750230e15684a2dc0cf12a787485b122181ae78b66c8e9e56fa0a7" prot="public">
          <name>XMC_VADC_CONVMODE_8BIT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Results of conversion are 8bits wide </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga9f7e6983d71750230e15684a2dc0cf12a09e44e2e8dc7cbb1442aafb8f3f95c99" prot="public">
          <name>XMC_VADC_CONVMODE_FASTCOMPARE</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input signal compared with a preset range </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="461" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="460" bodyend="466"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gaff5ca81d747517a6420fea34642c6778" prot="public" static="no">
        <name>XMC_VADC_DMM_t</name>
        <enumvalue id="group___v_a_d_c_1ggaff5ca81d747517a6420fea34642c6778a1bd4f88d1ae65dd412b2bea7084ac6ea" prot="public">
          <name>XMC_VADC_DMM_REDUCTION_MODE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Standard Data reduction mode </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaff5ca81d747517a6420fea34642c6778aed21d04bf248f50ed8284bdc8d82639a" prot="public">
          <name>XMC_VADC_DMM_FILTERING_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Provide option to select Finite Impulse Response Filter (FIR) or Infinite Impulse Response Filter (IIR) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaff5ca81d747517a6420fea34642c6778a721c65e6d4d9f3a61595b78f70d4e190" prot="public">
          <name>XMC_VADC_DMM_DIFFERENCE_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Difference mode is selected </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the conversion result handling mode. Use <ref refid="group___v_a_d_c_1gaff5ca81d747517a6420fea34642c6778" kindref="member">XMC_VADC_DMM_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="450" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="449" bodyend="455"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga42e972915a3d2ac3b46847a4d5228c64" prot="public" static="no">
        <name>XMC_VADC_FAST_COMPARE_t</name>
        <enumvalue id="group___v_a_d_c_1gga42e972915a3d2ac3b46847a4d5228c64a60b1cf2b6fdff4aee40cece2db973494" prot="public">
          <name>XMC_VADC_FAST_COMPARE_LOW</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input lower than than programmed reference </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga42e972915a3d2ac3b46847a4d5228c64a17cb1fe0e80b3f5abc52c0b9c060a36b" prot="public">
          <name>XMC_VADC_FAST_COMPARE_HIGH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Input higher than than programmed reference </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga42e972915a3d2ac3b46847a4d5228c64ac11d5afc7241581ac99588899ff1d555" prot="public">
          <name>XMC_VADC_FAST_COMPARE_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unknown, Conversion probably still ongoing </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the output of a fast compare mode. Use <ref refid="group___v_a_d_c_1ga42e972915a3d2ac3b46847a4d5228c64" kindref="member">XMC_VADC_FAST_COMPARE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="473" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="472" bodyend="477"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gaa16f1136a4a4efddcd67ebd5fc69bc9f" prot="public" static="no">
        <name>XMC_VADC_GATE_INPUT_SELECT_t</name>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa628fa2a0ae62f6676d9f0aa6e6c78f34" prot="public">
          <name>XMC_VADC_REQ_GT_A</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal A </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa19af54717bfaa667ea4fd277bd9b1363" prot="public">
          <name>XMC_VADC_REQ_GT_B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal B </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9faf9002b27a33b94fcbb01283f26a9af2f" prot="public">
          <name>XMC_VADC_REQ_GT_C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal C </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa19a4b78111378dabcc5b6cfc784f12bf" prot="public">
          <name>XMC_VADC_REQ_GT_D</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal D </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa31eb3921627e7f9235d728ed7b3c5c55" prot="public">
          <name>XMC_VADC_REQ_GT_E</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal E </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fac5ad2424cc03a834d6c4b8ecd1588795" prot="public">
          <name>XMC_VADC_REQ_GT_F</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal F </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fac427fc9bece629f5ad3534c08ba60477" prot="public">
          <name>XMC_VADC_REQ_GT_G</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal G </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa949e53a7798ed7e81e4441d45da8e584" prot="public">
          <name>XMC_VADC_REQ_GT_H</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal H </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa604981cad23be4290b7186a999670de1" prot="public">
          <name>XMC_VADC_REQ_GT_I</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal I </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fad5640a3b1c65f8b13eb19b8a48bff0b1" prot="public">
          <name>XMC_VADC_REQ_GT_J</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal J </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa39fff78f06b392778b82e5865ea30c19" prot="public">
          <name>XMC_VADC_REQ_GT_K</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal K </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa58a6afc1fb1a441196de4c2010ee9fa9" prot="public">
          <name>XMC_VADC_REQ_GT_L</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal L </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9faa3ddf0b32c2642cddd92f5a7062eb0f7" prot="public">
          <name>XMC_VADC_REQ_GT_M</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal M </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa37a52e037bb5ef38e0843cabd63637e9" prot="public">
          <name>XMC_VADC_REQ_GT_N</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal N </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9faaa030baffac71a32d53b77369fc5137a" prot="public">
          <name>XMC_VADC_REQ_GT_O</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal O </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fae36d43191eba009ea267acc503d8524f" prot="public">
          <name>XMC_VADC_REQ_GT_P</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Gating select signal P </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the external gating input selection possibilities, to gate the conversion requests. Refer the VADC interconnects section of the reference manual for details of peripherals which can be used. Also refer xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of these enumeration items. Use <ref refid="group___v_a_d_c_1gaa16f1136a4a4efddcd67ebd5fc69bc9f" kindref="member">XMC_VADC_GATE_INPUT_SELECT_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="413" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="412" bodyend="431"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga4db02e3b835b8cad941ab60ae288f8c8" prot="public" static="no">
        <name>XMC_VADC_GATEMODE_t</name>
        <enumvalue id="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8ac913472cb9094d0ad24cb25df3a42ede" prot="public">
          <name>XMC_VADC_GATEMODE_BLOCK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External triggers are permanently blocked </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8a49069b53946c883dedc6c59dbf67dae8" prot="public">
          <name>XMC_VADC_GATEMODE_IGNORE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External triggers are unconditionally passed </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8a7c7672639ef846098badaa1273b23a7b" prot="public">
          <name>XMC_VADC_GATEMODE_ACTIVEHIGH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger is passed only if the gate signal is high </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8a6c503bea41d82b4d2b00bbbdc1d39ac6" prot="public">
          <name>XMC_VADC_GATEMODE_ACTIVELOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External trigger is passed only if the gate signal is low </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the condition for gating the conversion requests. It can be used to set the ENGT field of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources. Use <ref refid="group___v_a_d_c_1ga4db02e3b835b8cad941ab60ae288f8c8" kindref="member">XMC_VADC_GATEMODE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="439" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="438" bodyend="444"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gaa69659f0a647c58e6a0c434759a5f358" prot="public" static="no">
        <name>XMC_VADC_GLOBAL_EVENT_t</name>
        <enumvalue id="group___v_a_d_c_1ggaa69659f0a647c58e6a0c434759a5f358ac6d9b471959c249288e9eb86eb874fe3" prot="public">
          <name>XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE</name>
          <initializer>= VADC_GLOBEFLAG_SEVGLB_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Background scan request source event </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa69659f0a647c58e6a0c434759a5f358acd0bc4bf1a88d34dde532f8c597b3de8" prot="public">
          <name>XMC_VADC_GLOBAL_EVENT_RESULT</name>
          <initializer>= VADC_GLOBEFLAG_REVGLB_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Global result event </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the event which can lead to a global service request assertion. Use <ref refid="group___v_a_d_c_1gaa69659f0a647c58e6a0c434759a5f358" kindref="member">XMC_VADC_GLOBAL_EVENT_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="574" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="573" bodyend="577"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga66c363caf91b81a17ffd84aa75dd54d2" prot="public" static="no">
        <name>XMC_VADC_GLOBAL_SHS_AREF_t</name>
        <enumvalue id="group___v_a_d_c_1gga66c363caf91b81a17ffd84aa75dd54d2abce07e992195577c902c079729c607a3" prot="public">
          <name>XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE</name>
          <initializer>= 0 &lt;&lt; SHS_SHSCFG_AREF_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>External reference, upper supply range, e.g. VDD &gt;= 3.0V </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga66c363caf91b81a17ffd84aa75dd54d2a485f86b4dab871ecd3f174fa403f4622" prot="public">
          <name>XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE</name>
          <initializer>= 2 &lt;&lt; SHS_SHSCFG_AREF_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal reference, upper supply range, e.g. VDD &gt;= 3.0V </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga66c363caf91b81a17ffd84aa75dd54d2acaae84a84135d98b689dbb320380b21a" prot="public">
          <name>XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE</name>
          <initializer>= 3 &lt;&lt; SHS_SHSCFG_AREF_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Internal reference, lower supply range, e.g. VDD &lt; 3.0V </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selection of the reference voltage that is required for conversions (VREF). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="736" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="735" bodyend="740"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gaa82e58957a3cdeed35f4fadd92682e7c" prot="public" static="no">
        <name>XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t</name>
        <enumvalue id="group___v_a_d_c_1ggaa82e58957a3cdeed35f4fadd92682e7caabf799ce29f4c349c62cb1fd6c9a7f0d" prot="public">
          <name>XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration occur after conversion takes place </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaa82e58957a3cdeed35f4fadd92682e7ca301ddac0f094d741b2a7d28de22ef8c6" prot="public">
          <name>XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calibration occur before conversion takes place </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Provides the order in which the SHS should do the calibration </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="768" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="767" bodyend="771"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gaeab802d00faa3aad6269c620a15a381b" prot="public" static="no">
        <name>XMC_VADC_GROUP_ARBMODE_t</name>
        <enumvalue id="group___v_a_d_c_1ggaeab802d00faa3aad6269c620a15a381ba2f3e98ed8180a3561aaab67e7e5bd582" prot="public">
          <name>XMC_VADC_GROUP_ARBMODE_ALWAYS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Arbiter runs all the time </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaeab802d00faa3aad6269c620a15a381baca890d7bfd6eadf36d582bde6f3e7c19" prot="public">
          <name>XMC_VADC_GROUP_ARBMODE_ONDEMAND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Arbiter runs only if a conversion request is asserted by any of the request sources </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the request source arbiter behavior. Use <ref refid="group___v_a_d_c_1gaeab802d00faa3aad6269c620a15a381b" kindref="member">XMC_VADC_GROUP_ARBMODE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="613" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="612" bodyend="617"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga017b3c6d3e14d46d5cf60602f262659d" prot="public" static="no">
        <name>XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t</name>
        <enumvalue id="group___v_a_d_c_1gga017b3c6d3e14d46d5cf60602f262659da247876a12a1ec728b08ad22a23461dd0" prot="public">
          <name>XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable boundary flag </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga017b3c6d3e14d46d5cf60602f262659da1c42beaee2cb5656833697e2b75a9fe5" prot="public">
          <name>XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Always enable boundary </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga017b3c6d3e14d46d5cf60602f262659da3ec5736710604ff2d447c09d0ed521da" prot="public">
          <name>XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable boundary flag when gate level is 0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga017b3c6d3e14d46d5cf60602f262659da40e92524506d5b3ed3654f83be18da33" prot="public">
          <name>XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable boundary flag when gate level is 1 </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the various modes for the boundary flag. Use <ref refid="group___v_a_d_c_1ga017b3c6d3e14d46d5cf60602f262659d" kindref="member">XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="682" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="681" bodyend="687"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gadf393a8c811d7ee6601688797e616646" prot="public" static="no">
        <name>XMC_VADC_GROUP_CONV_t</name>
        <enumvalue id="group___v_a_d_c_1ggadf393a8c811d7ee6601688797e616646ac78caa8ace779a519cce8e2b005e5184" prot="public">
          <name>XMC_VADC_GROUP_CONV_STD</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Settings pertaining to channels directly attached to VADC module </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggadf393a8c811d7ee6601688797e616646a87e29eeb94abb3bcbc4075cda129d8a9" prot="public">
          <name>XMC_VADC_GROUP_CONV_EMUX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Settings pertaining to channels connected to VADC via EMUX </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the reference to sample time and conversion mode settings. Use <ref refid="group___v_a_d_c_1gadf393a8c811d7ee6601688797e616646" kindref="member">XMC_VADC_GROUP_CONV_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="604" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="603" bodyend="607"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gaedf62af4b76d15e91f0786165ec34fc2" prot="public" static="no">
        <name>XMC_VADC_GROUP_EMUXCODE_t</name>
        <enumvalue id="group___v_a_d_c_1ggaedf62af4b76d15e91f0786165ec34fc2a099d6b915907a8f95b4e7cd1f3735765" prot="public">
          <name>XMC_VADC_GROUP_EMUXCODE_BINARY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A linearly incrementing code serves are MUX-SEL </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaedf62af4b76d15e91f0786165ec34fc2a0d8e365e9f36b5fe5fd3e4c935e90e2f" prot="public">
          <name>XMC_VADC_GROUP_EMUXCODE_GRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The MUX-SEL is gray encoded </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the EMUX channel selection encoding scheme. Use <ref refid="group___v_a_d_c_1gaedf62af4b76d15e91f0786165ec34fc2" kindref="member">XMC_VADC_GROUP_EMUXCODE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="634" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="633" bodyend="637"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gab9942639fc1d53fc2335990884b394ba" prot="public" static="no">
        <name>XMC_VADC_GROUP_EMUXMODE_t</name>
        <enumvalue id="group___v_a_d_c_1ggab9942639fc1d53fc2335990884b394baa1bbd7dfdc24faec8d522a758ae7fe880" prot="public">
          <name>XMC_VADC_GROUP_EMUXMODE_SWCTRL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Perform EMUX in Software control mode </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab9942639fc1d53fc2335990884b394baaf8c2244a73ee118a28dcb5bf8ac51685" prot="public">
          <name>XMC_VADC_GROUP_EMUXMODE_STEADYMODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Perform EMUX in Steady mode (Use EMUX set value) </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab9942639fc1d53fc2335990884b394baaad4e4c8354234a5c17a3aef01c761138" prot="public">
          <name>XMC_VADC_GROUP_EMUXMODE_SINGLEMODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Perform EMUX in Single step mode </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab9942639fc1d53fc2335990884b394baa59b2f18f53866fc7d0cf76f34cea5939" prot="public">
          <name>XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Perform EMUX in Sequence mode </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the EMUX mode of operation. Use <ref refid="group___v_a_d_c_1gab9942639fc1d53fc2335990884b394ba" kindref="member">XMC_VADC_GROUP_EMUXMODE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="623" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="622" bodyend="628"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" prot="public" static="no">
        <name>XMC_VADC_GROUP_INDEX_t</name>
        <enumvalue id="group___v_a_d_c_1gga2a37056c647c7622f8102dae982336eba9815f5154e7960798d82333d348522b5" prot="public">
          <name>XMC_VADC_GROUP_INDEX_0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga2a37056c647c7622f8102dae982336ebac725235487779742c8cd3fd255a1e697" prot="public">
          <name>XMC_VADC_GROUP_INDEX_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the group indices. Use <ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="704" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="703" bodyend="711"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga14a1cbb73bf2a92a3321aea14488f354" prot="public" static="no">
        <name>XMC_VADC_GROUP_IRQ_t</name>
        <enumvalue id="group___v_a_d_c_1gga14a1cbb73bf2a92a3321aea14488f354a063619a30aa8bb3d0bb37b0d32684d43" prot="public">
          <name>XMC_VADC_GROUP_IRQ_KERNEL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Refers to Group specific service request </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga14a1cbb73bf2a92a3321aea14488f354a674afc8864f13a19d6a067c517fd8f7d" prot="public">
          <name>XMC_VADC_GROUP_IRQ_SHARED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Refers to Module wide service request </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the service request set used. Use <ref refid="group___v_a_d_c_1ga14a1cbb73bf2a92a3321aea14488f354" kindref="member">XMC_VADC_GROUP_IRQ_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="643" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="642" bodyend="646"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga7226349aef79a52f614eb5e75e3f55d9" prot="public" static="no">
        <name>XMC_VADC_GROUP_POWERMODE_t</name>
        <enumvalue id="group___v_a_d_c_1gga7226349aef79a52f614eb5e75e3f55d9a498fe251b61022633a09f361b4841586" prot="public">
          <name>XMC_VADC_GROUP_POWERMODE_OFF</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group is powered down </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga7226349aef79a52f614eb5e75e3f55d9ae3c0c22d5402543c828f19565cce9e8d" prot="public">
          <name>XMC_VADC_GROUP_POWERMODE_RESERVED1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reserved </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga7226349aef79a52f614eb5e75e3f55d9a135622a1a6f56a7b8a88b55d38e973ca" prot="public">
          <name>XMC_VADC_GROUP_POWERMODE_RESERVED2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Reserved </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga7226349aef79a52f614eb5e75e3f55d9a4394cff3deb041f3198a2c7c9ffaa25a" prot="public">
          <name>XMC_VADC_GROUP_POWERMODE_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group is powered up </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the power modes of a VADC Group. Use <ref refid="group___v_a_d_c_1ga7226349aef79a52f614eb5e75e3f55d9" kindref="member">XMC_VADC_GROUP_POWERMODE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="583" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="582" bodyend="588"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga9e8bcdf4c424a70b70e93368f1ef0021" prot="public" static="no">
        <name>XMC_VADC_GROUP_RS_PRIORITY_t</name>
        <enumvalue id="group___v_a_d_c_1gga9e8bcdf4c424a70b70e93368f1ef0021ab10f26da7901b950046a056f9c0fa145" prot="public">
          <name>XMC_VADC_GROUP_RS_PRIORITY_0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Lowest priority for the request source </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga9e8bcdf4c424a70b70e93368f1ef0021aeaaca134d7c9e0b3e7fd359fb0597675" prot="public">
          <name>XMC_VADC_GROUP_RS_PRIORITY_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Second lowest priority for the request source </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga9e8bcdf4c424a70b70e93368f1ef0021ab5e5ad7cfcc2afad2f6338221786812a" prot="public">
          <name>XMC_VADC_GROUP_RS_PRIORITY_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Second highest priority for the request source </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga9e8bcdf4c424a70b70e93368f1ef0021a76caa4614542b8ecb59feda23d6fa1df" prot="public">
          <name>XMC_VADC_GROUP_RS_PRIORITY_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Highest priority for the request source </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the request source arbitration priority. Use <ref refid="group___v_a_d_c_1ga9e8bcdf4c424a70b70e93368f1ef0021" kindref="member">XMC_VADC_GROUP_RS_PRIORITY_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="671" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="670" bodyend="676"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga4effb949346537c7a515c4f2ff542df5" prot="public" static="no">
        <name>XMC_VADC_GROUP_STATE_t</name>
        <enumvalue id="group___v_a_d_c_1gga4effb949346537c7a515c4f2ff542df5a59cb41943a0b5ba6e7e6abcf95ea6775" prot="public">
          <name>XMC_VADC_GROUP_STATE_IDLE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Idle and can convert if requested </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga4effb949346537c7a515c4f2ff542df5ae99f75960aa2617f81cbceb8346b24f3" prot="public">
          <name>XMC_VADC_GROUP_STATE_BUSY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Busy with an ongoing conversion </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the status of a VADC group (also known as kernel). Use <ref refid="group___v_a_d_c_1ga4effb949346537c7a515c4f2ff542df5" kindref="member">XMC_VADC_GROUP_STATE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="594" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="593" bodyend="597"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga5db9760a1339267ae158e21ee3047859" prot="public" static="no">
        <name>XMC_VADC_RESULT_ALIGN_t</name>
        <enumvalue id="group___v_a_d_c_1gga5db9760a1339267ae158e21ee3047859ade5aecb252a5ad2723252659ee392551" prot="public">
          <name>XMC_VADC_RESULT_ALIGN_LEFT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Always align result to left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga5db9760a1339267ae158e21ee3047859aa99c3eed20b4f1aea940ba4fb2f981e7" prot="public">
          <name>XMC_VADC_RESULT_ALIGN_RIGHT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Always align result to right </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the alignment of the converted result. Use <ref refid="group___v_a_d_c_1ga5db9760a1339267ae158e21ee3047859" kindref="member">XMC_VADC_RESULT_ALIGN_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="652" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="651" bodyend="655"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga2ccdb8c01810bbd767c8e7d4ee5453f9" prot="public" static="no">
        <name>XMC_VADC_RESULT_SUBTRATION_t</name>
        <enumvalue id="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9a3cd9c267d66c7fa9fb2d370efdbdd3aa" prot="public">
          <name>XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Always align result to left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9a5a61ab2a5730ecd46011f314dda62d03" prot="public">
          <name>XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Always align result to right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9a87c46ef691a6ee86c325488cbdf81113" prot="public">
          <name>XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN</name>
          <initializer>= 2U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Always align result to left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9a51ffb88efc7b7732a9e1750ae4b3e282" prot="public">
          <name>XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Always align result to right </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9ab171e9536b873fdc8411db4abee1779d" prot="public">
          <name>XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN</name>
          <initializer>= 4U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Always align result to left </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9ac7382d968abcce7449d9da40d73c0eae" prot="public">
          <name>XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Always align result to right </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="658" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="657" bodyend="665"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga1bf69f8d48c6280914a3a07c3330fd00" prot="public" static="no">
        <name>XMC_VADC_SCAN_LOAD_t</name>
        <enumvalue id="group___v_a_d_c_1gga1bf69f8d48c6280914a3a07c3330fd00a5c3cd3659dbddaa0ef9804a09b4e868c" prot="public">
          <name>XMC_VADC_SCAN_LOAD_OVERWRITE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The old set of channels is discarded in favor of the new set awaiting conversion </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga1bf69f8d48c6280914a3a07c3330fd00a958c98fcf8f114f4d2fc3090eb8a9a4d" prot="public">
          <name>XMC_VADC_SCAN_LOAD_COMBINE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The new set of channels are combined with the pending channels from previous set </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the behavior of load event for the scan request source. Use <ref refid="group___v_a_d_c_1ga1bf69f8d48c6280914a3a07c3330fd00" kindref="member">XMC_VADC_SCAN_LOAD_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="493" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="492" bodyend="498"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gacbab535e1de48116e5461c2ce7ff5077" prot="public" static="no">
        <name>XMC_VADC_SCAN_TYPE_t</name>
        <enumvalue id="group___v_a_d_c_1ggacbab535e1de48116e5461c2ce7ff5077adbbf7a9b221f5f9e373e6ecb770f64ce" prot="public">
          <name>XMC_VADC_SCAN_TYPE_GROUPSCAN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Auto scan mode of operation selected. Also called as Group scan </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggacbab535e1de48116e5461c2ce7ff5077a4f944a59ed1cc8477ce269673a38accb" prot="public">
          <name>XMC_VADC_SCAN_TYPE_BACKGROUND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Background scan mode of operation selected. Also called as Global scan </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the type of scan request source to be used. It can choose between auto scan and background scan request source methods. Use <ref refid="group___v_a_d_c_1gacbab535e1de48116e5461c2ce7ff5077" kindref="member">XMC_VADC_SCAN_TYPE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="484" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="483" bodyend="487"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gae43c31aa12cebdad8a95072453ce71b8" prot="public" static="no">
        <name>XMC_VADC_SHS_LOOP_CH_t</name>
        <enumvalue id="group___v_a_d_c_1ggae43c31aa12cebdad8a95072453ce71b8a7ab1638f0adc462c223be819b45964ed" prot="public">
          <name>XMC_VADC_SHS_LOOP_CH_0</name>
          <initializer>= SHS_LOOP_LPCH0_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Select Delta-sigma loop 0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggae43c31aa12cebdad8a95072453ce71b8a66588df417260b06419f2dd4498dbf4f" prot="public">
          <name>XMC_VADC_SHS_LOOP_CH_1</name>
          <initializer>= SHS_LOOP_LPCH1_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Select Delta-sigma loop 1 </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the Delta sigma loop. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="759" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="758" bodyend="762"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" prot="public" static="no">
        <name>XMC_VADC_SR_t</name>
        <enumvalue id="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1ab464629a3f5c67a4e6f9b738f2e02bb4" prot="public">
          <name>XMC_VADC_SR_GROUP_SR0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group specific Service Request-0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1ab9c251a1ccf84c51844de7f15477c7d7" prot="public">
          <name>XMC_VADC_SR_GROUP_SR1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group specific Service Request-1 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1a5b88744b75b1e4a54fd1cc18e02cbe09" prot="public">
          <name>XMC_VADC_SR_GROUP_SR2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group specific Service Request-2 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1a12d1401a5acfec2e47607d71d559e453" prot="public">
          <name>XMC_VADC_SR_GROUP_SR3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Group specific Service Request-3 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1ab49d758848e891936f2469b28c2f9ec5" prot="public">
          <name>XMC_VADC_SR_SHARED_SR0</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module Wide Common Service Request-0 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1a89d85bc678a0e381e9180468ab543900" prot="public">
          <name>XMC_VADC_SR_SHARED_SR1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module Wide Common Service Request-1 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1aa8428db76657e0711415efe99767ef95" prot="public">
          <name>XMC_VADC_SR_SHARED_SR2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module Wide Common Service Request-2 </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1a08fe0b7046ea542383fe053bb18c293a" prot="public">
          <name>XMC_VADC_SR_SHARED_SR3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Module Wide Common Service Request-3 </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the various service requests lines. Each group can raise up to 4 service requests independently. While all groups together have the possibility of raising 4 module wide service requests. Use <ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="345" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="344" bodyend="354"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga227aaa91c89c64c8402c869469276eb9" prot="public" static="no">
        <name>XMC_VADC_STARTMODE_t</name>
        <enumvalue id="group___v_a_d_c_1gga227aaa91c89c64c8402c869469276eb9a603a2da364137de801452b7680f9b1c0" prot="public">
          <name>XMC_VADC_STARTMODE_WFS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An ongoing conversion completes without interruption </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga227aaa91c89c64c8402c869469276eb9ab39b9f2a959b6ec9ac138e7c020c9aae" prot="public">
          <name>XMC_VADC_STARTMODE_CIR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An ongoing conversion can be interrupted and resumed later </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1gga227aaa91c89c64c8402c869469276eb9ad8450a9b8f9173ce4bb46c1f3d453e7b" prot="public">
          <name>XMC_VADC_STARTMODE_CNR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An ongoing conversion can be interrupted and never resumed </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in between. Use <ref refid="group___v_a_d_c_1ga227aaa91c89c64c8402c869469276eb9" kindref="member">XMC_VADC_STARTMODE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="361" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="360" bodyend="365"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gabac544a8f57b163dff69b444ed5f1d87" prot="public" static="no">
        <name>XMC_VADC_STATUS_t</name>
        <enumvalue id="group___v_a_d_c_1ggabac544a8f57b163dff69b444ed5f1d87a2803f6adfdcdca2268420d41686991bb" prot="public">
          <name>XMC_VADC_STATUS_SUCCESS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Returned when the API has been able to fulfill the callers request </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggabac544a8f57b163dff69b444ed5f1d87a3634aa8e895380c02d16fba23f4212ec" prot="public">
          <name>XMC_VADC_STATUS_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Returned when the API cannot fulfill the request </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the return status after execution of VADC specific API&apos;s. Use <ref refid="group___v_a_d_c_1gabac544a8f57b163dff69b444ed5f1d87" kindref="member">XMC_VADC_STATUS_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="334" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="333" bodyend="337"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1ga21468d2b1e9b6110c35e6816fe3e256a" prot="public" static="no">
        <name>XMC_VADC_SYNCTR_EVAL_t</name>
        <enumvalue id="group___v_a_d_c_1gga21468d2b1e9b6110c35e6816fe3e256aa8f49d67e5eb2e285fb6fca56c3ae2d57" prot="public">
          <name>XMC_VADC_SYNCTR_EVAL_1</name>
          <initializer>= VADC_G_SYNCTR_EVALR1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask to set the EVAL1 bits of SYNCTR </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the ready signal selection </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="796" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="795" bodyend="802"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gaabd0d22cd15f13e6e49809a3b811b241" prot="public" static="no">
        <name>XMC_VADC_TRIGGER_EDGE_t</name>
        <enumvalue id="group___v_a_d_c_1ggaabd0d22cd15f13e6e49809a3b811b241a6f9b8e9ab9a1fa139050f87bf576ed85" prot="public">
          <name>XMC_VADC_TRIGGER_EDGE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No external trigger. Conversion request can be asserted by software </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaabd0d22cd15f13e6e49809a3b811b241a6c2f089ee48ddbe0709370aaff7e2eaa" prot="public">
          <name>XMC_VADC_TRIGGER_EDGE_FALLING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The falling edge of the external trigger can assert conversion request </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaabd0d22cd15f13e6e49809a3b811b241a8d7edb1df35ead7a90fd5640861228a5" prot="public">
          <name>XMC_VADC_TRIGGER_EDGE_RISING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The rising edge of the external trigger can assert conversion request </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggaabd0d22cd15f13e6e49809a3b811b241a18d01d02320eb514e85edc66cd4b53e4" prot="public">
          <name>XMC_VADC_TRIGGER_EDGE_ANY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Both the edges can assert conversion request </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the edge sensitivity of the trigger signal which can assert a conversion. Use <ref refid="group___v_a_d_c_1gaabd0d22cd15f13e6e49809a3b811b241" kindref="member">XMC_VADC_TRIGGER_EDGE_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="372" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="371" bodyend="377"/>
      </memberdef>
      <memberdef kind="enum" id="group___v_a_d_c_1gab71bdae1d928ee308430626a761eab97" prot="public" static="no">
        <name>XMC_VADC_TRIGGER_INPUT_SELECT_t</name>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97aa747e2d141cbdc20050f43294940282b" prot="public">
          <name>XMC_VADC_REQ_TR_A</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal A </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a53e03e8e843f703d055a610b78291da2" prot="public">
          <name>XMC_VADC_REQ_TR_B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal B </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a7adc7d31060d1dcb69c97d78d9ebda36" prot="public">
          <name>XMC_VADC_REQ_TR_C</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal C </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a816f02d251e2477463ca5e6dcca79f68" prot="public">
          <name>XMC_VADC_REQ_TR_D</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal D </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97ab62b73b50451cf3260dbb42164713bb1" prot="public">
          <name>XMC_VADC_REQ_TR_E</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal E </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97aa200440561888cab0204fb632adf0e17" prot="public">
          <name>XMC_VADC_REQ_TR_F</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal F </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97ac690682200ba8fc59f106563d4603998" prot="public">
          <name>XMC_VADC_REQ_TR_G</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal G </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a4620708e2388498ad0efc07586fd7e30" prot="public">
          <name>XMC_VADC_REQ_TR_H</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal H </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a29a5bc3d4ce50b42c98b568fa6d76d09" prot="public">
          <name>XMC_VADC_REQ_TR_I</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal I </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a8676bf7270afed2fa20b8fe6b303829d" prot="public">
          <name>XMC_VADC_REQ_TR_J</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal J </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a3fc091b811ad27e5aee89237e43b93c9" prot="public">
          <name>XMC_VADC_REQ_TR_K</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal K </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97ac94b58fec8333f270cb7c56791d1b957" prot="public">
          <name>XMC_VADC_REQ_TR_L</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal L </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a495470ce5d64a1a25ba5709e5aa210b6" prot="public">
          <name>XMC_VADC_REQ_TR_M</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal M </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a51236825d82a7f0ecc7110637f2e05e7" prot="public">
          <name>XMC_VADC_REQ_TR_N</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal N </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97aae6010c1367966e9c37248c877612b84" prot="public">
          <name>XMC_VADC_REQ_TR_O</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal O </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97aeb73c906f67594383011749f10240722" prot="public">
          <name>XMC_VADC_REQ_TR_P</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Trigger select signal P </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the external trigger input selection possibilities, to assert a conversion. Refer the VADC interconnects section of the reference manual for details of peripherals which can be used. Also refer xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of these enumeration items. Use <ref refid="group___v_a_d_c_1gab71bdae1d928ee308430626a761eab97" kindref="member">XMC_VADC_TRIGGER_INPUT_SELECT_t</ref> for this enumeration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="386" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="385" bodyend="404"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___v_a_d_c_1ga5df621dbf8385ce88a2fbe632a75d02d" prot="public" static="no">
        <type><ref refid="struct_x_m_c___v_a_d_c___s_c_a_n___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_SCAN_CONFIG_t</ref></type>
        <definition>typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t</definition>
        <argsstring></argsstring>
        <name>XMC_VADC_BACKGROUND_CONFIG_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defined the scan configuration structure for background Request Source </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="870" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" prot="public" static="no">
        <type>SHS_Type</type>
        <definition>typedef SHS_Type XMC_VADC_GLOBAL_SHS_t</definition>
        <argsstring></argsstring>
        <name>XMC_VADC_GLOBAL_SHS_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defined the sample and hold register structure </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="328" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" prot="public" static="no">
        <type>VADC_GLOBAL_TypeDef</type>
        <definition>typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t</definition>
        <argsstring></argsstring>
        <name>XMC_VADC_GLOBAL_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defined the device header file vadc global register structure type to VADC type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="319" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" prot="public" static="no">
        <type>VADC_G_TypeDef</type>
        <definition>typedef VADC_G_TypeDef XMC_VADC_GROUP_t</definition>
        <argsstring></argsstring>
        <name>XMC_VADC_GROUP_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defined the device header file vadc group register structure type to VADC Group type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="323" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t XMC_VADC_RESULT_SIZE_t</definition>
        <argsstring></argsstring>
        <name>XMC_VADC_RESULT_SIZE_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defined the converted result size to unsigned 16 bit integer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="318" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___v_a_d_c_1gaee0c7577c099687e9fe85903c26b2b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_CHECK_GROUP_PTR</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_CHECK_GROUP_PTR</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1385" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1385" bodyend="1392"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gadf9c9021b0e1d538b9d6e6571a4dc2cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgndAddMultipleChannels</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t grp_num, const uint32_t ch_mask)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgndAddMultipleChannels</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>grp_num</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grp_num</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the VADC group whose unprioritized channels have been assigned to background scan </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask word indicating channels which form part of scan conversion sequence Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively. To Add the channel to the scan sequence enable the respective bit. Passing a 0x0 will clear all the previously selected channels <linebreak/>
Range: [0x0 to 0xFF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Adds multiple channels to the scan sequence.<linebreak/>
<linebreak/>
Call this API to insert a multiple channels into the scan request source. This will be added to a scan sequence. The added channels will be a part of the conversion sequence when the next load event occurs. A call to this API would configure the register bit fields of BRSSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga67c4d922e3b0a4abbaefde613a2a3c00" kindref="member">XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3548" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3548" bodyend="3555"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga1fb2f851984db31b10d5ae16be7fe05f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t grp_num, const uint32_t ch_mask)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>grp_num</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grp_num</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the VADC group whose unprioritized channels have been assigned to background scan </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask word indicating channels which form part of scan conversion sequence Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively. To Add the channel to the scan sequence enable the respective bit. Passing a 0x0 will clear all the previously selected channels <linebreak/>
Range: [0x0 to 0xFF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Removes multiple channels to the scan sequence.<linebreak/>
<linebreak/>
Call this API to insert a multiple channels into the scan request source. This will be added to a scan sequence. The added channels will be a part of the conversion sequence when the next load event occurs. A call to this API would configure the register bit fields of BRSSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga67c4d922e3b0a4abbaefde613a2a3c00" kindref="member">XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3607" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3607" bodyend="3614"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga04933ff6939f277ded8a4c19c3ef8d38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundAbortSequence</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundAbortSequence</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Aborts an ongoing background scan conversion(sequence).<linebreak/>
<linebreak/>
An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by one from a pending register and requests for their conversion. This API essentially clears the channel pending register thus creating an illusion that there are no more channels left in the sequence. A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) to abort the current scan sequence.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3496" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga67c4d922e3b0a4abbaefde613a2a3c00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t grp_num, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundAddChannelToSequence</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>grp_num</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grp_num</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the VADC group whose unprioritized channels have been assigned to background scan Request source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The unprioritized channel meant to be added to the scan sequence <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Adds a channel to the background scan sequence.<linebreak/>
<linebreak/>
Call this API to insert a new single channel into the background scan request source. This will be added to the scan sequence. The added channel will be part of the conversion sequence when the next load event occurs. A call to this API would configure the register bit fields of BRSSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3516" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3516" bodyend="3526"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga075844a45e021e56d4ee6e17a60dba02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Acknowledges the background scan conversion complete request source event.<linebreak/>
<linebreak/>
This API will clear the request source event that occurred. This will clear a interrupt if it was raised. A call to this API would configure the register bit field GLOBEFLAG.SEVGLB</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga0fdfbc995a8b763c210c044d2d979814" kindref="member">XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3697" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3697" bodyend="3701"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaf73c916feb89e889cf848fdbe6dd20e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundDisableContinuousMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables continuous conversion mode.<linebreak/>
<linebreak/>
Typically for a Background request source to generate conversion request, either a hardware trigger or a software request is a pre-requisite. Using autoscan feature it is possible to start the conversion once and allow the sequence to repeat without any further triggers. Once all channels belonging to a Background request source have been converted, a request source completion event is generated. Generation of this event can restart the Background sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API would configure the register bit field BRSMR.SCAN.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga3242cf2af1c5d920154c06ecf1aaff72" kindref="member">XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3454" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3454" bodyend="3458"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa31e5b59f99a6f6a8098425816a5daee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundDisableEvent</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundDisableEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the background scan request source event .<linebreak/>
 By using this API the request source event will be deactivated for the background scan request source. Other configurations w.r.t service node pointer are not done in this API. A call to this API would configure the register bit field BRSMR.ENSI.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>XMC_VADC_GROUP_BackgroundEnableEvent(),<linebreak/>
 <ref refid="group___v_a_d_c_1ga7f53b56af0d025239dbbcd80af5a5481" kindref="member">XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3802" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3802" bodyend="3807"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa2a92785dd1bfeda948728c15c7205f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the trigger for background scan request source.<linebreak/>
 By using this API the trigger will be deactivated for the background scan request source. This will just deactivate the H/W trigger for the background scan request source. If any configuration was done to select the trigger input in BRSCTRL will be not be effected. A call to this API would configure the register bit field BRSMR.ENTR.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gad94ac8b683df176e39944d0d2aff7501" kindref="member">XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3760" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3760" bodyend="3765"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga3242cf2af1c5d920154c06ecf1aaff72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundEnableContinuousMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables continuous conversion mode.<linebreak/>
<linebreak/>
Typically for a Background request source to generate conversion request, either a hardware trigger or a software request is needed. Using autoscan (continuous conversion)feature it is possible to start the conversion once and allow the sequence to repeat without any further triggers. Once all channels belonging to a Background request source have been converted, a request source completion event is generated. Generation of this event can restart the Background configure sequence. Every request source event will cause a load event to occur. A call to this API would access the register bit field BRSMR.SCAN.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>XMC_VADC_GROUP_BackgroundDisableContinuousMode()<linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3431" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3431" bodyend="3435"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaec3793022a41345bdff9e87e264ac8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundEnableEvent</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundEnableEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the background scan request source event .<linebreak/>
 By using this API the request source event will be activated for the background scan request source. Other configurations w.r.t service node pointer are not done in this API. A call to this API would configure the register bit field BRSMR.ENSI.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaec3793022a41345bdff9e87e264ac8c0" kindref="member">XMC_VADC_GLOBAL_BackgroundEnableEvent()</ref>,<linebreak/>
 <ref refid="group___v_a_d_c_1ga7f53b56af0d025239dbbcd80af5a5481" kindref="member">XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3781" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3781" bodyend="3786"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gad94ac8b683df176e39944d0d2aff7501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the trigger for background scan request source.<linebreak/>
<linebreak/>
By using this API the trigger will be activated for the scan request source. The trigger signal and trigger edge will be selected from the BRSCTRL register. The Selection of a input will be done by <ref refid="group___v_a_d_c_1ga1dc24406fa9e95d845a8095728dcbce4" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectTrigger()</ref>. A call to this API would configure the register bit field BRSMR.ENTR.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga1dc24406fa9e95d845a8095728dcbce4" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectTrigger()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gaa2a92785dd1bfeda948728c15c7205f7" kindref="member">XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3738" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3738" bodyend="3743"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga424f2cfadf7566780a290be6b34a63cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 uint32_t Returns the total channels pending for conversion. <linebreak/>
Range: [0x0 to (0x8*number of groups)]</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the number of pending channels.<linebreak/>
<linebreak/>
This API will read the pending channels register and will return the number of channels that are awaiting conversion. When a load event occurs the scan sequence is pushed to a pending conversion register. From the pending register the channels are taken up by the converter. When the API is called it would return the total number of channels pending (BRSPND[<bold>grp_num</bold>]).</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gad6e756229d4b42d79c942f594895e880" kindref="member">XMC_VADC_GLOBAL_BackgroundIsChannelPending()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga2c6d9214be3444f9e6fc7944523c6b09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the service request event is raised. returns false if the service request event was not raised.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determines if the request source event is asserted.<linebreak/>
 This API will get the status of the background scan request source event. Will return a true if the event has occurred for background scan. A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3718" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3718" bodyend="3722"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga2a669e00443f963546fdbe05a1eb0084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundInit</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1ga5df621dbf8385ce88a2fbe632a75d02d" kindref="member">XMC_VADC_BACKGROUND_CONFIG_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to initialization data structure</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Description:</title><para>Initializes the Background scan functional block.<linebreak/>
<linebreak/>
The BACKGROUND SCAN request source functional block converts channels of all VADC groups that have not been assigned as a priority channel (priority channels can be converted only by queue and scan). Background Scan request source converts the unprioritized channels. Unprioritized channels however can also be used with queue and scan. But a channel which is prioritized can not be used with background request source.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga63f7baff861c509eeb73f7794eff890a" kindref="member">XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga3058d26882687fd994756615eb7b5b3d" kindref="member">XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga1dc24406fa9e95d845a8095728dcbce4" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectTrigger()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gacba7a4847be06bb2e71493eabf9bbb69" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectGating()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gad6e756229d4b42d79c942f594895e880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GLOBAL_BackgroundIsChannelPending</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t grp_num, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundIsChannelPending</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>grp_num</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grp_num</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the VADC group whose unprioritized channels have been assigned to background scan RS </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel being audited for completion of conversion <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the channel is pending conversion else returns false</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determine if the channel is pending.<linebreak/>
<linebreak/>
This API will check if the Channel in question is awaiting conversion in the current arbitration round. When a load event occurs the scan sequence is pushed to a pending conversion register. From the pending register the channels are taken up by the converter. This API would return true if the channel is found in the pending register (BRSPND[<bold>grp_num</bold>]).</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga424f2cfadf7566780a290be6b34a63cd" kindref="member">XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3634" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3634" bodyend="3644"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa2480a6ce2dcd7dd7478dc35a5b20774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t grp_num, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>grp_num</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grp_num</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the VADC group whose unprioritized channels have been assigned to background scan Request source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The unprioritized channel meant to be added to the scan sequence <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Removes a channel to the background scan sequence.<linebreak/>
<linebreak/>
Call this API to insert a new single channel into the background scan request source. This will be added to the scan sequence. The added channel will be part of the conversion sequence when the next load event occurs. A call to this API would configure the register bit fields of BRSSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga67c4d922e3b0a4abbaefde613a2a3c00" kindref="member">XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3575" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3575" bodyend="3585"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gacba7a4847be06bb2e71493eabf9bbb69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundSelectGating</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t input_num)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundSelectGating</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>input_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Module input signal meant to be selected as gating input Accepts enum <ref refid="group___v_a_d_c_1gaa16f1136a4a4efddcd67ebd5fc69bc9f" kindref="member">XMC_VADC_GATE_INPUT_SELECT_t</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Select Gating signal for Background request source.<linebreak/>
<linebreak/>
Passage of the trigger input to the request source can be controlled via a gating signal. Any one of the 16 input lines can be chosen as a gating signal. Trigger signal can be given to the Background request source only when the gating signal&apos;s active level is detected. Additionally the GxBRSMR.ENGT has to be configured for the gating signal&apos;s active level. A call to this API would configure the register bit field BRSCTRL.GTSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga1dc24406fa9e95d845a8095728dcbce4" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga1dc24406fa9e95d845a8095728dcbce4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundSelectTrigger</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t input_num)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundSelectTrigger</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>input_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Choice of the input earmarked as a trigger line Accepts enum <ref refid="group___v_a_d_c_1gab71bdae1d928ee308430626a761eab97" kindref="member">XMC_VADC_TRIGGER_INPUT_SELECT_t</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Select Trigger signal for Background request source.<linebreak/>
<linebreak/>
A Background request source will raise conversion request only if there were either a request from application or occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. This is needed when a hardware trigger is needed for the conversion of the Background request source. Refer to the reference manual to determine the signal that needs to be connected. A call to this API would configure the register bit field BRSCTRL.XTSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gacba7a4847be06bb2e71493eabf9bbb69" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectGating()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gad94ac8b683df176e39944d0d2aff7501" kindref="member">XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaea3cd4f61981bbc16074a4301b2c1fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_TRIGGER_EDGE_t trigger_edge)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gaabd0d22cd15f13e6e49809a3b811b241" kindref="member">XMC_VADC_TRIGGER_EDGE_t</ref></type>
          <declname>trigger_edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the trigger edge </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Select Trigger edge for Background request source.<linebreak/>
<linebreak/>
A Background request source will raise conversion request only if there were either a request from application or occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger edge. This is needed when a hardware trigger is needed for the conversion of the Background request source. A call to this API would configure the register bit field BRSCTRL.XTMODE.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gacba7a4847be06bb2e71493eabf9bbb69" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectGating()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gad94ac8b683df176e39944d0d2aff7501" kindref="member">XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga8c8708cf159e5c190926e0873f4055ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundSetGatingMode</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_GATEMODE_t mode_sel)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundSetGatingMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1ga4db02e3b835b8cad941ab60ae288f8c8" kindref="member">XMC_VADC_GATEMODE_t</ref></type>
          <declname>mode_sel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_sel</parametername>
</parameternamelist>
<parameterdescription>
<para>Select how the gating is applied to the background scan request source </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<bold>Details of function</bold><linebreak/>
 Selects the gating mode of background request source.<linebreak/>
<linebreak/>
Passage of the trigger input to the request source can be controlled via a gating signal. This API determines how the gating signal behaves, either active low or active high. If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the <emphasis>mode_sel</emphasis>. A call to this API would configure the register bit field BRSMR.ENGT.</para><para><simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gacba7a4847be06bb2e71493eabf9bbb69" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectGating()</ref>; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3401" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3401" bodyend="3411"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga7f53b56af0d025239dbbcd80af5a5481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref></type>
          <declname>sr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>The service request to which the global request source event is connected. Refer <ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref> enum</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Binds the background request source event to one of the 4 shared service requests.<linebreak/>
<linebreak/>
 This API binds the background request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register with the corresponding <emphasis>sr</emphasis> line.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaa9738610187d2b11716c5faa07e214c7" kindref="member">XMC_VADC_GLOBAL_SetResultEventInterruptNode()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1929" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga599af86b8424e4e378f20dc1952b4cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundTriggerConversion</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundTriggerConversion</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Generates conversion request (Software initiated conversion).<linebreak/>
<linebreak/>
A conversion request can be raised either upon detection of a hardware trigger, or by software. This API forces the scan unit to generate a conversion request to the analog converter. It is assumed that the background scan has already been filled up with entries. A call to this API would set the register bit field BRSMR.LDEV.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3474" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3474" bodyend="3478"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga0fdfbc995a8b763c210c044d2d979814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Manually asserts the conversion complete request source event.<linebreak/>
<linebreak/>
This API will set the request source event for background scan. This will trigger a interrupt if the service node pointer for the scan has been configured. A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3678" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3678" bodyend="3682"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga2b17cb1350c5d568783f96f721348928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_BindGroupToEMux</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, const uint32_t group)</argsstring>
        <name>XMC_VADC_GLOBAL_BindGroupToEMux</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>emuxif</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emuxif</parametername>
</parameternamelist>
<parameterdescription>
<para>The EMUX interface<linebreak/>
Range[0x0 - 0x1] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>The VADC group which must be bound to the desired emux</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Binds a VADC <emphasis>group</emphasis> to an EMUX interface specified in <emphasis>emuxif</emphasis>.<linebreak/>
<linebreak/>
Selects which group&apos;s scan request source will control the EMUX interface (set of control select lines for the EMUX). By passing <bold>group</bold> it would configure that group&apos;s scan request source to control the EMUX select lines of the set <bold>emuxif</bold>.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1766" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gae6a4d9c2ba0621bef3d077e899754bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_ClearEvent</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t event_type)</argsstring>
        <name>XMC_VADC_GLOBAL_ClearEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>event_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Event that must be acknowledged Use the enum <ref refid="group___v_a_d_c_1gaa69659f0a647c58e6a0c434759a5f358" kindref="member">XMC_VADC_GLOBAL_EVENT_t</ref> to create a mask to be used with this argument</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Acknowledges an event that has been asserted manually or automatically.<linebreak/>
<linebreak/>
 This API acknowledges the requested event by clearing GLOBEFLAG sticky flag.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1889" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1889" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaf5ec0ac1eedfeedd49e8f84e0e1147fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_ClockInit</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLOCK_t *config)</argsstring>
        <name>XMC_VADC_GLOBAL_ClockInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_o_c_k__t" kindref="compound">XMC_VADC_GLOBAL_CLOCK_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data structure containing clock configuration data</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the VADC clock.<linebreak/>
<linebreak/>
Sets up the clock configuration of the VADC module using the config structure pointed by <emphasis>config</emphasis>. The clock to the analog converter and to the request source arbiter is configured by setting the GLOBCFG register.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1550" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1550" bodyend="1556"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa02b1286238761c5d6c1a42f552463df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_DisableModule</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_VADC_GLOBAL_DisableModule</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the VADC module.<linebreak/>
<linebreak/>
This API would gate the clock to the VADC module (if applicable). Also this API would put the VADC module into the reset state(if applicable) by asserting the appropriate registers. This API would invoke <ref refid="group___s_c_u_1gab0af70f90b9a1f24d3a0a4764543d833" kindref="member">XMC_SCU_CLOCK_GatePeripheralClock()</ref> and XMC_SCU_RESET_AssertPeripheralReset() if needed.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga9751f6e7d01d01dcd69f939cc7acfc48" kindref="member">XMC_VADC_GLOBAL_EnableModule()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaeada77d79207d448a245c39960cdc048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_DisableModuleClock</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_DisableModuleClock</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the VADC module clock.<linebreak/>
<linebreak/>
 After this API call, no conversion will occur. Call <ref refid="group___v_a_d_c_1ga70fe4b872487d7243db7622c3f9b5359" kindref="member">XMC_VADC_GLOBAL_EnableModuleClock()</ref> to enable the VADC module later in the program.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga3a03902554eb8c9ff9fdfb6f3e76dc2c" kindref="member">XMC_VADC_GLOBAL_Init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1488" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1488" bodyend="1492"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga91a285da9e41bf4ef81bec9eef95be57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_DisablePostCalibration</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)</argsstring>
        <name>XMC_VADC_GLOBAL_DisablePostCalibration</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>group_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group_number</parametername>
</parameternamelist>
<parameterdescription>
<para>group number whose post calibration feature is to be disabled. <linebreak/>
 Range[0x0 to 0x3] Accepts the enum <ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the post calibration for a particular group specified as <emphasis>group_number</emphasis>.<linebreak/>
<linebreak/>
 It configures the DPCAL0 bit of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and <ref refid="group___v_a_d_c_1gaf5ec0ac1eedfeedd49e8f84e0e1147fa" kindref="member">XMC_VADC_GLOBAL_ClockInit()</ref> before calling this API in sequence. Calling the API <ref refid="group___v_a_d_c_1ga10affbd1419c11a15022f6cf6cfc1f64" kindref="member">XMC_VADC_GLOBAL_EnablePostCalibration()</ref> can enable back the calibration feature at runtime.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>XMC_VADC_GLOBAL_Enable()<linebreak/>
 <ref refid="group___v_a_d_c_1gaf5ec0ac1eedfeedd49e8f84e0e1147fa" kindref="member">XMC_VADC_GLOBAL_ClockInit()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga91a285da9e41bf4ef81bec9eef95be57" kindref="member">XMC_VADC_GLOBAL_DisablePostCalibration()</ref><linebreak/>
 None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1672" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1672" bodyend="1677"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga3fdc0facec70f34cd38d018caca13141" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_DisableSleepMode</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_DisableSleepMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Ignores the sleep mode request for the VADC.<linebreak/>
<linebreak/>
With the sleep feature enabled, the module will respond to sleep requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the sleep mode.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga3693d7ff09be4b5594ca160dafb28064" kindref="member">XMC_VADC_GLOBAL_EnableSleepMode()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1527" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1527" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga8413b5d67494882776c5500b765424d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_DisableStartupCalibration</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_DisableStartupCalibration</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the startup calibration feature of the VADC module.<linebreak/>
<linebreak/>
 It configures the SUCAL bit of GLOBCFG register to disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibration() can enable the calibration feature at runtime.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1644" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1644" bodyend="1648"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga9751f6e7d01d01dcd69f939cc7acfc48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_EnableModule</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_VADC_GLOBAL_EnableModule</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the VADC module.<linebreak/>
<linebreak/>
This API would ungate the clock to the VADC module (if applicable). Also this API would bring the VADC module out of reset state(if applicable), by asserting the appropriate registers. This API would invoke <ref refid="group___s_c_u_1ga702904d10b6e6c6a55db381763fd322f" kindref="member">XMC_SCU_CLOCK_UngatePeripheralClock()</ref> and XMC_SCU_RESET_DeassertPeripheralReset() if needed. Directly accessed register is COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaa02b1286238761c5d6c1a42f552463df" kindref="member">XMC_VADC_GLOBAL_DisableModule()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga70fe4b872487d7243db7622c3f9b5359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_EnableModuleClock</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_EnableModuleClock</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the VADC module clock.<linebreak/>
<linebreak/>
 Call this API before any further configuration of VADC. It sets the DISR bit of CLC register to enable.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga3a03902554eb8c9ff9fdfb6f3e76dc2c" kindref="member">XMC_VADC_GLOBAL_Init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1468" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1468" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga10affbd1419c11a15022f6cf6cfc1f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_EnablePostCalibration</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)</argsstring>
        <name>XMC_VADC_GLOBAL_EnablePostCalibration</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>group_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group_number</parametername>
</parameternamelist>
<parameterdescription>
<para>group number whose post calibration feature is to be enabled. <linebreak/>
 Range[0x0 to 0x3] Accepts the enum <ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the post calibration for a particular group specified as <emphasis>group_number</emphasis>.<linebreak/>
<linebreak/>
 It configures the DPCAL0 bit of GLOBCFG register to enable the post calibration feature. Calling the API <ref refid="group___v_a_d_c_1ga91a285da9e41bf4ef81bec9eef95be57" kindref="member">XMC_VADC_GLOBAL_DisablePostCalibration()</ref> can disable the calibration feature at runtime.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga91a285da9e41bf4ef81bec9eef95be57" kindref="member">XMC_VADC_GLOBAL_DisablePostCalibration()</ref><linebreak/>
 None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1696" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1696" bodyend="1701"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga3693d7ff09be4b5594ca160dafb28064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_EnableSleepMode</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_EnableSleepMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables VADC module to sleep if a sleep request comes.<linebreak/>
<linebreak/>
It resets the EDIS bit of CLC register for enabling the sleep mode.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga3fdc0facec70f34cd38d018caca13141" kindref="member">XMC_VADC_GLOBAL_DisableSleepMode()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1507" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1507" bodyend="1511"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga2e6a5c936529f8bf35c81f662e5a57c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___v_a_d_c_1ga42e972915a3d2ac3b46847a4d5228c64" kindref="member">XMC_VADC_FAST_COMPARE_t</ref></type>
        <definition>XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_GetCompareResult</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>compare high or low. Refer <ref refid="group___v_a_d_c_1ga42e972915a3d2ac3b46847a4d5228c64" kindref="member">XMC_VADC_FAST_COMPARE_t</ref> enum</para></simplesect>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determines the result of fast compare operation.<linebreak/>
<linebreak/>
 This API returns the result of fast compare operation provided the valid flag in the global result register GLOBRES is set.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1847" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga7ae7ddbf6a4e2bc626ada83bcf72b56a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GLOBAL_GetDetailedResult</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_GetDetailedResult</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Complete global result register value GLOBRES</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Retrieves the complete result from the global result register associated with the <emphasis>global_ptr</emphasis>.<linebreak/>
<linebreak/>
 This API audits the result register GLOBRES for the validity of the data. If the validity is assured, data is first read the global result register, cached locally next and subsequently returned to the caller.</para></simplesect>
<simplesect kind="note"><para>You can cast the return to a varible of type <ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___d_e_t_a_i_l_e_d___r_e_s_u_l_t__t" kindref="compound">XMC_VADC_GLOBAL_DETAILED_RESULT_t</ref> to easily access the register bit fields</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga13f09c6935ff21f3c034199fd3bfe825" kindref="member">XMC_VADC_GLOBAL_GetResult()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1785" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1785" bodyend="1790"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga13f09c6935ff21f3c034199fd3bfe825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref></type>
        <definition>XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_GetResult</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_VADC_RESULT_SIZE_t 16 bit result register value.<linebreak/>
 Range[0x0 - 0X0FFF]</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Retrieves the conversion result from the global result register associated with the <emphasis>global_ptr</emphasis>.<linebreak/>
<linebreak/>
 This is a lightweight version of <ref refid="group___v_a_d_c_1ga7ae7ddbf6a4e2bc626ada83bcf72b56a" kindref="member">XMC_VADC_GLOBAL_GetDetailedResult()</ref>. The behavior is exactly the same, just that it is only the 16 bit numeric result returned back to the application instead of the complete GLOBRES register value.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga7ae7ddbf6a4e2bc626ada83bcf72b56a" kindref="member">XMC_VADC_GLOBAL_GetDetailedResult()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1807" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1807" bodyend="1812"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga3a03902554eb8c9ff9fdfb6f3e76dc2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_Init</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)</argsstring>
        <name>XMC_VADC_GLOBAL_Init</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_GLOBAL_CONFIG_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to initialization data structure</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Initializes the VADC global module with the associated configuration structure pointed by <emphasis>config</emphasis>.<linebreak/>
<linebreak/>
 It enables the global access to registers by configuring reset and clock un-gating for selected devices. It initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR registers. It also configures the global analog and digital clock dividers by setting GLOBCFG register. Refer related API&apos;s to change the configurations later in the program.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaf5ec0ac1eedfeedd49e8f84e0e1147fa" kindref="member">XMC_VADC_GLOBAL_ClockInit()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1452" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga2e65df86680f0bce4057ea37a495445d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_InputClassInit</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config, const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)</argsstring>
        <name>XMC_VADC_GLOBAL_InputClassInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_a_s_s__t" kindref="compound">XMC_VADC_GLOBAL_CLASS_t</ref></type>
          <declname>config</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gadf393a8c811d7ee6601688797e616646" kindref="member">XMC_VADC_GROUP_CONV_t</ref></type>
          <declname>conv_type</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>set_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Conversion class parameter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conv_type</parametername>
</parameternamelist>
<parameterdescription>
<para>configure the input call for either standard conversion or EMUX related conversion. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Conversion class set<linebreak/>
 Range: [0x0, 0x1]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Description:</title><para>Configures the ADC conversion settings like sample time and resolution.<linebreak/>
<linebreak/>
Sets up the conversion settings for vadc global resource associated with <emphasis>config</emphasis> structure. It configures the conversion class properties like sampling time and resolution for selected <emphasis>conv_type</emphasis> channels. It initializes the GLOBALICLASS register specified by <emphasis>set_num</emphasis> with the required settings.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1579" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa30f659438385897376765d156118654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_ResultInit</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_CONFIG_t *config)</argsstring>
        <name>XMC_VADC_GLOBAL_ResultInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___r_e_s_u_l_t___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_RESULT_CONFIG_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC global module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to result configuration data structure</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Initializes global result register.<linebreak/>
<linebreak/>
Initializes Global Result Register with specified settings configured in the <emphasis>config</emphasis> structure.<linebreak/>
<linebreak/>
 This API results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode, global result event , wait for read mode on the GLOBRES register.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1601" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1601" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gae55dd1c7a50cabe7d188e56e79319dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SetBoundaries</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, const uint32_t boundary1)</argsstring>
        <name>XMC_VADC_GLOBAL_SetBoundaries</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>boundary0</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>boundary1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundary0</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary-0 Value<linebreak/>
Range[0 - 4095] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundary1</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary-1 Value<linebreak/>
Range[0 - 4095]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Programs the boundaries with <emphasis>boundary0</emphasis> and boundary1 for result comparison.<linebreak/>
<linebreak/>
 These two boundaries can serve as absolute boundaries. They define a range against which the result of a conversion can be compared. In the fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any case, these boundary values entered here form a boundary pallete. There are dedicated upper and lower boundary registers GLOBBOUND0 and GLOBBOUND1 who will derive their values from this palette.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gac239d3389baab5175eca043b6ac606b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SetCompareValue</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZE_t compare_val)</argsstring>
        <name>XMC_VADC_GLOBAL_SetCompareValue</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref></type>
          <declname>compare_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare_val</parametername>
</parameternamelist>
<parameterdescription>
<para>Compare value which the result of a conversion will be compared against. <linebreak/>
Range[0x0 - 0X0FFF]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Set compare value in the global result register for fast compare mode.<linebreak/>
<linebreak/>
 The result of a conversion will directly be compared to the compare value entered as part of <emphasis>compare_val</emphasis>. The prerequisite is that the channel associated with this global register must select an ICLASS which has the conversion mode configured as fast compare mode. Call <ref refid="group___v_a_d_c_1ga2e6a5c936529f8bf35c81f662e5a57c9" kindref="member">XMC_VADC_GLOBAL_GetCompareResult()</ref> after this API to</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1831" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaf0cebde428e6c88a8285b68449de8f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SetIndividualBoundary</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_CHANNEL_BOUNDARY_t selection, const uint16_t boundary_value)</argsstring>
        <name>XMC_VADC_GLOBAL_SetIndividualBoundary</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1ga203ae2271679fb3e05d185a6bd14b8b2" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_t</ref></type>
          <declname>selection</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>boundary_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selection</parametername>
</parameternamelist>
<parameterdescription>
<para>The boundary value selected for <bold>boundary_value</bold>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundary_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary Value<linebreak/>
Range[0 - 4095]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Programs either the boundary 0 or boundary 1 for result comparison.<linebreak/>
<linebreak/>
 This defines a range against which the result of a conversion can be compared. In the fast compare mode, the two boundaries provide hysteresis capability to a compare value.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1743" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa9738610187d2b11716c5faa07e214c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SetResultEventInterruptNode</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)</argsstring>
        <name>XMC_VADC_GLOBAL_SetResultEventInterruptNode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref></type>
          <declname>sr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>The service request to which the global result event is connected. Refer <ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref> enum</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Binds the global result event to one of the 4 shared service requests.<linebreak/>
<linebreak/>
 This API binds the global result event to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the corresponding <emphasis>sr</emphasis> line.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga7f53b56af0d025239dbbcd80af5a5481" kindref="member">XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1912" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga5a6f38a564aefe7665c4df7c609aa1e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop</definition>
        <argsstring>(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_SHS_LOOP_CH_t loop_select)</argsstring>
        <name>XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref> *const</type>
          <declname>shs_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1gae43c31aa12cebdad8a95072453ce71b8" kindref="member">XMC_VADC_SHS_LOOP_CH_t</ref></type>
          <declname>loop_select</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shs_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Sample and hold module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loop_select</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta sigma loop number for which the configurations applies </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disable the selected delta sigma loop.<linebreak/>
<linebreak/>
Configures the SHS_LOOP.LPENx bit field.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gace104f134291b019923842a26872d805" kindref="member">XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()</ref><linebreak/>
. XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<linebreak/>
. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2270" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2270" bodyend="2280"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga9d9cbddc95a0d8ed1d8e3b9520bcc0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop</definition>
        <argsstring>(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_SHS_LOOP_CH_t loop_select)</argsstring>
        <name>XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref> *const</type>
          <declname>shs_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1gae43c31aa12cebdad8a95072453ce71b8" kindref="member">XMC_VADC_SHS_LOOP_CH_t</ref></type>
          <declname>loop_select</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shs_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Sample and hold module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loop_select</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta sigma loop number for which the configurations applies </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enable the selected Delta-Sigma loop.<linebreak/>
<linebreak/>
Configures the SHS_LOOP.LPENx bit field.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gace104f134291b019923842a26872d805" kindref="member">XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()</ref><linebreak/>
. XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<linebreak/>
. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2246" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2246" bodyend="2255"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gacbee02fbd290c66b2960df5f6ba18630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SHS_Init</definition>
        <argsstring>(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFIG_t *config)</argsstring>
        <name>XMC_VADC_GLOBAL_SHS_Init</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref> *const</type>
          <declname>shs_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___s_h_s___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_GLOBAL_SHS_CONFIG_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shs_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Sample and hold module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Struct consisting of various SHS related configurations.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configure the basic SHS parameters.<linebreak/>
<linebreak/>
API would initialize the clock divider configuration, the analog reference selection and the calibration order for the Sample and Hold unit.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1946" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa416263f08801fb2b42aca3ea979d77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GLOBAL_SHS_IsConverterReady</definition>
        <argsstring>(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_SHS_IsConverterReady</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref> *const</type>
          <declname>shs_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shs_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Sample and hold module</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the analog converter is operable returns false if the analog converter is powered down</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the converter status.<linebreak/>
<linebreak/>
Returns the ANRDY bit field of the SHSCFG register.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2009" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2009" bodyend="2014"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga3687cc7be37530b4b27d920bf7c817ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SHS_SetAnalogReference</definition>
        <argsstring>(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_AREF_t aref)</argsstring>
        <name>XMC_VADC_GLOBAL_SHS_SetAnalogReference</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref> *const</type>
          <declname>shs_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1ga66c363caf91b81a17ffd84aa75dd54d2" kindref="member">XMC_VADC_GLOBAL_SHS_AREF_t</ref></type>
          <declname>aref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shs_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Sample and hold module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aref</parametername>
</parameternamelist>
<parameterdescription>
<para>Analog reference used for conversions. Refer <ref refid="group___v_a_d_c_1ga66c363caf91b81a17ffd84aa75dd54d2" kindref="member">XMC_VADC_GLOBAL_SHS_AREF_t</ref> enum</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Selection of the reference voltage that is required for conversions (VREF).</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1960" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1960" bodyend="1967"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gac97ed253a1995c6a76a03653d267e130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SHS_SetClockDivider</definition>
        <argsstring>(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint8_t divs_value)</argsstring>
        <name>XMC_VADC_GLOBAL_SHS_SetClockDivider</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref> *const</type>
          <declname>shs_ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>divs_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shs_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Sample and hold module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>divs_value</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock divider value that is possible <linebreak/>
Range:[0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configure Sample and hold clock divider value.<linebreak/>
<linebreak/>
API would initialize the clock divider configuration. This determines the frequency of conversion of the Sample and hold converter.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2086" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2086" bodyend="2095"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga877757ed311cfa96c56fd5f18448fac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SHS_SetGainFactor</definition>
        <argsstring>(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint8_t gain_value, XMC_VADC_GROUP_INDEX_t group_num, uint8_t ch_num)</argsstring>
        <name>XMC_VADC_GLOBAL_SHS_SetGainFactor</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref> *const</type>
          <declname>shs_ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>gain_value</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref></type>
          <declname>group_num</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shs_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Sample and hold module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain_value</parametername>
</parameternamelist>
<parameterdescription>
<para>gain value possible Range:[0x0 to 0x3] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The Group number for which the configurations applies </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel number for which the gain has to be configured </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configure the gain value for SHS.<linebreak/>
<linebreak/>
API would set the gain factor for a selected channel.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gace104f134291b019923842a26872d805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop</definition>
        <argsstring>(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP_INDEX_t group_num, XMC_VADC_SHS_LOOP_CH_t loop_select, uint8_t ch_num)</argsstring>
        <name>XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref> *const</type>
          <declname>shs_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref></type>
          <declname>group_num</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1gae43c31aa12cebdad8a95072453ce71b8" kindref="member">XMC_VADC_SHS_LOOP_CH_t</ref></type>
          <declname>loop_select</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shs_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Sample and hold module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The Group number for which the configurations applies </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loop_select</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta sigma loop number for which the configurations applies </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number for which the configurations applies </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the delta sigma loop of the SHS.<linebreak/>
<linebreak/>
There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_select) with the appropriate group_num and channel_num. Configures the SHS_LOOP bit fields.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga9d9cbddc95a0d8ed1d8e3b9520bcc0bd" kindref="member">XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()</ref><linebreak/>
. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga8c267fe37fbdf8654d14f46acf2d3b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_StartupCalibration</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr)</argsstring>
        <name>XMC_VADC_GLOBAL_StartupCalibration</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the startup calibration feature of the VADC module.<linebreak/>
<linebreak/>
 It configures the SUCAL bit of GLOBCFG register to enable the startup calibration feature. After turning it on, it loops until all active groups finish calibration. Call XMC_VADC_GLOBAL_Enable() and <ref refid="group___v_a_d_c_1gaf5ec0ac1eedfeedd49e8f84e0e1147fa" kindref="member">XMC_VADC_GLOBAL_ClockInit()</ref> before calling this API in sequence. Calling the API <ref refid="group___v_a_d_c_1ga8413b5d67494882776c5500b765424d6" kindref="member">XMC_VADC_GLOBAL_DisableStartupCalibration()</ref> can disable the calibration feature at runtime.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>XMC_VADC_GLOBAL_Enable()<linebreak/>
 <ref refid="group___v_a_d_c_1gaf5ec0ac1eedfeedd49e8f84e0e1147fa" kindref="member">XMC_VADC_GLOBAL_ClockInit()</ref><linebreak/>
 None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa4880cd1755d46ad1b0bd775d4e0ac49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GLOBAL_TriggerEvent</definition>
        <argsstring>(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t event_type)</argsstring>
        <name>XMC_VADC_GLOBAL_TriggerEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref> *const</type>
          <declname>global_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>event_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>global_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired event that must be manually asserted Use the enum <ref refid="group___v_a_d_c_1gaa69659f0a647c58e6a0c434759a5f358" kindref="member">XMC_VADC_GLOBAL_EVENT_t</ref> to create a mask to be used with this argument </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Manually asserts an event that can lead to an interrupt.<linebreak/>
<linebreak/>
 This API manually asserts the requested event (Background request source event or a global result event) by setting the GLOBEVFLAG register with the specified <emphasis>event_type</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="1865" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="1865" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaf2c5118b682ff5c4820400ea362b3cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_AddResultToFifo</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_AddResultToFifo</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Register which is required to be a part of results FIFO <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Adds result register to Result FIFO.<linebreak/>
<linebreak/>
Sometimes, the rate of consumption of results by application software may not match the rate at which the results are produced. A Result FIFO thus helps a slow consumer to read out results without loss of data. When a result register is added to fifo, it is in fact chained to its higher numbered neighbor. For example, if Result Register-5 is to be added to FIFO, it gets chained to Result Register-6. Results are written to Register-6 while the same can be read out of Register-5 leisurely by software. A call to this API would configure the register bit field GxRCR.FEN.</para></simplesect>
<simplesect kind="par"><title>Note:</title><para>The FIFO is always read by the software with the lowest numbered result register. The hardware will write the results from the highest numbered result register.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4704" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga3058d26882687fd994756615eb7b5b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_BackgroundDisableArbitrationSlot</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group which may receive a conversion request from background request source </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables arbitration slot of the Background request source.<linebreak/>
<linebreak/>
If the Background request source must have its conversion request considered by the arbiter, it must participate in the arbitration rounds. Even if a load event occurs the Background channel can only be converted when the arbiter comes to the Background slot.A call to this API will lead to all conversions request by Background to be blocked. A call to this API would configure the register bit field GxARBPR.ASEN2</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga63f7baff861c509eeb73f7794eff890a" kindref="member">XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3320" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3320" bodyend="3324"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga63f7baff861c509eeb73f7794eff890a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_BackgroundEnableArbitrationSlot</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group which may receive a conversion request from background request source</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables arbitration slot of the Background request source.<linebreak/>
<linebreak/>
If the Background request source must have its conversion request considered by the arbiter, it must participate in the arbitration rounds. Even if a load event occurs the Background channel can only be converted when the arbiter comes to the Background slot. Thus this must be enabled if any conversion need to take place. A call to this API would configure the register bit field GxARBPR.ASEN2.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga3058d26882687fd994756615eb7b5b3d" kindref="member">XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3298" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3298" bodyend="3302"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga76846cba41d6ea170992e6b5ea61d957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ChannelClearEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_ChannelClearEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose channel event is to be acknowledged <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Acknowledges a Channel event.<linebreak/>
<linebreak/>
When a channel event is raised after the conversion of that channel, it has to be cleared. This API would clear the Channel event of a particular channel if it has occurred. A call to this API would configure the register bit fields of GxCEFCLR.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga495788bc643c2c9d51444edddcb0d3cb" kindref="member">XMC_VADC_GROUP_ChannelTriggerEvent()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4576" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4576" bodyend="4582"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga0a71564a0703f2d0e4d3bbb329c76e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GROUP_ChannelGetAssertedEvents</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ChannelGetAssertedEvents</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returns the asserted channel events</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the Channel event flag register.<linebreak/>
<linebreak/>
The return is merely the channel events which are asserted. A call to this API would read the register bit fields of GxCEFLAG.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga76846cba41d6ea170992e6b5ea61d957" kindref="member">XMC_VADC_GROUP_ChannelClearEvent()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4554" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4554" bodyend="4558"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gad554f725ef92cbbdf78d96af43e764b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" kindref="member">XMC_VADC_CHANNEL_CONV_t</ref></type>
        <definition>XMC_VADC_CHANNEL_CONV_t XMC_VADC_GROUP_ChannelGetInputClass</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_ChannelGetInputClass</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose result alignment is to be returned <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_VADC_CHANNEL_CONV_t Returns the configured input class for the <bold>ch_num</bold> </para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the channel&apos;s input class for conversion for the required channel.<linebreak/>
<linebreak/>
The sampling time and resolution can be taken from any of the 4 possible Input class registers. This API would return the input class register that is taken up by <bold>ch_num</bold> for conversion. A call to this API would read the register bit field GxCHCTR.RESPOS.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga285cba68d20e2b60001fcf3e727d54d1" kindref="member">XMC_VADC_GROUP_ChannelSetIclass()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4492" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4492" bodyend="4501"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gabe045650b5b6d51b47f88bc49843ff47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___v_a_d_c_1ga5db9760a1339267ae158e21ee3047859" kindref="member">XMC_VADC_RESULT_ALIGN_t</ref></type>
        <definition>XMC_VADC_RESULT_ALIGN_t XMC_VADC_GROUP_ChannelGetResultAlignment</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_ChannelGetResultAlignment</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose result alignment is to be returned <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_VADC_RESULT_ALIGN_LEFT if the result are aligned to the left XMC_VADC_RESULT_ALIGN_RIGHT if the result are aligned to the right</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the channel result alignment.<linebreak/>
<linebreak/>
The results are aligned either to the left or to the right. A left aligned 10bit resolution has its LSB at bit2 where as a left aligned 8bit resolution starts at bit4. A call to this API would return the currently configured alignment value. A call to this API would read the register bit field GxCHCTR.RESPOS.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4464" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4464" bodyend="4473"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gae5c0071a3d6728dad1f4ddcb06f6bed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t XMC_VADC_GROUP_ChannelGetResultRegister</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_ChannelGetResultRegister</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose associated result register is to be found <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t returns the Group result register to which it is linked to. <linebreak/>
Range: [0x0 to 0xF]</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the result register associated with this channel.<linebreak/>
<linebreak/>
 There are upto 16 result registers which a channel can choose from to store the results of conversion. This returns only the group related result registers. A call to this API would access the register bit field GxCHCTR.RESREG.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga88e0f4deb5ddd8a85c786a6291327fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ChannelInit</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num, const XMC_VADC_CHANNEL_CONFIG_t *config)</argsstring>
        <name>XMC_VADC_GROUP_ChannelInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___c_h_a_n_n_e_l___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_CHANNEL_CONFIG_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel being initialized <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to initialization data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Initializes the ADC channel for conversion.<linebreak/>
<linebreak/>
This API will do the channel related initializations. This includes configuration of the CHCTR settings and boundary flag settings. This must be called in the application in order to enable the conversion of a channel. After a request source has been initialized this API has to be called for each channel that has to be converted. A call to this API would configure the registers GxCHCTR GxBFL GxALIAS GxCHASS GxBFLC(depending on device) in order to configure the channel.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaf864b20c64882d1c78712892dbeae965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_ChannelIsResultOutOfBounds</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose input was converted <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool Returns true if there was violation w.r.t the specified boundaries.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determines if the result of the channel confines with the specified boundaries.<linebreak/>
<linebreak/>
An application may not necessarily always need to know the exact value of the converted result, but merely an indication if the generated result is within stipulated boundaries. Generation of Channel event can be subject to channel event generation criteria (Generate always, Never generate, Generate if result is out of bounds, Generate if result is within bounds). When interrupts are not enabled, this API can be used to determine the nature of the result. A call to this API would access the registers GxCHCTR and GxCEFLAG in order to determine if a violation has occured.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga0bb0fea79161f556b09b65f3a5a5ce16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ChannelSetBoundarySelection</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num, XMC_VADC_BOUNDARY_SELECT_t boundary_sel, XMC_VADC_CHANNEL_BOUNDARY_t selection)</argsstring>
        <name>XMC_VADC_GROUP_ChannelSetBoundarySelection</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1ga23f503143ad7d53a741328bf71faa03e" kindref="member">XMC_VADC_BOUNDARY_SELECT_t</ref></type>
          <declname>boundary_sel</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1ga203ae2271679fb3e05d185a6bd14b8b2" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_t</ref></type>
          <declname>selection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose channel event is being configured <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundary_sel</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the upper/lower boundary configuration . </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selection</parametername>
</parameternamelist>
<parameterdescription>
<para>The boundary value selected for <bold>boundary_sel</bold>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configure the boundary selection for the given channel<linebreak/>
<linebreak/>
The channel event can be generated under the following conditions - Always, Never, Result Out of bounds and Result inside the boundaries. The boundary values to which results are compared can be selected from several sources. A call to this API would configure the register bit field GxCHCTR.BNDSELL or GxCHCTR.BNDSELU .</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga8b2d0baaf1e9113c61ef28c7d45e9feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ChannelSetEventInterruptNode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num, const XMC_VADC_SR_t sr)</argsstring>
        <name>XMC_VADC_GROUP_ChannelSetEventInterruptNode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref></type>
          <declname>sr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose channel event is to be connected to a service request line <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>The service request line to which the channel event is to be connected </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Binds a channel event to a requested Service Request line.<linebreak/>
<linebreak/>
The channel event is connected to a service request line. For an event to result in an interrupt, this service request line must be enabled in VADC and the NVIC node which this service request line is connected to must have interrupt generation enabled. A call to this API would configure the register bit fields of GxCEVNP0.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga495788bc643c2c9d51444edddcb0d3cb" kindref="member">XMC_VADC_GROUP_ChannelTriggerEvent()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga76846cba41d6ea170992e6b5ea61d957" kindref="member">XMC_VADC_GROUP_ChannelClearEvent()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga285cba68d20e2b60001fcf3e727d54d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ChannelSetIclass</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num, const XMC_VADC_CHANNEL_CONV_t conversion_class)</argsstring>
        <name>XMC_VADC_GROUP_ChannelSetIclass</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" kindref="member">XMC_VADC_CHANNEL_CONV_t</ref></type>
          <declname>conversion_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose conversion class is to be configured <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conversion_class</parametername>
</parameternamelist>
<parameterdescription>
<para>conversion property to be associated with this channel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Selects the conversion class registers.<linebreak/>
<linebreak/>
It configures the channel to have a particular conversion class properties like sampling time and resolution. A call to this API would configure the register bit field GxCHCTR.ICLSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gad554f725ef92cbbdf78d96af43e764b2" kindref="member">XMC_VADC_GROUP_ChannelGetInputClass()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga02ef37668d4c2692d73b9b028202a923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ChannelSetInputReference</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num, const XMC_VADC_CHANNEL_REF_t ref)</argsstring>
        <name>XMC_VADC_GROUP_ChannelSetInputReference</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gab0c1eb7f8d8743b6b98ebfe8acd14e28" kindref="member">XMC_VADC_CHANNEL_REF_t</ref></type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose input is to be converted <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference voltage </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Selects the reference voltage for conversion.<linebreak/>
<linebreak/>
An internal voltage reference (VARef) or an external voltage reference fed to Ch-0 can serve as a voltage reference for conversions. A call to this API would configure the register bit field GxCHCTR.REFSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga6db93a7e9cdeb07b7e9ef1d2f34defd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ChannelSetResultRegister</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num, const uint32_t result_reg_num)</argsstring>
        <name>XMC_VADC_GROUP_ChannelSetResultRegister</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>result_reg_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose i/p is to be converted <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_reg_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register associated with this channel </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Selects the target result register.<linebreak/>
<linebreak/>
There are upto 16 result registers which a channel can choose from to store the results of conversion. This selects only the group related result registers. A call to this API would configure the register bit field GxCHCTR.RESREG.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga495788bc643c2c9d51444edddcb0d3cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ChannelTriggerEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_ChannelTriggerEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose channel event is to be asserted <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Manually asserts a Channel event.<linebreak/>
<linebreak/>
It is merely the channel event which is asserted. For this asserted event to lead to an interrupt, it must have been bound to an SR and that SR must have been enabled. It can potentially lead to an interrupt if the SR line is connected to an NVIC node. A call to this API would configure the register bit fields of GxCEFLAG.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga76846cba41d6ea170992e6b5ea61d957" kindref="member">XMC_VADC_GROUP_ChannelClearEvent()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga2a6ebe138cbedaba37f2333ccfb068a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num, const XMC_VADC_CHANNEL_EVGEN_t criteria)</argsstring>
        <name>XMC_VADC_GROUP_ChannelTriggerEventGenCriteria</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1ga1b6bf4c15562eef67deac95cb36a48d6" kindref="member">XMC_VADC_CHANNEL_EVGEN_t</ref></type>
          <declname>criteria</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose channel event is being configured <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>criteria</parametername>
</parameternamelist>
<parameterdescription>
<para>The condition under which the channel may assert its channel event </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Defines the conditions under which a channel may assert its channel event.<linebreak/>
<linebreak/>
The channel event can be generated under the following conditions - Always, Never, Result Out of bounds and Result inside the boundaries. A call to this API would configure the register bit field GxCHCTR.CHEVMODE.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga495788bc643c2c9d51444edddcb0d3cb" kindref="member">XMC_VADC_GROUP_ChannelTriggerEvent()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga76846cba41d6ea170992e6b5ea61d957" kindref="member">XMC_VADC_GROUP_ChannelClearEvent()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga8b2d0baaf1e9113c61ef28c7d45e9feb" kindref="member">XMC_VADC_GROUP_ChannelSetEventInterruptNode()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga22b85c7c9fc777c05d74f1ae2a7cc9ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_CheckSlaveReadiness</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)</argsstring>
        <name>XMC_VADC_GROUP_CheckSlaveReadiness</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>slave_group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the master VADC Group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slave_group</parametername>
</parameternamelist>
<parameterdescription>
<para>The slave VADC Group number <linebreak/>
Range: [0x0 to 0x3] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the ready signal for master group.<linebreak/>
<linebreak/>
This API would read the <bold>slave_group</bold> number and determine which EVAL configuration to apply for the given master slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically numbered channels across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slave groups. Before the master can request its slaves for synchronized conversion, it has the option of checking the readiness of the slaves.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga8e04b2a4deb50a629b3e80bcfeafa14d" kindref="member">XMC_VADC_GROUP_IgnoreSlaveReadiness()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gae1406cd26c69119e3a181b38f9d1fd26" kindref="member">XMC_VADC_GROUP_SetSyncMaster()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaf4178ad4431b23112dbc89e8e258bc22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ClearResultEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_ClearResultEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register for which the result event is being acknowledged <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Acknowledges a Result event.<linebreak/>
<linebreak/>
When a Result event is raised after the conversion of that associated channel has produced a result and it has to be cleared. This API would clear the Channel event of a particular channel if it has occurred. A call to this API would access the register bit fields of GxREFCLR.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga495788bc643c2c9d51444edddcb0d3cb" kindref="member">XMC_VADC_GROUP_ChannelTriggerEvent()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4929" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4929" bodyend="4934"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga2b5c2e50ccf150e33028b51577c57749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_DisableChannelSyncRequest</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_DisableChannelSyncRequest</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the master VADC Group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose conversion triggers conversion in slave groups </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disable the synchronization request for the particular channel specified as ch_num. To enable the synchronization call the API <ref refid="group___v_a_d_c_1gadb698bad87dcbc3fdf6ce8d6df1ecbb4" kindref="member">XMC_VADC_GROUP_EnableChannelSyncRequest()</ref>.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga356e5be65b3abe1ac62e58adfda17529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_DisableResultEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_DisableResultEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register for which event generation is to be disabled <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disable result event generation.<linebreak/>
<linebreak/>
This would just disable the event. It would not alter anything w.r.t the SR line if it was configured. A call to this API would configure the register bit field GxRCR.SRGEN.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gae1fa1ad973c5ab02b6a6a9ece61e1045" kindref="member">XMC_VADC_GROUP_EnableResultEvent()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4747" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4747" bodyend="4752"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gadb698bad87dcbc3fdf6ce8d6df1ecbb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_EnableChannelSyncRequest</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_EnableChannelSyncRequest</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the master VADC Group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel whose conversion triggers conversion in slave groups </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets up a channel for synchronized conversion.<linebreak/>
<linebreak/>
 Conversion of identically numbered channels across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slave groups.<linebreak/>
 Before the master can request its slaves for synchronized conversion, it has the option of checking the readiness of the slaves.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2537" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gae1fa1ad973c5ab02b6a6a9ece61e1045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_EnableResultEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_EnableResultEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register for which event generation is to be enabled <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables result event generation.<linebreak/>
<linebreak/>
Once the results of conversion are available, the result event (which is being enabled in this function) if connected to a service request line(Group or Shared service request) can lead to an interrupt. It is therefore not only necessary to enable the event, but also to connect it to a service request line. The service request generation capability must also be enabled and so should the corresponding NVIC node. A call to this API would configure the register bit field GxRCR.SRGEN.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga701140b8237cba836cbd4f1cd3393330" kindref="member">XMC_VADC_GROUP_SetResultInterruptNode()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4724" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4724" bodyend="4730"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga71ab6e09e78d8cca7fda70210d5d9d0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ExternalMuxControlInit</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)</argsstring>
        <name>XMC_VADC_GROUP_ExternalMuxControlInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t" kindref="compound">XMC_VADC_GROUP_EMUXCFG_t</ref></type>
          <declname>emux_cfg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emux_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>EMUX configuration structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures group EMUX parameters associated with the <emphasis>emux_cfg</emphasis> configuration structure.<linebreak/>
<linebreak/>
 An external emux interface allows additional channels to be connected to a VADC group. The conversion properties of such channels can be different from the standard channels which are directly connected to the VADC group. This API configures conversion properties of channels connected via EMUX interface.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2647" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2647" bodyend="2666"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gabb513e8317c33685db6e82c76c81d4ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GROUP_GetAlias</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_GetAlias</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t The complete GxALIAS register</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the ALIAS values.<linebreak/>
 The ALIAS value that is configured for Channel-0 and channel-1 are returned.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2703" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2703" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gab8150d5363128515d90811868cf39b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GROUP_GetAssertedResultEvents</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_GetAssertedResultEvents</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returns the asserted result events</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the Result event flag register.<linebreak/>
<linebreak/>
The return is merely the result events which are asserted. A call to this API would read the register bit fields of GxREFLAG.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gadd781581d9749d4f79c9d8a2b6570596" kindref="member">XMC_VADC_GROUP_TriggerResultEvent()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4907" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4907" bodyend="4911"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaf2c2aa711194c6d8712973744551d76c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t XMC_VADC_GROUP_GetChannelAlias</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t alias_ch_num)</argsstring>
        <name>XMC_VADC_GROUP_GetChannelAlias</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>alias_ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias_ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the alias channel (Ch-0 or Ch-1) <linebreak/>
Range:[0x0, 0x1] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t Channel which will be converted by <bold>alias_ch_num</bold>, when called by the request source.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Gets the channel to convert when a conversion on alias channel(<bold>alias_ch_num</bold>) is requested.<linebreak/>
<linebreak/>
 </para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaa9a9864939239099c1de61555e12d223" kindref="member">XMC_VADC_GROUP_SetChannelAlias()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4355" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4355" bodyend="4362"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga38c817eb225c4a684c4bbf5495981b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GROUP_GetDetailedResult</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_GetDetailedResult</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register from which the result of conversion is to be read out <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returns the complete result register GxRESy.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the result register completely (result of conversion as well as other info).<linebreak/>
<linebreak/>
The Result register will have information regarding the channel that is requesting the conversion, if the result is valid, if the fast compare bit, Data Reduction Counter, and the request source information. All these information will be returned back. And if the user is polling for the result he can use the result if the valid bit is set. A call to this API would return the complete register GxRES.</para></simplesect>
<simplesect kind="note"><para>You can cast the return to a varible of type <ref refid="struct_x_m_c___v_a_d_c___d_e_t_a_i_l_e_d___r_e_s_u_l_t__t" kindref="compound">XMC_VADC_DETAILED_RESULT_t</ref> to easily access the register bit fields</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gad190eca993528847f048cb3791bb1484" kindref="member">XMC_VADC_GROUP_GetResult()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4773" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4773" bodyend="4778"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga74c556f6be3e4ad892ad04afedf1f566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___v_a_d_c_1ga42e972915a3d2ac3b46847a4d5228c64" kindref="member">XMC_VADC_FAST_COMPARE_t</ref></type>
        <definition>XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_GetFastCompareResult</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register for which the compare value is being set <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___v_a_d_c_1ga42e972915a3d2ac3b46847a4d5228c64" kindref="member">XMC_VADC_FAST_COMPARE_t</ref> If the input is greater or lower than the compare value returns the appropriate enum. if the valid flag was not set then it would return XMC_VADC_FAST_COMPARE_UNKNOWN.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determines the input is greater/lower than the compare value.<linebreak/>
<linebreak/>
This API determines if the input is greater/lower than the preset compare value. A call to this API would access the register bit field GxRES.FCM.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga151403257b63a3307631979702dee524" kindref="member">XMC_VADC_GROUP_SetResultFastCompareValue()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4848" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaee20e2687198c9446da88b963d4a4c4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" kindref="compound">XMC_VADC_GROUP_CLASS_t</ref></type>
        <definition>XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_CHANNEL_CONV_t conv_class)</argsstring>
        <name>XMC_VADC_GROUP_GetInputClass</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" kindref="member">XMC_VADC_CHANNEL_CONV_t</ref></type>
          <declname>conv_class</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conv_class</parametername>
</parameternamelist>
<parameterdescription>
<para>conversion property to be extracted </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" kindref="compound">XMC_VADC_GROUP_CLASS_t</ref> The complete GxICLASSy register</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the input class configuration values.<linebreak/>
This returns the sampling time configuration and resolution configured in the appropriate group input class <bold>conv_class</bold>. A call to this API would return the register GxICLASSy.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2723" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2723" bodyend="2738"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga1b9afae465264f66c1fc05840ce2003a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_VADC_GROUP_GetPowerMode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_GetPowerMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Group.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_VADC_GROUP_POWERMODE_t Current power mode</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Retrieves the power mode of a VADC group.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gae435b6b66cac1abc05d17fd17d5caca6" kindref="member">XMC_VADC_GROUP_SetPowerMode()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2382" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2382" bodyend="2385"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gad190eca993528847f048cb3791bb1484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref></type>
        <definition>XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_GetResult</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register from which the result of conversion is to be read out <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_VADC_RESULT_SIZE_t Result register values. <linebreak/>
Range:<ulink url="Result of single conversion. Accumulated results not considered for range">0x0 to 0xFFF</ulink></para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the result of the conversion.<linebreak/>
<linebreak/>
This API will only return the result of the conversion and will strip out the other information that is present in the result register. A call to this API would access the register bit field GxRES.RESULT.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga38c817eb225c4a684c4bbf5495981b2b" kindref="member">XMC_VADC_GROUP_GetDetailedResult()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4796" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4796" bodyend="4803"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga902952b0e1027e6fecbd5743229f595c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GROUP_GetResultFifoHead</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_GetResultFifoHead</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register which forms a part of fifo <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returns the Result register number which is the head of the FIFO,<bold>res_reg</bold> is apart of this FIFO.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the the FIFO head (register to which the results are written by H/W).<linebreak/>
<linebreak/>
The analog converter writes to the head of the FIFO. It is the head of the FIFO which is bound to the channel. Applications read the result from the tail of the FIFO. This API would just return the head of the FIFO from where the results are being added to the FIFO. A call to this API would access the register bit field GxRCR.FEN.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga902952b0e1027e6fecbd5743229f595c" kindref="member">XMC_VADC_GROUP_GetResultFifoHead()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4993" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga233d039edab60b343aa4efef57d79cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GROUP_GetResultFifoTail</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_GetResultFifoTail</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register which forms a part of FIFO <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returns the Result register number which is the tail of the FIFO,<bold>res_reg</bold> is apart of this FIFO.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the the FIFO tail (register from where to read the results).<linebreak/>
<linebreak/>
The analog converter writes to the head of the FIFO. It is the head of the FIFO which is bound to the channel. Applications read the result from the tail of the FIFO. This API would return the result register from where a user can call the API <ref refid="group___v_a_d_c_1gad190eca993528847f048cb3791bb1484" kindref="member">XMC_VADC_GROUP_GetResult()</ref> to read the result stored in the FIFO. A call to this API would access the register bit field GxRCR.FEN.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga902952b0e1027e6fecbd5743229f595c" kindref="member">XMC_VADC_GROUP_GetResultFifoHead()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4974" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaf32f0439218c42086d7863d9d8307a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GROUP_GetSyncReadySignal</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_GetSyncReadySignal</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant Pointer to the VADC Group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t EVAL bits for the group</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Get the Eval bits of the group.<linebreak/>
<linebreak/>
For Synchronized conversion the master&apos;s ready signal configuration must be copied onto the slaves. A call to this API would return the Sync EVAL Bits (GxSYNCTR.EVALy) which can be used to set in the slaves.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga22b85c7c9fc777c05d74f1ae2a7cc9ac" kindref="member">XMC_VADC_GROUP_CheckSlaveReadiness()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga8e04b2a4deb50a629b3e80bcfeafa14d" kindref="member">XMC_VADC_GROUP_IgnoreSlaveReadiness()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2479" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2479" bodyend="2490"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga8e04b2a4deb50a629b3e80bcfeafa14d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_IgnoreSlaveReadiness</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)</argsstring>
        <name>XMC_VADC_GROUP_IgnoreSlaveReadiness</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>slave_group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant Pointer to the master VADC Group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slave_group</parametername>
</parameternamelist>
<parameterdescription>
<para>The slave VADC Group number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Clears the ready signal for master group.<linebreak/>
<linebreak/>
Ignores the readiness of slaves in synchronized conversions.This API would read the <bold>slave_group</bold> number and determine which EVAL configuration to apply for the given master slave set. Then clears the configuration if present. This API is called when the master should issue the conversion request without waiting for the slave to assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is completed in these channels.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga22b85c7c9fc777c05d74f1ae2a7cc9ac" kindref="member">XMC_VADC_GROUP_CheckSlaveReadiness()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gae1406cd26c69119e3a181b38f9d1fd26" kindref="member">XMC_VADC_GROUP_SetSyncMaster()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gac147b4cbfd00c81b136425fc8e70215d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_Init</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)</argsstring>
        <name>XMC_VADC_GROUP_Init</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_GROUP_CONFIG_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the initialization data structure</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Initializes the VADC group module with the associated configuration structure pointed by <emphasis>config</emphasis>.<linebreak/>
<linebreak/>
 It initializes the group specified as part of the <emphasis>group_ptr</emphasis>. It initializes group conversion class, arbiter configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also configures the EMUX control register if applicable. Refer related API&apos;s to change the configurations later in the program.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaa7a2bbb2f627f186c23ae8b93ebf34fc" kindref="member">XMC_VADC_GROUP_InputClassInit()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gae435b6b66cac1abc05d17fd17d5caca6" kindref="member">XMC_VADC_GROUP_SetPowerMode()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga5f2cda270ffbbc2dcf6879d66ddb94b8" kindref="member">XMC_VADC_GROUP_SetBoundaries()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga71ab6e09e78d8cca7fda70210d5d9d0b" kindref="member">XMC_VADC_GROUP_ExternalMuxControlInit()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa7a2bbb2f627f186c23ae8b93ebf34fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_InputClassInit</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config, const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)</argsstring>
        <name>XMC_VADC_GROUP_InputClassInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" kindref="compound">XMC_VADC_GROUP_CLASS_t</ref></type>
          <declname>config</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gadf393a8c811d7ee6601688797e616646" kindref="member">XMC_VADC_GROUP_CONV_t</ref></type>
          <declname>conv_type</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>set_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>group related conversion class parameter structure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conv_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Use direct channels or EMUX channels. Refer <ref refid="group___v_a_d_c_1gadf393a8c811d7ee6601688797e616646" kindref="member">XMC_VADC_GROUP_CONV_t</ref> enum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Conversion class set<linebreak/>
 Range[0x0, 0x1]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets up the conversion settings for vadc group resource associated with <emphasis>config</emphasis> structure. It configures the conversion class properties like sampling time and resolution for selected <emphasis>conv_type</emphasis> channels. It initializes the G_ICLASS register specified by <emphasis>set_num</emphasis> with the required settings.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gac147b4cbfd00c81b136425fc8e70215d" kindref="member">XMC_VADC_GROUP_Init()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga8e70ce6dfa38cee7c48004720aac8aeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___v_a_d_c_1ga4effb949346537c7a515c4f2ff542df5" kindref="member">XMC_VADC_GROUP_STATE_t</ref></type>
        <definition>XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_IsConverterBusy</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>retuns IDLE if converter is free else returns busy. Refer <ref refid="group___v_a_d_c_1ga4effb949346537c7a515c4f2ff542df5" kindref="member">XMC_VADC_GROUP_STATE_t</ref> enum</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Checks the live status of the analog to digital converter. The converter can either idle doing nothing or busy sampling + converting.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga4fb1c3e933690c2e106823950c6fe06d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GROUP_IsResultRegisterFifoHead</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_IsResultRegisterFifoHead</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register in question <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the <bold>res_reg</bold> is the FIFO head.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determines if the requested register is the head of a FIFO.<linebreak/>
<linebreak/>
The analog converter writes to the head of the FIFO. It is the head of the FIFO which is bound to the channel. Applications read the result from the tail of the FIFO. A call to this API would access the register bit field GxRCR.FEN.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga902952b0e1027e6fecbd5743229f595c" kindref="member">XMC_VADC_GROUP_GetResultFifoHead()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="5012" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gae1b61fdad9ee903b23e944e787843e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GROUP_IsResultRegisterInFifo</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_IsResultRegisterInFifo</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register number<linebreak/>
 <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the <bold>res_reg</bold> is the FIFO member, else false.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determines whether the specified register is a FIFO member or not.<linebreak/>
<linebreak/>
The analog converter writes to the head of the FIFO. It is the head of the FIFO which is bound to the channel. Applications read the result from the tail of the FIFO. A call to this API would access the register bit field GxRCR.FEN. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="5029" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="5029" bodyend="5037"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga9bfd983c7c4dc403ed40eabe3920c9db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueAbortSequence</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueAbortSequence</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Aborts an ongoing conversion by flushing the queue.<linebreak/>
<linebreak/>
This API will flush the queue buffer. Ongoing conversion of the Queue request source will not be effected by this API. This would clear all the contents that are present in the queue buffer. A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort the queue sequence.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga19b2912cd17132e6a10f818023fa0745" kindref="member">XMC_VADC_GROUP_QueueRemoveChannel()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gac49297c2076517f3b435504f871ba59d" kindref="member">XMC_VADC_GROUP_QueueFlushEntries()</ref> <linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4045" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga165449401f44c76bafa98f119569ffdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueClearReqSrcEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueClearReqSrcEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Acknowledges the conversion complete request source event.<linebreak/>
<linebreak/>
This API will clear the request source event that occurred. This will clear a interrupt if it was raised. A call to this API would configure the register bit field GxSEFCLR.SEV0.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga51bc955e0976c66affb8b660261cdf82" kindref="member">XMC_VADC_GROUP_QueueTriggerReqSrcEvent()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4192" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4192" bodyend="4196"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa8d19efeb6b04913e91406eaccff72ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueDisableArbitrationSlot</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueDisableArbitrationSlot</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables arbitration slot of the queue request source.<linebreak/>
<linebreak/>
If the QUEUE request source must have its conversion request considered by the arbiter, it must participate in the arbitration rounds. Even if a load event occurs the queue channel can only be converted when the arbiter comes to the queue slot.A call to this API will lead to all conversions request by queue to be blocked. A call to this API would configure the register bit field GxARBPR.ASEN0.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaf3c728f97550bccd474f79befc017365" kindref="member">XMC_VADC_GROUP_QueueEnableArbitrationSlot()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3868" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3868" bodyend="3872"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gacdb123380f2ec61225fd8c7ed70c4c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueDisableExternalTrigger</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueDisableExternalTrigger</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the trigger for queue request source.<linebreak/>
 By using this API the trigger will be deactivated for the queue request source. This will just deactivate the H/W trigger for the queue request source. If any configuration was done to select the trigger input in GxQCTRL0 will be not be effected. A call to this API would configure the register bit field GxQMR0.ENTR</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga67769f0c1fba40f3fdd1026936ed50b9" kindref="member">XMC_VADC_GROUP_QueueEnableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4272" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4272" bodyend="4277"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaf3c728f97550bccd474f79befc017365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueEnableArbitrationSlot</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueEnableArbitrationSlot</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables arbitration slot of the queue request source.<linebreak/>
<linebreak/>
If the QUEUE request source must have its conversion request considered by the arbiter, it must participate in the arbitration rounds. Even if a load event occurs the queue channel can only be converted when the arbiter comes to the queue slot. Thus this must be enabled if any conversion need to take place. A call to this API would configure the register bit field GxARBPR.ASEN0.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaa8d19efeb6b04913e91406eaccff72ed" kindref="member">XMC_VADC_GROUP_QueueDisableArbitrationSlot()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3847" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3847" bodyend="3851"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga67769f0c1fba40f3fdd1026936ed50b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueEnableExternalTrigger</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueEnableExternalTrigger</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the trigger for queue request source.<linebreak/>
<linebreak/>
By using this API the trigger will be activated for the queue request source. The trigger signal and trigger edge will be selected from the QCTRL register. The Selection of a input will be done by <ref refid="group___v_a_d_c_1ga921d0b59c5a88d92bdc7017d7be2765f" kindref="member">XMC_VADC_GROUP_QueueSelectTrigger()</ref>. A call to this API would configure the register bit field GxQMR0.ENTR</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga921d0b59c5a88d92bdc7017d7be2765f" kindref="member">XMC_VADC_GROUP_QueueSelectTrigger()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gacdb123380f2ec61225fd8c7ed70c4c8b" kindref="member">XMC_VADC_GROUP_QueueDisableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4250" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4250" bodyend="4255"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gac49297c2076517f3b435504f871ba59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueFlushEntries</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueFlushEntries</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Flushing the queue Entry.<linebreak/>
<linebreak/>
This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request source will not be effected by this API. This would clear all the contents that are present in the queue buffer. A call to this API would configure the registers GxQMR0. This is a Blocking API, i.e will only exit when all the entries are removed from the queue.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga19b2912cd17132e6a10f818023fa0745" kindref="member">XMC_VADC_GROUP_QueueRemoveChannel()</ref><linebreak/>
 XMC_VADC_GROUP_QueueAbortSequence(0<linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4062" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4062" bodyend="4071"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga8ed5e69a5c33fd5b3acea763bdf957b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueGetInterruptedChannel</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int32_t Returns -1 if there is no channel that have been interrupted. Else would return the channel that is interrupted. <linebreak/>
Range: [0x0 to 0x8]</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Identifies the channel whose conversion was suspended.<linebreak/>
<linebreak/>
When using cancel inject repeat mode the canceled conversion will be placed in the backup register. This API will return the valid queue channel number from the backup register. This happens when ever there is a high priority conversion interrupts the conversion of queue request source. This forces the channel to goto the backup register. A call to this API would access the register GxQBUR0 to determine the interrupted channel.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gab733f165ccdd37704dc50f5ec5801134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GROUP_QueueGetLength</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueGetLength</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t returns the total number of channels. <linebreak/>
Range: [0x0 to 0x8]</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the number of channels present in the queue.<linebreak/>
<linebreak/>
This API will return the queue buffer size. This buffer will be consisting of valid queue entries which will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 will be added to the queue buffer. Hence if an application needs to get the number of valid queue entries this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQSR0 in order to determine the queue length.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga26dff19d499748825e53019d060a675a" kindref="member">XMC_VADC_GROUP_QueueInsertChannel()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4028" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga305e60b302a668a2d2c35b96208cdea7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_VADC_GROUP_QueueGetNextChannel</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueGetNextChannel</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int32_t Returns -1 if there are no channels for conversion Else would return the next valid channel for conversion. <linebreak/>
Range: [0x0 to 0x8]</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the next entry in the queue request source for conversion.<linebreak/>
<linebreak/>
Identifies the channel in the queue lined up for conversion next. API will return a valid queue entry from the queue buffer. First checks for the valid channel entry in the backup register and returns if present. If the valid entry has not been found in the backup register then the queue buffer is searched for a valid entry. A call to this API would access the registers GxQ0R0, GxQBUR0 to determine the next channel.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga19b2912cd17132e6a10f818023fa0745" kindref="member">XMC_VADC_GROUP_QueueRemoveChannel()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga26dff19d499748825e53019d060a675a" kindref="member">XMC_VADC_GROUP_QueueInsertChannel()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaaf5dae90963d3decfcc07d961b2cfdaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GROUP_QueueGetReqSrcEventStatus</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueGetReqSrcEventStatus</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the service request event is raised. returns false if the service request event was not raised.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determines if the request source event is asserted.<linebreak/>
 This API will get the status of the queue request source event. Will return a true if the event has occurred for queue. A call to this API would acces the register bit field GxSEFLAG.SEV0.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4212" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4212" bodyend="4217"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga881c16d2f992825869d02005d91ddc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueInit</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)</argsstring>
        <name>XMC_VADC_GROUP_QueueInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_QUEUE_CONFIG_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to initialization data structure </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Initializes VADC QUEUE functional block.<linebreak/>
<linebreak/>
The QUEUE request source functional block converts channels stored in a queue. The first channel entered into the queue is converted first. A channel once converted, can be placed back into the queue if desired(refill). A call to this API will first disable the arbitration slot for queue (<ref refid="group___v_a_d_c_1gaf3c728f97550bccd474f79befc017365" kindref="member">XMC_VADC_GROUP_QueueEnableArbitrationSlot()</ref>) and then it would configure all the related registers with the required configuration values. The arbitration slot is re-enabled at the end of init by invoking <ref refid="group___v_a_d_c_1gaa8d19efeb6b04913e91406eaccff72ed" kindref="member">XMC_VADC_GROUP_QueueDisableArbitrationSlot()</ref>. A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queue request source.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaf3c728f97550bccd474f79befc017365" kindref="member">XMC_VADC_GROUP_QueueEnableArbitrationSlot()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gaa8d19efeb6b04913e91406eaccff72ed" kindref="member">XMC_VADC_GROUP_QueueDisableArbitrationSlot()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga921d0b59c5a88d92bdc7017d7be2765f" kindref="member">XMC_VADC_GROUP_QueueSelectTrigger()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga1962d86a697f244d19a4127580efd099" kindref="member">XMC_VADC_GROUP_QueueSelectGating()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3830" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga26dff19d499748825e53019d060a675a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueInsertChannel</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_ENTRY_t entry)</argsstring>
        <name>XMC_VADC_GROUP_QueueInsertChannel</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___e_n_t_r_y__t" kindref="compound">XMC_VADC_QUEUE_ENTRY_t</ref></type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Details of the node being added </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Inserts a queue entry to the tail of the queue buffer.<linebreak/>
<linebreak/>
This API will insert a new channel into the queue buffer. The Queue will start conversion of the channels from the head of the buffer. This Insert will place the entry after the last valid entry. If no valid entries are present then this API will place the Queue entry at the head of the buffer. Then the successive call to the insert will place the new entry after the last entry. A call to this API would configure the register GxQINR0 for a single queue entry.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga19b2912cd17132e6a10f818023fa0745" kindref="member">XMC_VADC_GROUP_QueueRemoveChannel()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4111" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4111" bodyend="4117"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga1f715d0acda4b3b07a33bb7b907ddae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the arbitration is enabled else returns false.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the arbitration status of the queue request source.<linebreak/>
<linebreak/>
If the queue request source must have its conversion request considered by the arbiter, it must participate in the arbitration rounds. Even if a load event occurs the queue channel can only be converted when the arbiter comes to the queue slot. A call to this API would return the status of the arbitration slot of queue. A call to this API would read the register bit field GxARBPR.ASEN1.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaf3c728f97550bccd474f79befc017365" kindref="member">XMC_VADC_GROUP_QueueEnableArbitrationSlot()</ref>,<linebreak/>
 <ref refid="group___v_a_d_c_1gaa8d19efeb6b04913e91406eaccff72ed" kindref="member">XMC_VADC_GROUP_QueueDisableArbitrationSlot()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3890" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3890" bodyend="3895"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga19b2912cd17132e6a10f818023fa0745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueRemoveChannel</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueRemoveChannel</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Clears the next valid channel in the queue buffer.<linebreak/>
<linebreak/>
A queue entry lined up for conversion can be removed and replaced by its successor. The call to this API will first check if a valid queue entry is present in the queue backup register if present would clear its valid flag. If no valid queue entries are present in the backup then the first channel present in the queue buffer would be cleared. A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to clear a channel from the queue.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga26dff19d499748825e53019d060a675a" kindref="member">XMC_VADC_GROUP_QueueInsertChannel()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4091" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga1962d86a697f244d19a4127580efd099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueSelectGating</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_SELECT_t input_num)</argsstring>
        <name>XMC_VADC_GROUP_QueueSelectGating</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gaa16f1136a4a4efddcd67ebd5fc69bc9f" kindref="member">XMC_VADC_GATE_INPUT_SELECT_t</ref></type>
          <declname>input_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Choice of the input earmarked as the gating line </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Select Gating signal for queue request source.<linebreak/>
<linebreak/>
Passage of the trigger input to the request source can be controlled via a gating signal. Any one of the 16 input lines can be chosen as a gating signal. Trigger signal can be given to the queue request source only when the gating signal&apos;s active level is detected. Additionally the GxQMR0.ENGT has to be configured for the gating signal&apos;s active level. A call to this API would configure the register bit field GxQCTRL0.GTSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga921d0b59c5a88d92bdc7017d7be2765f" kindref="member">XMC_VADC_GROUP_QueueSelectTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3952" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga921d0b59c5a88d92bdc7017d7be2765f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueSelectTrigger</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)</argsstring>
        <name>XMC_VADC_GROUP_QueueSelectTrigger</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gab71bdae1d928ee308430626a761eab97" kindref="member">XMC_VADC_TRIGGER_INPUT_SELECT_t</ref></type>
          <declname>input_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Choice of the input earmarked as a trigger line </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Select Trigger signal for queue request source.<linebreak/>
<linebreak/>
A queue request source will raise conversion request only if there were either a request from application or occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. This is needed when a hardware trigger is needed for the conversion of the queue request source. Refer to the reference manual to determine the signal that needs to be connected. A call to this API would configure the register bit field GxQCTRL0.XTSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga1962d86a697f244d19a4127580efd099" kindref="member">XMC_VADC_GROUP_QueueSelectGating()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga67769f0c1fba40f3fdd1026936ed50b9" kindref="member">XMC_VADC_GROUP_QueueEnableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3914" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gac969fb0698f7ecf7a1a177ee4bcd4654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueSelectTriggerEdge</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER_EDGE_t trigger_edge)</argsstring>
        <name>XMC_VADC_GROUP_QueueSelectTriggerEdge</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gaabd0d22cd15f13e6e49809a3b811b241" kindref="member">XMC_VADC_TRIGGER_EDGE_t</ref></type>
          <declname>trigger_edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>Choice of the trigger edge </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Select Trigger signal edge for queue request source.<linebreak/>
<linebreak/>
A queue request source will raise conversion request only if there were either a request from application or occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is needed when a hardware trigger is needed for the conversion of the queue request source. Refer to the reference manual to determine the signal that needs to be connected. A call to this API would configure the register bit field GxQCTRL0.XTMODE.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga1962d86a697f244d19a4127580efd099" kindref="member">XMC_VADC_GROUP_QueueSelectGating()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga67769f0c1fba40f3fdd1026936ed50b9" kindref="member">XMC_VADC_GROUP_QueueEnableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3934" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaaf9874010e5073415ab846b4ef46955e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueSetGatingMode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)</argsstring>
        <name>XMC_VADC_GROUP_QueueSetGatingMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1ga4db02e3b835b8cad941ab60ae288f8c8" kindref="member">XMC_VADC_GATEMODE_t</ref></type>
          <declname>mode_sel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_sel</parametername>
</parameternamelist>
<parameterdescription>
<para>Select how the gating is applied to the queue request source </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<bold>Details of function</bold><linebreak/>
 Selects the gating mode of queue request source.<linebreak/>
<linebreak/>
Passage of the trigger input to the request source can be controlled via a gating signal. This API determines how the gating signal behaves, either active low or active high. If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the <emphasis>mode_sel</emphasis>. A call to this API would configure the register bit field GxQMR0.ENGT.</para><para><simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga1962d86a697f244d19a4127580efd099" kindref="member">XMC_VADC_GROUP_QueueSelectGating()</ref>; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3970" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3970" bodyend="3979"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gabf8bc9e2f7207523e5fb6d6b360ea663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)</argsstring>
        <name>XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref></type>
          <declname>sr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>The service request line (Common SR lines, Group specific SR lines) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Connects the event to the SR line of VADC.<linebreak/>
<linebreak/>
This API will connect a Service Request line(SR) to a queue request source event. Hence to get a interrupt on this Service request line one has to enable the required NVIC node. A call to this API would configure the register bit field GxSEVNP.SEVNP0.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gabf7bf44150a8541ab60d12889f367053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueTriggerConversion</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueTriggerConversion</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Generates conversion request (Software initiated conversion).<linebreak/>
 A conversion request can be raised either upon detection of a hardware trigger, or by software. This API forces the queue unit to generate a conversion request to the analog converter. It is assumed that the queue has already been filled up with entries. A call to this API would configure the register bit field GxQMR0.TREV.</para></simplesect>
<simplesect kind="par"><title>Note:</title><para>The conversion of queue entry will start immediately after the entry has been loaded into GxQINR0. This happens only if the queue entry has been loaded into the register without the need for the H/W trigger.<linebreak/>
If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 ways: <itemizedlist>
<listitem>
<para>The H/W generates a trigger needed for the queue request source. </para></listitem>
<listitem>
<para>The Conversion is triggered manually by calling this API. </para></listitem>
</itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga26dff19d499748825e53019d060a675a" kindref="member">XMC_VADC_GROUP_QueueInsertChannel()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4005" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4005" bodyend="4009"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga51bc955e0976c66affb8b660261cdf82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_QueueTriggerReqSrcEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_QueueTriggerReqSrcEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Manually asserts the conversion complete request source event.<linebreak/>
<linebreak/>
This API will set the request source event for queue. This will trigger a interrupt if the service node pointer for the scan has been configured. A call to this API would configure the register bit field GxSEFLAG.SEV0.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga165449401f44c76bafa98f119569ffdc" kindref="member">XMC_VADC_GROUP_QueueClearReqSrcEvent()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4173" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4173" bodyend="4177"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga1a5f41454d3e42d5505db9e3acf5177f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ResultInit</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg_num, const XMC_VADC_RESULT_CONFIG_t *config)</argsstring>
        <name>XMC_VADC_GROUP_ResultInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg_num</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___r_e_s_u_l_t___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_RESULT_CONFIG_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Result register which is intended to be initialized <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to initialization data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Initializes a Group Result Register.<linebreak/>
 Various options needed for the working of the result result will be configured with this API. This would determine the result handling of the group registers. This API must be called after the channel Init (<ref refid="group___v_a_d_c_1ga88e0f4deb5ddd8a85c786a6291327fa6" kindref="member">XMC_VADC_GROUP_ChannelInit()</ref>)to initialize the result register that is selected for the channel. This API would also determine if the result register that is being configured has to a part of a FIFO buffer. In this API one can also configure the various result handling options line FIR/IIR filters and it order. Also configures the Data reduction to accumulate 2/3/4 results need to be done. This API will also configure the result event generation. A call to this API would configure the register GxRCR with the <bold>config</bold> .</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaf2c5118b682ff5c4820400ea362b3cc7" kindref="member">XMC_VADC_GROUP_AddResultToFifo()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gae1fa1ad973c5ab02b6a6a9ece61e1045" kindref="member">XMC_VADC_GROUP_EnableResultEvent()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga356e5be65b3abe1ac62e58adfda17529" kindref="member">XMC_VADC_GROUP_DisableResultEvent()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4671" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4671" bodyend="4678"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gab72f743031df5ebe062fe8a28275888b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanAddChannelToSequence</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_ScanAddChannelToSequence</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel meant to be added to scan sequence <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Adds a channel to the scan sequence.<linebreak/>
<linebreak/>
Call this API to insert a new single channel into the scan request source. This will be added to the scan sequence. The added channel will be part of the conversion sequence when the next load event occurs. A call to this API would configure the register bit fields of GxASSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga51f598fc7306207185177af62858ac65" kindref="member">XMC_VADC_GROUP_ScanAddMultipleChannels()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3007" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3007" bodyend="3013"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga51f598fc7306207185177af62858ac65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanAddMultipleChannels</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_mask)</argsstring>
        <name>XMC_VADC_GROUP_ScanAddMultipleChannels</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask word indicating channels which form part of scan conversion sequence Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively. To Add the channel to the scan sequence enable the respective bit. Passing a 0x0 will clear all the selected channels <linebreak/>
Range: [0x0 to 0xFF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Adds multiple channels to the scan sequence.<linebreak/>
<linebreak/>
Call this API to insert a multiple channels into the scan request source. This will be added to a scan sequence. The added channels will be a part of the conversion sequence when the next load event occurs. A call to this API would configure the register bit fields of GxASSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gab72f743031df5ebe062fe8a28275888b" kindref="member">XMC_VADC_GROUP_ScanAddChannelToSequence()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3034" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3034" bodyend="3038"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga02dca0332550c23db82bbdd3750d5670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanClearReqSrcEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanClearReqSrcEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Acknowledges the scan conversion complete request source event.<linebreak/>
<linebreak/>
This API will clear the request source event that occurred. This will clear a interrupt if it was raised. A call to this API would configure the register bit field GxSEFLAG.SEV1.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gacf7d930e6e633e535725c13eaf444afc" kindref="member">XMC_VADC_GROUP_ScanTriggerReqSrcEvent()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3117" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3117" bodyend="3121"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga4d1f77cf454d509dfaff575717a8693f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanDisableArbitrationSlot</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanDisableArbitrationSlot</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables arbitration slot of the scan request source.<linebreak/>
<linebreak/>
If the scan request source must have its conversion request considered by the arbiter, it must participate in the arbitration rounds. Even if a load event occurs the scan channel can only be converted when the arbiter comes to the scan slot.A call to this API will lead to all conversions request by scan to be blocked. A call to this API would configure the register bit field GxARBPR.ASEN1.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga916530591113892be436af6238ead6ea" kindref="member">XMC_VADC_GROUP_ScanEnableArbitrationSlot()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2798" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2798" bodyend="2802"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga1aa7cb076e7e2b56f330d0bb14645494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanDisableContinuousMode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanDisableContinuousMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables continuous conversion mode.<linebreak/>
<linebreak/>
Typically for a scan request source to generate conversion request, either a hardware trigger or a software request is a pre-requisite. Using autoscan feature it is possible to start the conversion once and allow the sequence to repeat without any further triggers. Once all channels belonging to a scan request source have been converted, a request source completion event is generated. Generation of this event can restart the scan sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this API would configure the register bit field GxASMR.SCAN.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga4fa59213861735578dff28c02d961120" kindref="member">XMC_VADC_GROUP_ScanEnableContinuousMode()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2948" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2948" bodyend="2952"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa3fdc34d89a6fb9e3875cb30f68488c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanDisableEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanDisableEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the scan request source event .<linebreak/>
 By using this API the request source event will be deactivated for the scan request source. Other configurations w.r.t service node pointer are not done in this API. A call to this API would configure the register bit field GxASMR.ENSI.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga65fcf00d15dcacbe46cbc9bcd06bdf8d" kindref="member">XMC_VADC_GROUP_ScanEnableEvent()</ref>,<linebreak/>
 <ref refid="group___v_a_d_c_1ga3c309bf576995893d65adc4cd362a321" kindref="member">XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3255" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3255" bodyend="3260"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga7a558bd413ed6540b84d350728d57eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanDisableExternalTrigger</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanDisableExternalTrigger</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the trigger for scan request source.<linebreak/>
 By using this API the trigger will be deactivated for the scan request source. This will just deactivate the H/W trigger for the scan request source. If any configuration were done to select the trigger input in GxASCTRL, it will be not be effected by this API. A call to this API would configure the register bit field GxASMR.ENTR.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaa08eef43607d1b9a39aaab3fae84e7f3" kindref="member">XMC_VADC_GROUP_ScanEnableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3196" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3196" bodyend="3201"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga916530591113892be436af6238ead6ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanEnableArbitrationSlot</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanEnableArbitrationSlot</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables arbitration slot of the scan request source.<linebreak/>
<linebreak/>
If the scan request source must have its conversion request considered by the arbiter, it must participate in the arbitration rounds. Even if a load event occurs the scan channel can only be converted when the arbiter comes to the scan slot. Thus this must be enabled if any conversion need to take place. A call to this API would configure the register bit field GxARBPR.ASEN1.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga4d1f77cf454d509dfaff575717a8693f" kindref="member">XMC_VADC_GROUP_ScanDisableArbitrationSlot()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2777" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2777" bodyend="2781"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga4fa59213861735578dff28c02d961120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanEnableContinuousMode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanEnableContinuousMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables continuous conversion mode.<linebreak/>
<linebreak/>
Typically for a scan request source to generate conversion request, either a hardware trigger or a software request is a pre-requisite. Using autoscan feature it is possible to start the conversion once and allow the sequence to repeat without any further triggers. Once all channels belonging to a scan request source have been converted, a request source completion event is generated. Generation of this event can restart the scan sequence. Every request source event will cause a load event to occur. A call to this API would configure the register bit field GxASMR.SCAN.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga1aa7cb076e7e2b56f330d0bb14645494" kindref="member">XMC_VADC_GROUP_ScanDisableContinuousMode()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2925" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2925" bodyend="2929"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga65fcf00d15dcacbe46cbc9bcd06bdf8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanEnableEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanEnableEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the scan request source event .<linebreak/>
 By using this API the request source event will be activated for the scan request source. Other configurations w.r.t service node pointer are not done in this API. A call to this API would configure the register bit field GxASMR.ENSI.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaa3fdc34d89a6fb9e3875cb30f68488c0" kindref="member">XMC_VADC_GROUP_ScanDisableEvent()</ref>,<linebreak/>
 <ref refid="group___v_a_d_c_1ga3c309bf576995893d65adc4cd362a321" kindref="member">XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3234" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3234" bodyend="3239"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa08eef43607d1b9a39aaab3fae84e7f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanEnableExternalTrigger</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanEnableExternalTrigger</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the trigger for scan request source.<linebreak/>
<linebreak/>
By using this API, the trigger signal will be activated for the scan request source. The trigger signal and trigger edge will be selected from the ASCTRL register. The Selection of a input will be done by <ref refid="group___v_a_d_c_1ga4d29e840f790e5c763c1f00bbcf1e131" kindref="member">XMC_VADC_GROUP_ScanSelectTrigger()</ref>. A call to this API would configure the register bit field GxASMR.ENTR.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga4d29e840f790e5c763c1f00bbcf1e131" kindref="member">XMC_VADC_GROUP_ScanSelectTrigger()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga7a558bd413ed6540b84d350728d57eec" kindref="member">XMC_VADC_GROUP_ScanDisableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3174" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3174" bodyend="3179"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga723bda6902bb2b8b0641a0e60b1da61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanGetNumChannelsPending</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 uint32_t Returns the total channels pending for conversion. <linebreak/>
Range: [0x0 to 0x8]</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the total number of pending channels.<linebreak/>
<linebreak/>
This API will read the pending channels register and will return the number of channels that are awaiting conversion. When a load event occurs the scan sequence is pushed to a pending conversion register. From the pending register the channels are taken up by the converter. When the API is called it would return the total number of channels pending (GxASPND).</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga4ea5f62893afbb468820cb612f09e3d1" kindref="member">XMC_VADC_GROUP_ScanIsChannelPending()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3082" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gad08132ae30e2e73e5f71d2fb5b3b1c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanGetReqSrcEventStatus</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the service request event is raised. returns false if the service request event was not raised.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determines if the request source event is asserted.<linebreak/>
 This API will get the status of the scan request source event. Will return a true if the event has occurred for scan. A call to this API would access the register bit field GxSEFLAG.SEV1.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3137" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3137" bodyend="3141"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga0baf952034feb3eaa81736e9761cf48f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanInit</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *config)</argsstring>
        <name>XMC_VADC_GROUP_ScanInit</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___v_a_d_c___s_c_a_n___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_SCAN_CONFIG_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to Scan configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Initializes the VADC SCAN functional block.<linebreak/>
<linebreak/>
The GROUP SCAN request source functional block converts channels sequentially starting with the highest numbered channel to the lowest. Channels must register themselves as being part of the the scan sequence. A call to this API will first disable the arbitration slot for queue (<ref refid="group___v_a_d_c_1ga916530591113892be436af6238ead6ea" kindref="member">XMC_VADC_GROUP_ScanEnableArbitrationSlot()</ref>) and then it would configure all the related registers with the required configuration values. The arbitration slot is re-enabled at the end of init by invoking <ref refid="group___v_a_d_c_1ga4d1f77cf454d509dfaff575717a8693f" kindref="member">XMC_VADC_GROUP_ScanDisableArbitrationSlot()</ref>. A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request source.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga916530591113892be436af6238ead6ea" kindref="member">XMC_VADC_GROUP_ScanEnableArbitrationSlot()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga4d1f77cf454d509dfaff575717a8693f" kindref="member">XMC_VADC_GROUP_ScanDisableArbitrationSlot()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga4d29e840f790e5c763c1f00bbcf1e131" kindref="member">XMC_VADC_GROUP_ScanSelectTrigger()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gab637f1591586c7dfb8593fb394104887" kindref="member">XMC_VADC_GROUP_ScanSelectGating()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2760" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa0cc3b32dac68d975d7ab1b0ecfb81f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the arbitration is enabled else returns false.</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the arbitration status of the scan request source.<linebreak/>
<linebreak/>
If the scan request source must have its conversion request considered by the arbiter, it must participate in the arbitration rounds. Even if a load event occurs the scan channel can only be converted when the arbiter comes to the scan slot. A call to this API would return the status of the arbitration slot of scan. A call to this API would read the register bit field GxARBPR.ASEN1.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga916530591113892be436af6238ead6ea" kindref="member">XMC_VADC_GROUP_ScanEnableArbitrationSlot()</ref>,<linebreak/>
 <ref refid="group___v_a_d_c_1ga4d1f77cf454d509dfaff575717a8693f" kindref="member">XMC_VADC_GROUP_ScanDisableArbitrationSlot()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2819" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2819" bodyend="2824"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga4ea5f62893afbb468820cb612f09e3d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_VADC_GROUP_ScanIsChannelPending</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)</argsstring>
        <name>XMC_VADC_GROUP_ScanIsChannelPending</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The channel being audited for completion of conversion <linebreak/>
Range: [0x0 to 0x7] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool returns true if the channel is pending conversion else returns false</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Determine if the channel is pending for conversion.<linebreak/>
<linebreak/>
This API will check if the Channel in question is awaiting conversion in the current arbitration round. When a load event occurs the scan sequence is pushed to a pending conversion register. From the pending register the channels are taken up by the converter. This API would return true if the channel is found in the pending register (GxASPND).</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga723bda6902bb2b8b0641a0e60b1da61a" kindref="member">XMC_VADC_GROUP_ScanGetNumChannelsPending()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3057" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3057" bodyend="3064"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga96c47634e7fcc9e50f4212e31a533dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanRemoveChannel</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num)</argsstring>
        <name>XMC_VADC_GROUP_ScanRemoveChannel</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>channel_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel_num</parametername>
</parameternamelist>
<parameterdescription>
<para>channel number to be removed from the scan sequence. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Removes a channel from the scan sequence.<linebreak/>
 By using this API the it is possible to remove a single channel from the conversion sequence. The remaining channels will continue however they are. A call to this API would configure the register GxASSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gab637f1591586c7dfb8593fb394104887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanSelectGating</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_t gating_input)</argsstring>
        <name>XMC_VADC_GROUP_ScanSelectGating</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1gaa16f1136a4a4efddcd67ebd5fc69bc9f" kindref="member">XMC_VADC_GATE_INPUT_SELECT_t</ref></type>
          <declname>gating_input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gating_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Module input signal meant to be selected as gating input </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Select Gating signal for scan request source.<linebreak/>
<linebreak/>
Passage of the trigger input to the request source can be controlled via a gating signal. Any one of the 16 input lines can be chosen as a gating signal. Trigger signal can be given to the scan request source only when the gating signal&apos;s active level is detected. Additionally the GxASMR.ENGT has to be configured for the gating signal&apos;s active level. A call to this API would configure the register bit field GxASCTRL.GTSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga4d29e840f790e5c763c1f00bbcf1e131" kindref="member">XMC_VADC_GROUP_ScanSelectTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2880" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga4d29e840f790e5c763c1f00bbcf1e131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanSelectTrigger</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SELECT_t trigger_input)</argsstring>
        <name>XMC_VADC_GROUP_ScanSelectTrigger</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1gab71bdae1d928ee308430626a761eab97" kindref="member">XMC_VADC_TRIGGER_INPUT_SELECT_t</ref></type>
          <declname>trigger_input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Choice of the input earmarked as a trigger line </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Select Trigger signal for scan request source.<linebreak/>
<linebreak/>
A scan request source will raise conversion request only if there were either a request from application or occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. This is needed when a hardware trigger is needed for the conversion of the scan request source. Refer to the reference manual to determine the signal that needs to be connected. A call to this API would configure the register bit field GxASCTRL.XTSEL.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gab637f1591586c7dfb8593fb394104887" kindref="member">XMC_VADC_GROUP_ScanSelectGating()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gaa08eef43607d1b9a39aaab3fae84e7f3" kindref="member">XMC_VADC_GROUP_ScanEnableExternalTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gac4a2232fd93259e95bd4cbb45949edfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanSelectTriggerEdge</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER_EDGE_t trigger_edge)</argsstring>
        <name>XMC_VADC_GROUP_ScanSelectTriggerEdge</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gaabd0d22cd15f13e6e49809a3b811b241" kindref="member">XMC_VADC_TRIGGER_EDGE_t</ref></type>
          <declname>trigger_edge</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger_edge</parametername>
</parameternamelist>
<parameterdescription>
<para>Trigger edge selection </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Selects the trigger edge for scan request source.<linebreak/>
<linebreak/>
A scan request source will raise conversion request only if there were either a request from application or occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is needed when a hardware trigger is needed for the conversion of the scan request source. A call to this API would configure the register bit field GxASCTRL.XTMODE.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga4d29e840f790e5c763c1f00bbcf1e131" kindref="member">XMC_VADC_GROUP_ScanSelectTrigger()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2862" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga4963004f5c5f5bfd255b51d79d62e143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanSequenceAbort</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanSequenceAbort</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Aborts an ongoing scan sequence conversion.<linebreak/>
<linebreak/>
An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by one from a pending register and requests for their conversion. This API essentially clears the channel pending register thus creating an illusion that there are no more channels left in the sequence. A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequence abort.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2989" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga5db8e4e617a0df8234d948ed26d7d9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanSetGatingMode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)</argsstring>
        <name>XMC_VADC_GROUP_ScanSetGatingMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type><ref refid="group___v_a_d_c_1ga4db02e3b835b8cad941ab60ae288f8c8" kindref="member">XMC_VADC_GATEMODE_t</ref></type>
          <declname>mode_sel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode_sel</parametername>
</parameternamelist>
<parameterdescription>
<para>Select how the gating is applied to the scan request source </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Selects the gating mode of scan request source.<linebreak/>
<linebreak/>
Passage of the trigger input to the request source can be controlled via a gating signal. This API determines how the gating signal behaves, either active low or active high. If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the <emphasis>mode_sel</emphasis>.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gab637f1591586c7dfb8593fb394104887" kindref="member">XMC_VADC_GROUP_ScanSelectGating()</ref>; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2897" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2897" bodyend="2906"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga3c309bf576995893d65adc4cd362a321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)</argsstring>
        <name>XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref></type>
          <declname>sr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>Service Request Id </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Connects the scan request source event to the SR line of VADC.<linebreak/>
<linebreak/>
This API will connect a Service Request line(SR) to a scan request source event. Hence to get a interrupt on this Service request line one has to enable the required NVIC node. A call to this API would configure the register bit field GxSEVNP.SEV1NP .</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga013308f793d25106e935c6f1bdbd95a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanTriggerConversion</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanTriggerConversion</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Generates conversion request (Software initiated conversion).<linebreak/>
<linebreak/>
A conversion request can be raised either upon detection of a hardware trigger, or by software. This API forces the scan unit to generate a conversion request to the analog converter. It is assumed that the scan has already been filled up with entries. A call to this API would configure the register bit field GxASMR.LDEV.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2968" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2968" bodyend="2972"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gacf7d930e6e633e535725c13eaf444afc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_ScanTriggerReqSrcEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_ScanTriggerReqSrcEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Manually asserts the conversion complete request source event.<linebreak/>
<linebreak/>
This API will set the request source event for scan. This will trigger a interrupt if the service node pointer for the scan has been configured. A call to this API would configure the register bit field GxSEFLAG.SEV1.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="3098" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="3098" bodyend="3102"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga5f2cda270ffbbc2dcf6879d66ddb94b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetBoundaries</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, const uint32_t boundary1)</argsstring>
        <name>XMC_VADC_GROUP_SetBoundaries</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>boundary0</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>boundary1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group whose global boundary registers are to be programmed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundary0</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary-0 Value<linebreak/>
 Range: [0x0 - 0x0FFF] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundary1</parametername>
</parameternamelist>
<parameterdescription>
<para>Boundary-1 Value<linebreak/>
 Range: [0x0 - 0x0FFF]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Programs the boundaries with <emphasis>boundary0</emphasis> and boundary1 for result comparison.<linebreak/>
<linebreak/>
 These two boundaries can serve as absolute boundaries. They defines a range against which the result of a conversion can be compared. In the fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any case, these boundary values entered here form a boundary pallete. There are dedicated upper and lower boundary registers G_BOUND0 and G_BOUND1 who will derive their values from this palette.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gad05d956c1ed2061bd737ae62d8a7d29b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetBoundaryEventInterruptNode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint8_t boundary_flag_num, const XMC_VADC_BOUNDARY_NODE_t node)</argsstring>
        <name>XMC_VADC_GROUP_SetBoundaryEventInterruptNode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>boundary_flag_num</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gaebb436d84700b3f1a711a834119646b8" kindref="member">XMC_VADC_BOUNDARY_NODE_t</ref></type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundary_flag_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The Boundary flag for which the interrupt node needs to be configured. Range: [0x0 to 0x3] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>Service Request node Id </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Connects the boundary event to the SR line of VADC or to a common boundary flag.<linebreak/>
<linebreak/>
This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt on this Service request line one has to enable the required NVIC node. A call to this API would configure the register bit field GxBFLNP.BFLxNP.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa9a9864939239099c1de61555e12d223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetChannelAlias</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t src_ch_num, const uint32_t alias_ch_num)</argsstring>
        <name>XMC_VADC_GROUP_SetChannelAlias</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>src_ch_num</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>alias_ch_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel which will be converted by <bold>alias_ch_num</bold>, when called by the request source. <linebreak/>
Range:[0x0 to 0x7] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alias_ch_num</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the alias channel (Ch-0 or Ch-1) <linebreak/>
Range:[0x0, 0x1] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the Alias channel(<bold>alias_ch_num</bold>) to convert from the source channel(<bold>src_ch_num</bold>).<linebreak/>
<linebreak/>
When a alias configuration takes place the request source(queue/scan/background) will not call channel <bold>src_ch_num</bold>. The Request sources will call the channel <bold>alias_ch_num</bold> , this would invoke the conversion of the pin associated with <bold>src_ch_num</bold>. The configuration of the alias channel (<bold>alias_ch_num</bold>) will be used for the conversion.<linebreak/>
When an alias channel (Ch-0 or Ch-1) receives a trigger, it converts the aliased channel (<bold>src_ch_num</bold>). The properties of Ch-0 or Ch-1 (as indicated in <bold>alias_ch_num</bold> ) apply when <bold>src_ch_num</bold> is converted. A call to this API would configure the register GxALIAS.</para></simplesect>
<simplesect kind="par"><title>Note:</title><para>Alias Channel (<bold>alias_ch_num</bold>) and the source channel (<bold>src_ch_num</bold>) cannot be the same. If they are, that alias feature is not used for the conversion. In order to Reset the alias feature that was previously selected this method can be used.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaf2c2aa711194c6d8712973744551d76c" kindref="member">XMC_VADC_GROUP_GetChannelAlias()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4330" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4330" bodyend="4340"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga4e210b7836e3419b3aab27f3ee3d1bbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetIndividualBoundary</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_CHANNEL_BOUNDARY_t selection, const uint16_t boundary_value)</argsstring>
        <name>XMC_VADC_GROUP_SetIndividualBoundary</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1ga203ae2271679fb3e05d185a6bd14b8b2" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_t</ref></type>
          <declname>selection</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>boundary_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selection</parametername>
</parameternamelist>
<parameterdescription>
<para>The boundary value selected for <bold>boundary_value</bold>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>boundary_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the boundary value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Programs the boundary with <emphasis>boundary_value</emphasis> for result comparison.<linebreak/>
<linebreak/>
 This defines a range against which the result of a conversion can be compared. In the fast compare mode, the two boundaries provide hysteresis capability to a compare value.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gae435b6b66cac1abc05d17fd17d5caca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetPowerMode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)</argsstring>
        <name>XMC_VADC_GROUP_SetPowerMode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1ga7226349aef79a52f614eb5e75e3f55d9" kindref="member">XMC_VADC_GROUP_POWERMODE_t</ref></type>
          <declname>power_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Group. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired power mode</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the power mode of a VADC group.<linebreak/>
<linebreak/>
 For a VADC group to actually convert an analog signal, its analog converter must be turned on.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga151403257b63a3307631979702dee524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetResultFastCompareValue</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg, const XMC_VADC_RESULT_SIZE_t compare_val)</argsstring>
        <name>XMC_VADC_GROUP_SetResultFastCompareValue</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref></type>
          <declname>compare_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register for which the compare value is being set <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare_val</parametername>
</parameternamelist>
<parameterdescription>
<para>The compare value itself <linebreak/>
Range: [0x0 to 0xFFF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the compare value (relevant to the Fast Compare Mode).<linebreak/>
<linebreak/>
A channel input can be converted and its value stored in its result register. Alternatively, the channel input can be converted and compared against a compare value. This is the fast compare mode typically utilized by applications that are not interested in absolute converted value of an analog input, but rather a binary decision on how the input fares against a preset compare value. The channel should have had already chosen the correct ICLASS with the fast compare mode enabled. <bold>compare_val</bold> would be the compare value on which FCM bit in the result register will be set. The FCM bit will be set if the analog voltage is greater than the compare value. A call to this API would configure the register bit field GxRES.RESULT.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga74c556f6be3e4ad892ad04afedf1f566" kindref="member">XMC_VADC_GROUP_GetFastCompareResult()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga701140b8237cba836cbd4f1cd3393330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetResultInterruptNode</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg, const XMC_VADC_SR_t sr)</argsstring>
        <name>XMC_VADC_GROUP_SetResultInterruptNode</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref></type>
          <declname>sr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register for which the result event is being asserted <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sr</parametername>
</parameternamelist>
<parameterdescription>
<para>The SR line to which the result event must be connected </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Binds a result event to a requested Service Request line.<linebreak/>
<linebreak/>
The result event is connected to a service request line. For an event to result in an interrupt, this service request line must be enabled in VADC and the NVIC node which this service request line is connected to must have interrupt generation enabled. A call to this API would access the registers GxREVNP0 GxREVNP1.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gadd781581d9749d4f79c9d8a2b6570596" kindref="member">XMC_VADC_GROUP_TriggerResultEvent()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gaf4178ad4431b23112dbc89e8e258bc22" kindref="member">XMC_VADC_GROUP_ClearResultEvent()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4953" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gaa938b07f4f1d5ece14be6aec0738752c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetResultSubtractionValue</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint16_t subtraction_val)</argsstring>
        <name>XMC_VADC_GROUP_SetResultSubtractionValue</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>subtraction_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subtraction_val</parametername>
</parameternamelist>
<parameterdescription>
<para>12 bit subtraction value <linebreak/>
Range: [0x0 to 0xFFF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the subtraction value (relevant to the Difference Mode).<linebreak/>
<linebreak/>
A channel input can be converted and its value stored in its result register. Alternatively, the channel input can be converted and subtracted with the value stored in GxRES[0]. This Difference Mode typically utilized by applications that are not interested in absolute converted value of an analog input, but rather a difference of converted values. Subtraction value will always be present in the GxRES[0] and thus this API would configure that register.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4869" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gae1406cd26c69119e3a181b38f9d1fd26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetSyncMaster</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr)</argsstring>
        <name>XMC_VADC_GROUP_SetSyncMaster</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures a VADC Group as a master group.<linebreak/>
<linebreak/>
Conversion of identically numbered channels across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slave groups.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gafcb0c959798ebac91498ac34296dec2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetSyncReadySignal</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, uint32_t mask)</argsstring>
        <name>XMC_VADC_GROUP_SetSyncReadySignal</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant Pointer to the VADC Group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eval_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>mask to configure the eval bits Use XMC_VADC_SYNCTR_EVAL_t to create the mask. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Set the Eval bits of the group.<linebreak/>
<linebreak/>
For Synchronized conversion the master&apos;s ready signal configuration must be copied onto the slaves. A call to this API would configure the Sync EVAL Bits (GxSYNCTR.EVALy).</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga22b85c7c9fc777c05d74f1ae2a7cc9ac" kindref="member">XMC_VADC_GROUP_CheckSlaveReadiness()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga8e04b2a4deb50a629b3e80bcfeafa14d" kindref="member">XMC_VADC_GROUP_IgnoreSlaveReadiness()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2506" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="2506" bodyend="2518"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gac1469b90543473edcd8bfd1253166cc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetSyncSlave</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t slave_group)</argsstring>
        <name>XMC_VADC_GROUP_SetSyncSlave</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>master_grp</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>slave_group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC Group which must be set as a slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>master_grp</parametername>
</parameternamelist>
<parameterdescription>
<para>The master group number<linebreak/>
 Range: [0x0 - 0x3] </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slave_group</parametername>
</parameternamelist>
<parameterdescription>
<para>The slave group number<linebreak/>
 Range: [0x0 - 0x3]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures a VADC Group as a slave group.<linebreak/>
<linebreak/>
 Conversion of identically numbered channels across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the configuration settings.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gae1406cd26c69119e3a181b38f9d1fd26" kindref="member">XMC_VADC_GROUP_SetSyncMaster()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga22b85c7c9fc777c05d74f1ae2a7cc9ac" kindref="member">XMC_VADC_GROUP_CheckSlaveReadiness()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1gadb698bad87dcbc3fdf6ce8d6df1ecbb4" kindref="member">XMC_VADC_GROUP_EnableChannelSyncRequest()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gafbcf0f992b933cd687968d433abddd4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_SetSyncSlaveReadySignal</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, uint32_t eval_waiting_group, uint32_t eval_origin_group)</argsstring>
        <name>XMC_VADC_GROUP_SetSyncSlaveReadySignal</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>eval_waiting_group</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>eval_origin_group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant Pointer to the VADC Group waiting for ready signal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eval_waiting_group</parametername>
</parameternamelist>
<parameterdescription>
<para>The VADC Group which expects a ready signal to start it&apos;s conversion. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eval_origin_group</parametername>
</parameternamelist>
<parameterdescription>
<para>The VADC Group from which the eval_waiting_group will expect a ready signal </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the ready signal in the eval_waiting_group .<linebreak/>
<linebreak/>
For Synchronized conversion all the slaves participating need to configure the ready signal. A slave group will also need to configure the ready signals coming from the other slave groups. A call to this API would configure the Sync.slave&apos;s EVAL Bits (GxSYNCTR.EVALy).</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1ga22b85c7c9fc777c05d74f1ae2a7cc9ac" kindref="member">XMC_VADC_GROUP_CheckSlaveReadiness()</ref><linebreak/>
 <ref refid="group___v_a_d_c_1ga8e04b2a4deb50a629b3e80bcfeafa14d" kindref="member">XMC_VADC_GROUP_IgnoreSlaveReadiness()</ref><linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1gadd781581d9749d4f79c9d8a2b6570596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_TriggerResultEvent</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)</argsstring>
        <name>XMC_VADC_GROUP_TriggerResultEvent</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>res_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Result Register for which the result event is being asserted <linebreak/>
Range: [0x0 to 0xF] </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Manually asserts the result event.<linebreak/>
<linebreak/>
The result event must necessarily be connected to a SR line. The SR in turn must have been enabled along with the corresponding NVIC node. Only then will the assertion of RES event lead to an interrupt. A call to this API would access the register bit fieldS OF GxREFLAG.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___v_a_d_c_1gaf4178ad4431b23112dbc89e8e258bc22" kindref="member">XMC_VADC_GROUP_ClearResultEvent()</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="4887" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" bodystart="4887" bodyend="4892"/>
      </memberdef>
      <memberdef kind="function" id="group___v_a_d_c_1ga1723512610fb75b8092cab99d15997ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_VADC_GROUP_TriggerServiceRequest</definition>
        <argsstring>(XMC_VADC_GROUP_t *const group_ptr, const uint32_t sr_num, const XMC_VADC_GROUP_IRQ_t type)</argsstring>
        <name>XMC_VADC_GROUP_TriggerServiceRequest</name>
        <param>
          <type><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref> *const</type>
          <declname>group_ptr</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sr_num</declname>
        </param>
        <param>
          <type>const <ref refid="group___v_a_d_c_1ga14a1cbb73bf2a92a3321aea14488f354" kindref="member">XMC_VADC_GROUP_IRQ_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>group_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to the VADC group </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sr_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The service request number (0 through 3) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>IRQ type (Kernel specific interrupt vs Module wide shared interrupt ) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para></simplesect>
<simplesect kind="par"><title>Description:</title><para>Activates a Service Request line(manually trigger).<linebreak/>
<linebreak/>
VADC provides few SR lines for each group and a few more which is shared across all the groups. These SR lines can be connected to an NVIC node which in-turn would generate an interrupt. This API would manually trigger the given SR line. Could be used for evaluation and testing purposes.</para></simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h" line="2628" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="date"><para>2019-12-02 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="139"><highlight class="preprocessor">#ifndef<sp/>XMC_VADC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*********************************************************************************************************************</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>HEADER<sp/>FILES</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xmc_common.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="xmc__scu_8h" kindref="compound">xmc_scu.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xmc_vadc_map.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="comment">/*********************************************************************************************************************</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>MACROS</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>((UC_SERIES<sp/>==<sp/>XMC42)||(UC_SERIES<sp/>==<sp/>XMC41)<sp/>||<sp/>(UC_SERIES<sp/>==<sp/>XMC43))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>group<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GSCAN_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>scan<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_QUEUE_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>queue<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>external<sp/>multiplexer<sp/>support<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>check<sp/>support<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MULTIPLE_SLAVEGROUPS<sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>synchronous<sp/>request<sp/>source<sp/>in<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>groups<sp/>available<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_FLAG_SELECT<sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>flags<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_CH_SEL_STYLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>external<sp/>multiplexer<sp/>channel<sp/>selection<sp/>mode<sp/>of</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation<sp/>for<sp/>a<sp/>particular<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_FULL_SET_REG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_SRCREG_AVAILABLE<sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>source<sp/>specific<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_RESULT_PRIORITY_AVAILABLE<sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>priority<sp/>for<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(UC_SERIES<sp/>==<sp/>XMC44<sp/>||<sp/>UC_SERIES<sp/>==<sp/>XMC47<sp/>||<sp/>UC_SERIES<sp/>==<sp/>XMC48)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>group<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GSCAN_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>scan<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_QUEUE_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>queue<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>external<sp/>multiplexer<sp/>support<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>check<sp/>support<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MULTIPLE_SLAVEGROUPS<sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>synchronous<sp/>request<sp/>source<sp/>in<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS<sp/><sp/><sp/><sp/><sp/><sp/>(4U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>groups<sp/>available<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_FLAG_SELECT<sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>flags<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_CH_SEL_STYLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>external<sp/>multiplexer<sp/>channel<sp/>selection<sp/>mode<sp/>of</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation<sp/>for<sp/>a<sp/>particular<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_FULL_SET_REG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_SRCREG_AVAILABLE<sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>source<sp/>specific<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_RESULT_PRIORITY_AVAILABLE<sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>priority<sp/>for<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(UC_SERIES<sp/>==<sp/>XMC45)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>group<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GSCAN_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>scan<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_QUEUE_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>queue<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>external<sp/>multiplexer<sp/>support<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>check<sp/>support<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MULTIPLE_SLAVEGROUPS<sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>synchronous<sp/>request<sp/>source<sp/>in<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS<sp/><sp/><sp/><sp/><sp/><sp/>(4U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>groups<sp/>available<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_FLAG_SELECT<sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>flags<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_CH_SEL_STYLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>external<sp/>multiplexer<sp/>channel<sp/>selection<sp/>mode<sp/>of</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation<sp/>for<sp/>a<sp/>particular<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_FULL_SET_REG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_SRCREG_AVAILABLE<sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>source<sp/>specific<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_RESULT_PRIORITY_AVAILABLE<sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>priority<sp/>for<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(UC_SERIES<sp/>==<sp/>XMC14<sp/>||<sp/>UC_SERIES<sp/>==<sp/>XMC13<sp/>||<sp/>UC_SERIES<sp/>==<sp/>XMC12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>group<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GSCAN_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>scan<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_QUEUE_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>queue<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>external<sp/>multiplexer<sp/>support<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>check<sp/>support<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MULTIPLE_SLAVEGROUPS<sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>synchronous<sp/>request<sp/>source<sp/>in<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS<sp/><sp/><sp/><sp/><sp/><sp/>(2U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>groups<sp/>available<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_FLAG_SELECT<sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>flags<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_CH_SEL_STYLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>external<sp/>multiplexer<sp/>channel<sp/>selection<sp/>mode<sp/>of</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation<sp/>for<sp/>a<sp/>particular<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_FULL_SET_REG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_SRCREG_AVAILABLE<sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>source<sp/>specific<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_RESULT_PRIORITY_AVAILABLE<sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>priority<sp/>for<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(UC_SERIES<sp/>==<sp/>XMC11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>group<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GSCAN_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>scan<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_QUEUE_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>queue<sp/>request<sp/>resource<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>external<sp/>multiplexer<sp/>support<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>check<sp/>support<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MULTIPLE_SLAVEGROUPS<sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>synchronous<sp/>request<sp/>source<sp/>in<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS<sp/><sp/><sp/><sp/><sp/><sp/>(2U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>groups<sp/>available<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_BOUNDARY_FLAG_SELECT<sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>boundary<sp/>flags<sp/>in<sp/>a<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_START_UP_CAL_ACTIVE<sp/>(3U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>need<sp/>for<sp/>SHS<sp/>startup<sp/>calibration<sp/>activation<sp/>for</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XMC1100<sp/>devices<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_CONV_ENABLE_FOR_XMC11<sp/><sp/><sp/>(*(uint32_t*)<sp/>0x40010500UL)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>additional<sp/>errata<sp/>setting<sp/>for</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XMC1100<sp/>device<sp/>for<sp/>effective<sp/>working*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_EMUX_CH_SEL_STYLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/><sp/>Defines<sp/>the<sp/>external<sp/>multiplexer<sp/>channel<sp/>selection<sp/>mode<sp/>of</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operation<sp/>for<sp/>a<sp/>particular<sp/>device*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_AVAILABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_SHS_FULL_SET_REG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>availability<sp/>of<sp/>sample<sp/>and<sp/>hold<sp/>module*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_GROUP_SRCREG_AVAILABLE<sp/><sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>source<sp/>specific<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_RESULT_PRIORITY_AVAILABLE<sp/>(0U)<sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>availability<sp/>of<sp/>a<sp/>priority<sp/>for<sp/>result<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_NUM_PORTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(16U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>number<sp/>of<sp/>hardware<sp/>ports<sp/>that<sp/>can<sp/>be<sp/>configured</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>triggers<sp/>and<sp/>gating<sp/>signals<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_NUM_RESULT_REGISTERS<sp/><sp/><sp/><sp/>(16U)<sp/></highlight><highlight class="comment">/*<sp/>Defines<sp/>the<sp/>number<sp/>of<sp/>result<sp/>holding<sp/>registers<sp/>per<sp/>ADC<sp/>group<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_VADC_NUM_CHANNELS_PER_GROUP<sp/><sp/>(8U)<sp/><sp/></highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"></highlight><highlight class="comment">/*********************************************************************************************************************</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>ENUMS</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>********************************************************************************************************************/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref>;<sp/></highlight></codeline>
<codeline lineno="319"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VADC_GLOBAL_TypeDef<sp/><ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref>;<sp/></highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor">#if(XMC_VADC_GROUP_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VADC_G_TypeDef<sp/><ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref>;<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>SHS_Type<sp/><ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref>;<sp/></highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_STATUS</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggabac544a8f57b163dff69b444ed5f1d87a2803f6adfdcdca2268420d41686991bb" kindref="member">XMC_VADC_STATUS_SUCCESS</ref><sp/>=<sp/>0,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggabac544a8f57b163dff69b444ed5f1d87a3634aa8e895380c02d16fba23f4212ec" kindref="member">XMC_VADC_STATUS_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gabac544a8f57b163dff69b444ed5f1d87" kindref="member">XMC_VADC_STATUS_t</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_SR</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1ab464629a3f5c67a4e6f9b738f2e02bb4" kindref="member">XMC_VADC_SR_GROUP_SR0</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1ab9c251a1ccf84c51844de7f15477c7d7" kindref="member">XMC_VADC_SR_GROUP_SR1</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1a5b88744b75b1e4a54fd1cc18e02cbe09" kindref="member">XMC_VADC_SR_GROUP_SR2</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1a12d1401a5acfec2e47607d71d559e453" kindref="member">XMC_VADC_SR_GROUP_SR3</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1ab49d758848e891936f2469b28c2f9ec5" kindref="member">XMC_VADC_SR_SHARED_SR0</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1a89d85bc678a0e381e9180468ab543900" kindref="member">XMC_VADC_SR_SHARED_SR1</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1aa8428db76657e0711415efe99767ef95" kindref="member">XMC_VADC_SR_SHARED_SR2</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab518b0c522cae78b7434dfa327a540b1a08fe0b7046ea542383fe053bb18c293a" kindref="member">XMC_VADC_SR_SHARED_SR3</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_STARTMODE</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga227aaa91c89c64c8402c869469276eb9a603a2da364137de801452b7680f9b1c0" kindref="member">XMC_VADC_STARTMODE_WFS</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga227aaa91c89c64c8402c869469276eb9ab39b9f2a959b6ec9ac138e7c020c9aae" kindref="member">XMC_VADC_STARTMODE_CIR</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga227aaa91c89c64c8402c869469276eb9ad8450a9b8f9173ce4bb46c1f3d453e7b" kindref="member">XMC_VADC_STARTMODE_CNR</ref><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="365"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga227aaa91c89c64c8402c869469276eb9" kindref="member">XMC_VADC_STARTMODE_t</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_TRIGGER_EDGE</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaabd0d22cd15f13e6e49809a3b811b241a6f9b8e9ab9a1fa139050f87bf576ed85" kindref="member">XMC_VADC_TRIGGER_EDGE_NONE</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaabd0d22cd15f13e6e49809a3b811b241a6c2f089ee48ddbe0709370aaff7e2eaa" kindref="member">XMC_VADC_TRIGGER_EDGE_FALLING</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaabd0d22cd15f13e6e49809a3b811b241a8d7edb1df35ead7a90fd5640861228a5" kindref="member">XMC_VADC_TRIGGER_EDGE_RISING</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaabd0d22cd15f13e6e49809a3b811b241a18d01d02320eb514e85edc66cd4b53e4" kindref="member">XMC_VADC_TRIGGER_EDGE_ANY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gaabd0d22cd15f13e6e49809a3b811b241" kindref="member">XMC_VADC_TRIGGER_EDGE_t</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_TRIGGER_INPUT_SELECT</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97aa747e2d141cbdc20050f43294940282b" kindref="member">XMC_VADC_REQ_TR_A</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a53e03e8e843f703d055a610b78291da2" kindref="member">XMC_VADC_REQ_TR_B</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a7adc7d31060d1dcb69c97d78d9ebda36" kindref="member">XMC_VADC_REQ_TR_C</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a816f02d251e2477463ca5e6dcca79f68" kindref="member">XMC_VADC_REQ_TR_D</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97ab62b73b50451cf3260dbb42164713bb1" kindref="member">XMC_VADC_REQ_TR_E</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97aa200440561888cab0204fb632adf0e17" kindref="member">XMC_VADC_REQ_TR_F</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97ac690682200ba8fc59f106563d4603998" kindref="member">XMC_VADC_REQ_TR_G</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a4620708e2388498ad0efc07586fd7e30" kindref="member">XMC_VADC_REQ_TR_H</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a29a5bc3d4ce50b42c98b568fa6d76d09" kindref="member">XMC_VADC_REQ_TR_I</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a8676bf7270afed2fa20b8fe6b303829d" kindref="member">XMC_VADC_REQ_TR_J</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a3fc091b811ad27e5aee89237e43b93c9" kindref="member">XMC_VADC_REQ_TR_K</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97ac94b58fec8333f270cb7c56791d1b957" kindref="member">XMC_VADC_REQ_TR_L</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a495470ce5d64a1a25ba5709e5aa210b6" kindref="member">XMC_VADC_REQ_TR_M</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97a51236825d82a7f0ecc7110637f2e05e7" kindref="member">XMC_VADC_REQ_TR_N</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97aae6010c1367966e9c37248c877612b84" kindref="member">XMC_VADC_REQ_TR_O</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab71bdae1d928ee308430626a761eab97aeb73c906f67594383011749f10240722" kindref="member">XMC_VADC_REQ_TR_P</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gab71bdae1d928ee308430626a761eab97" kindref="member">XMC_VADC_TRIGGER_INPUT_SELECT_t</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GATE_INPUT_SELECT</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa628fa2a0ae62f6676d9f0aa6e6c78f34" kindref="member">XMC_VADC_REQ_GT_A</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa19af54717bfaa667ea4fd277bd9b1363" kindref="member">XMC_VADC_REQ_GT_B</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9faf9002b27a33b94fcbb01283f26a9af2f" kindref="member">XMC_VADC_REQ_GT_C</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa19a4b78111378dabcc5b6cfc784f12bf" kindref="member">XMC_VADC_REQ_GT_D</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa31eb3921627e7f9235d728ed7b3c5c55" kindref="member">XMC_VADC_REQ_GT_E</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fac5ad2424cc03a834d6c4b8ecd1588795" kindref="member">XMC_VADC_REQ_GT_F</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fac427fc9bece629f5ad3534c08ba60477" kindref="member">XMC_VADC_REQ_GT_G</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa949e53a7798ed7e81e4441d45da8e584" kindref="member">XMC_VADC_REQ_GT_H</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa604981cad23be4290b7186a999670de1" kindref="member">XMC_VADC_REQ_GT_I</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fad5640a3b1c65f8b13eb19b8a48bff0b1" kindref="member">XMC_VADC_REQ_GT_J</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa39fff78f06b392778b82e5865ea30c19" kindref="member">XMC_VADC_REQ_GT_K</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa58a6afc1fb1a441196de4c2010ee9fa9" kindref="member">XMC_VADC_REQ_GT_L</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9faa3ddf0b32c2642cddd92f5a7062eb0f7" kindref="member">XMC_VADC_REQ_GT_M</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fa37a52e037bb5ef38e0843cabd63637e9" kindref="member">XMC_VADC_REQ_GT_N</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9faaa030baffac71a32d53b77369fc5137a" kindref="member">XMC_VADC_REQ_GT_O</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa16f1136a4a4efddcd67ebd5fc69bc9fae36d43191eba009ea267acc503d8524f" kindref="member">XMC_VADC_REQ_GT_P</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="431"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gaa16f1136a4a4efddcd67ebd5fc69bc9f" kindref="member">XMC_VADC_GATE_INPUT_SELECT_t</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GATEMODE</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8ac913472cb9094d0ad24cb25df3a42ede" kindref="member">XMC_VADC_GATEMODE_BLOCK</ref><sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8a49069b53946c883dedc6c59dbf67dae8" kindref="member">XMC_VADC_GATEMODE_IGNORE</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8a7c7672639ef846098badaa1273b23a7b" kindref="member">XMC_VADC_GATEMODE_ACTIVEHIGH</ref>,<sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8a6c503bea41d82b4d2b00bbbdc1d39ac6" kindref="member">XMC_VADC_GATEMODE_ACTIVELOW</ref><sp/><sp/></highlight></codeline>
<codeline lineno="444"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga4db02e3b835b8cad941ab60ae288f8c8" kindref="member">XMC_VADC_GATEMODE_t</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_DMM</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaff5ca81d747517a6420fea34642c6778a1bd4f88d1ae65dd412b2bea7084ac6ea" kindref="member">XMC_VADC_DMM_REDUCTION_MODE</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaff5ca81d747517a6420fea34642c6778aed21d04bf248f50ed8284bdc8d82639a" kindref="member">XMC_VADC_DMM_FILTERING_MODE</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaff5ca81d747517a6420fea34642c6778a721c65e6d4d9f3a61595b78f70d4e190" kindref="member">XMC_VADC_DMM_DIFFERENCE_MODE</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gaff5ca81d747517a6420fea34642c6778" kindref="member">XMC_VADC_DMM_t</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_CONVMODE</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga9f7e6983d71750230e15684a2dc0cf12a92a1dd71052d7784f1b2325a3e14df70" kindref="member">XMC_VADC_CONVMODE_12BIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga9f7e6983d71750230e15684a2dc0cf12af7a5c377d4788520327c0822e0ccd18b" kindref="member">XMC_VADC_CONVMODE_10BIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga9f7e6983d71750230e15684a2dc0cf12a787485b122181ae78b66c8e9e56fa0a7" kindref="member">XMC_VADC_CONVMODE_8BIT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/><sp/></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga9f7e6983d71750230e15684a2dc0cf12a09e44e2e8dc7cbb1442aafb8f3f95c99" kindref="member">XMC_VADC_CONVMODE_FASTCOMPARE</ref><sp/>=<sp/>5<sp/><sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga9f7e6983d71750230e15684a2dc0cf12" kindref="member">XMC_VADC_CONVMODE_t</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_FAST_COMPARE</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga42e972915a3d2ac3b46847a4d5228c64a60b1cf2b6fdff4aee40cece2db973494" kindref="member">XMC_VADC_FAST_COMPARE_LOW</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga42e972915a3d2ac3b46847a4d5228c64a17cb1fe0e80b3f5abc52c0b9c060a36b" kindref="member">XMC_VADC_FAST_COMPARE_HIGH</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga42e972915a3d2ac3b46847a4d5228c64ac11d5afc7241581ac99588899ff1d555" kindref="member">XMC_VADC_FAST_COMPARE_UNKNOWN</ref><sp/><sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga42e972915a3d2ac3b46847a4d5228c64" kindref="member">XMC_VADC_FAST_COMPARE_t</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_SCAN_TYPE</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggacbab535e1de48116e5461c2ce7ff5077adbbf7a9b221f5f9e373e6ecb770f64ce" kindref="member">XMC_VADC_SCAN_TYPE_GROUPSCAN</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggacbab535e1de48116e5461c2ce7ff5077a4f944a59ed1cc8477ce269673a38accb" kindref="member">XMC_VADC_SCAN_TYPE_BACKGROUND</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gacbab535e1de48116e5461c2ce7ff5077" kindref="member">XMC_VADC_SCAN_TYPE_t</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_SCAN_LOAD</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga1bf69f8d48c6280914a3a07c3330fd00a5c3cd3659dbddaa0ef9804a09b4e868c" kindref="member">XMC_VADC_SCAN_LOAD_OVERWRITE</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga1bf69f8d48c6280914a3a07c3330fd00a958c98fcf8f114f4d2fc3090eb8a9a4d" kindref="member">XMC_VADC_SCAN_LOAD_COMBINE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="498"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga1bf69f8d48c6280914a3a07c3330fd00" kindref="member">XMC_VADC_SCAN_LOAD_t</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_CHANNEL_CONV</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03a01d1d18f4ea33aae01eb486660393989" kindref="member">XMC_VADC_CHANNEL_CONV_GROUP_CLASS0</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03aa39fbfa369d7a906592f7849e58298a2" kindref="member">XMC_VADC_CHANNEL_CONV_GROUP_CLASS1</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03a6092acad2d6d9493846dbd0c2ac67daf" kindref="member">XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03a17cadc6c0c0772e937e23f1ad1818264" kindref="member">XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="512"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" kindref="member">XMC_VADC_CHANNEL_CONV_t</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_CHANNEL_BOUNDARY</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga203ae2271679fb3e05d185a6bd14b8b2a2eb22e6976e5553aaacea29538beda6b" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga203ae2271679fb3e05d185a6bd14b8b2a103e8fab52a5fe949383b59872d02069" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga203ae2271679fb3e05d185a6bd14b8b2addb07a657e568468242cd7f4d6b37575" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga203ae2271679fb3e05d185a6bd14b8b2add5718928c0d3516f42886d6c96fe790" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga203ae2271679fb3e05d185a6bd14b8b2" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_t</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_CHANNEL_BWDCH</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga91049cf62e24988e2df8554af78e2183a6557c82bb5f3f79333dc0f5adf72bb40" kindref="member">XMC_VADC_CHANNEL_BWDCH_VAGND</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga91049cf62e24988e2df8554af78e2183ad30d5559ec906982f98c5c3b9f3a2149" kindref="member">XMC_VADC_CHANNEL_BWDCH_VAREF</ref><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="535"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga91049cf62e24988e2df8554af78e2183" kindref="member">XMC_VADC_CHANNEL_BWDCH_t</ref>;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_CHANNEL_EVGEN</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a84a7270450c56954fea5768f8dfd9f1a" kindref="member">XMC_VADC_CHANNEL_EVGEN_NEVER</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a81136e28dae1a2b4b27184f47b197199" kindref="member">XMC_VADC_CHANNEL_EVGEN_INBOUND</ref><sp/><sp/><sp/>=<sp/>1U,<sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a13b50b90ecfc83823ebd41d6399078af" kindref="member">XMC_VADC_CHANNEL_EVGEN_COMPHIGH</ref><sp/><sp/>=<sp/>1U,<sp/></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a67fa97a42d92971a0628e4c96102e602" kindref="member">XMC_VADC_CHANNEL_EVGEN_OUTBOUND</ref><sp/><sp/>=<sp/>2U,<sp/></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a26977d4681508972cfa75c3b49be7ea9" kindref="member">XMC_VADC_CHANNEL_EVGEN_COMPLOW</ref><sp/><sp/><sp/>=<sp/>2U,<sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga1b6bf4c15562eef67deac95cb36a48d6a9743b4856f1e187c9143dad7613defde" kindref="member">XMC_VADC_CHANNEL_EVGEN_ALWAYS</ref><sp/><sp/><sp/><sp/>=<sp/>3U<sp/></highlight></codeline>
<codeline lineno="548"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga1b6bf4c15562eef67deac95cb36a48d6" kindref="member">XMC_VADC_CHANNEL_EVGEN_t</ref>;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_CHANNEL_REF</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab0c1eb7f8d8743b6b98ebfe8acd14e28aca253c1b3d320840ed1d64e5791a69a4" kindref="member">XMC_VADC_CHANNEL_REF_INTREF</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab0c1eb7f8d8743b6b98ebfe8acd14e28a4b8c8f8bfbbd58dcf804d166f159a654" kindref="member">XMC_VADC_CHANNEL_REF_ALT_CH0</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="557"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gab0c1eb7f8d8743b6b98ebfe8acd14e28" kindref="member">XMC_VADC_CHANNEL_REF_t</ref>;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_CHANNEL_BOUNDARY_CONDITION</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga69fe77fd05cfd4a502f14becf6352ceaa12e3fcda7b15fb19e8a24875dc4e140a" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga69fe77fd05cfd4a502f14becf6352ceaa37e4c015407377c2514bd9c44c4d6662" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND</ref><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga69fe77fd05cfd4a502f14becf6352cea" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_EVENT</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa69659f0a647c58e6a0c434759a5f358ac6d9b471959c249288e9eb86eb874fe3" kindref="member">XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE</ref><sp/>=<sp/>VADC_GLOBEFLAG_SEVGLB_Msk,<sp/></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa69659f0a647c58e6a0c434759a5f358acd0bc4bf1a88d34dde532f8c597b3de8" kindref="member">XMC_VADC_GLOBAL_EVENT_RESULT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>VADC_GLOBEFLAG_REVGLB_Msk<sp/><sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gaa69659f0a647c58e6a0c434759a5f358" kindref="member">XMC_VADC_GLOBAL_EVENT_t</ref>;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_POWERMODE</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga7226349aef79a52f614eb5e75e3f55d9a498fe251b61022633a09f361b4841586" kindref="member">XMC_VADC_GROUP_POWERMODE_OFF</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga7226349aef79a52f614eb5e75e3f55d9ae3c0c22d5402543c828f19565cce9e8d" kindref="member">XMC_VADC_GROUP_POWERMODE_RESERVED1</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga7226349aef79a52f614eb5e75e3f55d9a135622a1a6f56a7b8a88b55d38e973ca" kindref="member">XMC_VADC_GROUP_POWERMODE_RESERVED2</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga7226349aef79a52f614eb5e75e3f55d9a4394cff3deb041f3198a2c7c9ffaa25a" kindref="member">XMC_VADC_GROUP_POWERMODE_NORMAL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="588"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga7226349aef79a52f614eb5e75e3f55d9" kindref="member">XMC_VADC_GROUP_POWERMODE_t</ref>;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_STATE</highlight></codeline>
<codeline lineno="594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga4effb949346537c7a515c4f2ff542df5a59cb41943a0b5ba6e7e6abcf95ea6775" kindref="member">XMC_VADC_GROUP_STATE_IDLE</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga4effb949346537c7a515c4f2ff542df5ae99f75960aa2617f81cbceb8346b24f3" kindref="member">XMC_VADC_GROUP_STATE_BUSY</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="597"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga4effb949346537c7a515c4f2ff542df5" kindref="member">XMC_VADC_GROUP_STATE_t</ref>;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_CONV</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggadf393a8c811d7ee6601688797e616646ac78caa8ace779a519cce8e2b005e5184" kindref="member">XMC_VADC_GROUP_CONV_STD</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggadf393a8c811d7ee6601688797e616646a87e29eeb94abb3bcbc4075cda129d8a9" kindref="member">XMC_VADC_GROUP_CONV_EMUX</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="607"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gadf393a8c811d7ee6601688797e616646" kindref="member">XMC_VADC_GROUP_CONV_t</ref>;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_ARBMODE</highlight></codeline>
<codeline lineno="613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaeab802d00faa3aad6269c620a15a381ba2f3e98ed8180a3561aaab67e7e5bd582" kindref="member">XMC_VADC_GROUP_ARBMODE_ALWAYS</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaeab802d00faa3aad6269c620a15a381baca890d7bfd6eadf36d582bde6f3e7c19" kindref="member">XMC_VADC_GROUP_ARBMODE_ONDEMAND</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gaeab802d00faa3aad6269c620a15a381b" kindref="member">XMC_VADC_GROUP_ARBMODE_t</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_EMUXMODE</highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab9942639fc1d53fc2335990884b394baa1bbd7dfdc24faec8d522a758ae7fe880" kindref="member">XMC_VADC_GROUP_EMUXMODE_SWCTRL</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab9942639fc1d53fc2335990884b394baaf8c2244a73ee118a28dcb5bf8ac51685" kindref="member">XMC_VADC_GROUP_EMUXMODE_STEADYMODE</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab9942639fc1d53fc2335990884b394baaad4e4c8354234a5c17a3aef01c761138" kindref="member">XMC_VADC_GROUP_EMUXMODE_SINGLEMODE</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggab9942639fc1d53fc2335990884b394baa59b2f18f53866fc7d0cf76f34cea5939" kindref="member">XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="628"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gab9942639fc1d53fc2335990884b394ba" kindref="member">XMC_VADC_GROUP_EMUXMODE_t</ref>;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_EMUXCODE</highlight></codeline>
<codeline lineno="634"><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaedf62af4b76d15e91f0786165ec34fc2a099d6b915907a8f95b4e7cd1f3735765" kindref="member">XMC_VADC_GROUP_EMUXCODE_BINARY</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaedf62af4b76d15e91f0786165ec34fc2a0d8e365e9f36b5fe5fd3e4c935e90e2f" kindref="member">XMC_VADC_GROUP_EMUXCODE_GRAY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="637"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gaedf62af4b76d15e91f0786165ec34fc2" kindref="member">XMC_VADC_GROUP_EMUXCODE_t</ref>;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_IRQ</highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga14a1cbb73bf2a92a3321aea14488f354a063619a30aa8bb3d0bb37b0d32684d43" kindref="member">XMC_VADC_GROUP_IRQ_KERNEL</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga14a1cbb73bf2a92a3321aea14488f354a674afc8864f13a19d6a067c517fd8f7d" kindref="member">XMC_VADC_GROUP_IRQ_SHARED</ref><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="646"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga14a1cbb73bf2a92a3321aea14488f354" kindref="member">XMC_VADC_GROUP_IRQ_t</ref>;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_RESULT_ALIGN</highlight></codeline>
<codeline lineno="652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga5db9760a1339267ae158e21ee3047859ade5aecb252a5ad2723252659ee392551" kindref="member">XMC_VADC_RESULT_ALIGN_LEFT</ref><sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga5db9760a1339267ae158e21ee3047859aa99c3eed20b4f1aea940ba4fb2f981e7" kindref="member">XMC_VADC_RESULT_ALIGN_RIGHT</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="655"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga5db9760a1339267ae158e21ee3047859" kindref="member">XMC_VADC_RESULT_ALIGN_t</ref>;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_RESULT_SUBTRATION</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9a3cd9c267d66c7fa9fb2d370efdbdd3aa" kindref="member">XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN</ref><sp/><sp/>=<sp/>0U,<sp/><sp/></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9a5a61ab2a5730ecd46011f314dda62d03" kindref="member">XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN</ref><sp/>=<sp/>0U,<sp/><sp/></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9a87c46ef691a6ee86c325488cbdf81113" kindref="member">XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN</ref><sp/><sp/>=<sp/>2U,<sp/><sp/></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9a51ffb88efc7b7732a9e1750ae4b3e282" kindref="member">XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN</ref><sp/>=<sp/>0U,<sp/><sp/></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9ab171e9536b873fdc8411db4abee1779d" kindref="member">XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN</ref><sp/><sp/><sp/>=<sp/>4U,<sp/><sp/></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga2ccdb8c01810bbd767c8e7d4ee5453f9ac7382d968abcce7449d9da40d73c0eae" kindref="member">XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN</ref><sp/><sp/>=<sp/>0U,<sp/><sp/></highlight></codeline>
<codeline lineno="665"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga2ccdb8c01810bbd767c8e7d4ee5453f9" kindref="member">XMC_VADC_RESULT_SUBTRATION_t</ref>;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_RS_PRIORITY</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga9e8bcdf4c424a70b70e93368f1ef0021ab10f26da7901b950046a056f9c0fa145" kindref="member">XMC_VADC_GROUP_RS_PRIORITY_0</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga9e8bcdf4c424a70b70e93368f1ef0021aeaaca134d7c9e0b3e7fd359fb0597675" kindref="member">XMC_VADC_GROUP_RS_PRIORITY_1</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga9e8bcdf4c424a70b70e93368f1ef0021ab5e5ad7cfcc2afad2f6338221786812a" kindref="member">XMC_VADC_GROUP_RS_PRIORITY_2</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga9e8bcdf4c424a70b70e93368f1ef0021a76caa4614542b8ecb59feda23d6fa1df" kindref="member">XMC_VADC_GROUP_RS_PRIORITY_3</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga9e8bcdf4c424a70b70e93368f1ef0021" kindref="member">XMC_VADC_GROUP_RS_PRIORITY_t</ref>;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_BOUNDARY_FLAG_MODE</highlight></codeline>
<codeline lineno="682"><highlight class="normal">{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga017b3c6d3e14d46d5cf60602f262659da247876a12a1ec728b08ad22a23461dd0" kindref="member">XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga017b3c6d3e14d46d5cf60602f262659da1c42beaee2cb5656833697e2b75a9fe5" kindref="member">XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga017b3c6d3e14d46d5cf60602f262659da3ec5736710604ff2d447c09d0ed521da" kindref="member">XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW</ref>,<sp/></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga017b3c6d3e14d46d5cf60602f262659da40e92524506d5b3ed3654f83be18da33" kindref="member">XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH</ref><sp/></highlight></codeline>
<codeline lineno="687"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga017b3c6d3e14d46d5cf60602f262659d" kindref="member">XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t</ref>;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_BOUNDARY_SELECT</highlight></codeline>
<codeline lineno="694"><highlight class="normal">{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga23f503143ad7d53a741328bf71faa03eacdb1f74e41391ac923fe51ebc94521f8" kindref="member">XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND</ref><sp/>=<sp/>0U,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga23f503143ad7d53a741328bf71faa03eaf7cd6e9ead0944c9599e9a7cf816f3ca" kindref="member">XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND</ref><sp/>=<sp/>2U<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="697"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga23f503143ad7d53a741328bf71faa03e" kindref="member">XMC_VADC_BOUNDARY_SELECT_t</ref>;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_INDEX</highlight></codeline>
<codeline lineno="704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>XMC_VADC_GROUP_INDEX_0<sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>XMC_VADC_GROUP_INDEX_1,</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_MAXIMUM_NUM_GROUPS<sp/>&gt;<sp/>2U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>XMC_VADC_GROUP_INDEX_2,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>XMC_VADC_GROUP_INDEX_3</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref>;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_CHANNEL_ALIAS</highlight></codeline>
<codeline lineno="718"><highlight class="normal">{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>XMC_VADC_CHANNEL_ALIAS_DISABLED<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>XMC_VADC_CHANNEL_ALIAS_CH0<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>XMC_VADC_CHANNEL_ALIAS_CH1<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>XMC_VADC_CHANNEL_ALIAS_CH2<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>XMC_VADC_CHANNEL_ALIAS_CH3<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>XMC_VADC_CHANNEL_ALIAS_CH4<sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>XMC_VADC_CHANNEL_ALIAS_CH5<sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>XMC_VADC_CHANNEL_ALIAS_CH6<sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>XMC_VADC_CHANNEL_ALIAS_CH7<sp/>=<sp/>7</highlight></codeline>
<codeline lineno="728"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga32e761497c835cb7995991380b8b9676" kindref="member">XMC_VADC_CHANNEL_ALIAS_t</ref>;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_AREF</highlight></codeline>
<codeline lineno="736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga66c363caf91b81a17ffd84aa75dd54d2abce07e992195577c902c079729c607a3" kindref="member">XMC_VADC_GLOBAL_SHS_AREF_EXTERNAL_VDD_UPPER_RANGE</ref><sp/>=<sp/>0<sp/>&lt;&lt;<sp/>SHS_SHSCFG_AREF_Pos,<sp/></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga66c363caf91b81a17ffd84aa75dd54d2a485f86b4dab871ecd3f174fa403f4622" kindref="member">XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_UPPER_RANGE</ref><sp/>=<sp/>2<sp/>&lt;&lt;<sp/>SHS_SHSCFG_AREF_Pos,<sp/></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga66c363caf91b81a17ffd84aa75dd54d2acaae84a84135d98b689dbb320380b21a" kindref="member">XMC_VADC_GLOBAL_SHS_AREF_INTERNAL_VDD_LOWER_RANGE</ref><sp/>=<sp/>3<sp/>&lt;&lt;<sp/>SHS_SHSCFG_AREF_Pos,<sp/></highlight></codeline>
<codeline lineno="740"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga66c363caf91b81a17ffd84aa75dd54d2" kindref="member">XMC_VADC_GLOBAL_SHS_AREF_t</ref>;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_FULL_SET_REG<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_SHS_GAIN_LEVEL</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>XMC_VADC_SHS_GAIN_LEVEL_0<sp/>=<sp/>SHS_CALOC0_CALOFFVAL0_Pos,<sp/></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>XMC_VADC_SHS_GAIN_LEVEL_1<sp/>=<sp/>SHS_CALOC0_CALOFFVAL1_Pos,<sp/></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>XMC_VADC_SHS_GAIN_LEVEL_2<sp/>=<sp/>SHS_CALOC0_CALOFFVAL2_Pos,<sp/></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>XMC_VADC_SHS_GAIN_LEVEL_3<sp/>=<sp/>SHS_CALOC0_CALOFFVAL3_Pos<sp/><sp/></highlight></codeline>
<codeline lineno="752"><highlight class="normal">}<sp/>XMC_VADC_SHS_GAIN_LEVEL_t;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_SHS_LOOP_CH</highlight></codeline>
<codeline lineno="759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggae43c31aa12cebdad8a95072453ce71b8a7ab1638f0adc462c223be819b45964ed" kindref="member">XMC_VADC_SHS_LOOP_CH_0</ref><sp/>=<sp/>SHS_LOOP_LPCH0_Pos,<sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggae43c31aa12cebdad8a95072453ce71b8a66588df417260b06419f2dd4498dbf4f" kindref="member">XMC_VADC_SHS_LOOP_CH_1</ref><sp/>=<sp/>SHS_LOOP_LPCH1_Pos<sp/></highlight></codeline>
<codeline lineno="762"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gae43c31aa12cebdad8a95072453ce71b8" kindref="member">XMC_VADC_SHS_LOOP_CH_t</ref>;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER</highlight></codeline>
<codeline lineno="768"><highlight class="normal">{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa82e58957a3cdeed35f4fadd92682e7caabf799ce29f4c349c62cb1fd6c9a7f0d" kindref="member">XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaa82e58957a3cdeed35f4fadd92682e7ca301ddac0f094d741b2a7d28de22ef8c6" kindref="member">XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="771"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gaa82e58957a3cdeed35f4fadd92682e7c" kindref="member">XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t</ref>;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_BOUNDARY_FLAG_SELECT<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_BOUNDARY_NODE</highlight></codeline>
<codeline lineno="779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a5871cf5f794a93a0e7739313968df016" kindref="member">XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0</ref><sp/>=<sp/>0U,<sp/></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a179f42ef75221f50205e67f952a71848" kindref="member">XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a8b150f168ea6a5fe6c44e8f9c57b63a4" kindref="member">XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8afe673240d00f42455d5223c28980d370" kindref="member">XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a3d09cf9d3fc62eda8f3d042e9274d5dc" kindref="member">XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a5361152bc79e663402273685c284f712" kindref="member">XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a2ae279f48d4197a599e3f88a8ce2818f" kindref="member">XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ggaebb436d84700b3f1a711a834119646b8a75680938f7390fc377b5a45dc8d002f2" kindref="member">XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="788"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1gaebb436d84700b3f1a711a834119646b8" kindref="member">XMC_VADC_BOUNDARY_NODE_t</ref>;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GROUP_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_VADC_SYNCTR_EVAL</highlight></codeline>
<codeline lineno="796"><highlight class="normal">{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gga21468d2b1e9b6110c35e6816fe3e256aa8f49d67e5eb2e285fb6fca56c3ae2d57" kindref="member">XMC_VADC_SYNCTR_EVAL_1</ref><sp/>=<sp/>VADC_G_SYNCTR_EVALR1_Msk,<sp/></highlight></codeline>
<codeline lineno="798"><highlight class="preprocessor">#if<sp/>(XMC_VADC_MAXIMUM_NUM_GROUPS<sp/>&gt;<sp/>2U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>XMC_VADC_SYNCTR_EVAL_2<sp/>=<sp/>VADC_G_SYNCTR_EVALR2_Msk,<sp/></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>XMC_VADC_SYNCTR_EVAL_3<sp/>=<sp/>VADC_G_SYNCTR_EVALR3_Msk<sp/><sp/></highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal">}<sp/><ref refid="group___v_a_d_c_1ga21468d2b1e9b6110c35e6816fe3e256a" kindref="member">XMC_VADC_SYNCTR_EVAL_t</ref>;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">/*********************************************************************************************************************</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>DATA<sp/>STRUCTURES</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">/*Anonymous<sp/>structure/union<sp/>guard<sp/>start*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CC_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>anon_unions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__TASKING__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>586</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="818" refid="struct_x_m_c___v_a_d_c___s_c_a_n___c_o_n_f_i_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_SCAN_CONFIG</highlight></codeline>
<codeline lineno="819"><highlight class="normal">{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>uint32_t<sp/>conv_start_mode<sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>uint32_t<sp/>req_src_priority<sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_GROUP_SRCREG_AVAILABLE<sp/>==<sp/>(1U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_specific_result_reg<sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="834"><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>trigger_signal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>trigger_edge<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>gate_signal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>timer_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>asctrl;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>external_trigger<sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>req_src_interrupt<sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>enable_auto_scan<sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>load_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>26;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>asmr;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="867"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___s_c_a_n___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_SCAN_CONFIG_t</ref>;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___s_c_a_n___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_SCAN_CONFIG_t</ref><sp/><ref refid="group___v_a_d_c_1ga5df621dbf8385ce88a2fbe632a75d02d" kindref="member">XMC_VADC_BACKGROUND_CONFIG_t</ref>;<sp/></highlight></codeline>
<codeline lineno="876" refid="struct_x_m_c___v_a_d_c___c_h_a_n_n_e_l___c_o_n_f_i_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_CHANNEL_CONFIG</highlight></codeline>
<codeline lineno="877"><highlight class="normal">{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>input_class<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>lower_boundary_select<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>upper_boundary_select<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>event_gen_criteria<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sync_conversion<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>alternate_reference<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>result_reg_number<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>use_global_result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>result_alignment<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>6;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>broken_wire_detect_channel<sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>broken_wire_detect<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>chctr;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_BOUNDARY_FLAG_SELECT<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flag_output_condition_ch0<sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flag_output_condition_ch1<sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flag_output_condition_ch2<sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flag_output_condition_ch3<sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="920"><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_BOUNDARY_FLAG_SELECT<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>invert_boundary_flag_ch0<sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>invert_boundary_flag_ch1<sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>invert_boundary_flag_ch2<sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>invert_boundary_flag_ch3<sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="930"><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary_flag_output_ch0<sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary_flag_output_ch1<sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary_flag_output_ch2<sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary_flag_output_ch3<sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="935"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>12;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bfl;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_BOUNDARY_FLAG_SELECT<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary_flag_mode_ch0<sp/><sp/><sp/><sp/>:<sp/>4;<sp/></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary_flag_mode_ch1<sp/><sp/><sp/><sp/>:<sp/>4;<sp/></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary_flag_mode_ch2<sp/><sp/><sp/><sp/>:<sp/>4;<sp/></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary_flag_mode_ch3<sp/><sp/><sp/><sp/>:<sp/>4;<sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>16;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bflc;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>channel_priority;<sp/><sp/></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>int8_t<sp/><sp/>alias_channel;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="962"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___c_h_a_n_n_e_l___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_CHANNEL_CONFIG_t</ref>;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="967" refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___e_n_t_r_y__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_QUEUE_ENTRY</highlight></codeline>
<codeline lineno="968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>channel_num<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;<sp/><sp/></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>refill_needed<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>generate_interrupt<sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>external_trigger<sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>24;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>qinr0;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="982"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___e_n_t_r_y__t" kindref="compound">XMC_VADC_QUEUE_ENTRY_t</ref>;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="987" refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___c_o_n_f_i_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_QUEUE_CONFIG</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>uint32_t<sp/>conv_start_mode<sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>uint32_t<sp/>req_src_priority<sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_GROUP_SRCREG_AVAILABLE<sp/>==<sp/>(1U))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_specific_result_reg<sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="1001"><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>trigger_signal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>trigger_edge<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>gate_signal<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>timer_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>qctrl0;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>external_trigger<sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>29;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>qmr0;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_QUEUE_CONFIG_t</ref>;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036" refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_a_s_s__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_GLOBAL_CLASS</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sample_time_std_conv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;<sp/><sp/></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>conversion_mode_standard<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_EMUX_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sampling_phase_emux_channel<sp/><sp/><sp/><sp/><sp/>:<sp/>5;<sp/><sp/></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>conversion_mode_emux<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>16;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>globiclass;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_a_s_s__t" kindref="compound">XMC_VADC_GLOBAL_CLASS_t</ref>;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GROUP_AVAILABLE<sp/>!=<sp/>0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067" refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_o_c_k__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_GLOBAL_CLOCK</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>analog_clock_divider<sp/><sp/><sp/><sp/><sp/>:<sp/>5;<sp/><sp/></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>msb_conversion_clock<sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>arbiter_clock_divider<sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>17;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>globcfg;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_o_c_k__t" kindref="compound">XMC_VADC_GLOBAL_CLOCK_t</ref>;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090" refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_o_n_f_i_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_GLOBAL_CONFIG</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary0<sp/><sp/>:<sp/>12;<sp/><sp/></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary1<sp/><sp/>:<sp/>12;<sp/><sp/></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>globbound;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GROUP_AVAILABLE<sp/>!=<sp/>0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_o_c_k__t" kindref="compound">XMC_VADC_GLOBAL_CLOCK_t</ref><sp/>clock_config;<sp/></highlight></codeline>
<codeline lineno="1105"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_a_s_s__t" kindref="compound">XMC_VADC_GLOBAL_CLASS_t</ref><sp/><sp/>class0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_a_s_s__t" kindref="compound">XMC_VADC_GLOBAL_CLASS_t</ref><sp/><sp/>class1;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>16;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>data_reduction_control<sp/><sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>wait_for_read_mode<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>6;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>event_gen_enable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>globrcr;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>module_disable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>disable_sleep_mode_control<sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>28;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>clc;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_GLOBAL_CONFIG_t</ref>;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140" refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_GROUP_CLASS</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sample_time_std_conv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;<sp/><sp/></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>conversion_mode_standard<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sampling_phase_emux_channel<sp/><sp/><sp/><sp/><sp/>:<sp/>5;<sp/><sp/></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>conversion_mode_emux<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>g_iclass0;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" kindref="compound">XMC_VADC_GROUP_CLASS_t</ref>;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167" refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_GROUP_EMUXCFG</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>starting_external_channel<sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>13;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_EMUX_CH_SEL_STYLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>connected_channel<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>10;<sp/></highlight></codeline>
<codeline lineno="1179"><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>connected_channel<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;<sp/><sp/></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>emux_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>emux_coding<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>stce_usage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1187"><highlight class="preprocessor">#if<sp/>(XMC_VADC_EMUX_CH_SEL_STYLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>emux_channel_select_style<sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>g_emuxctr;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1197"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t" kindref="compound">XMC_VADC_GROUP_EMUXCFG_t</ref>;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204" refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_o_n_f_i_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_GROUP_CONFIG</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t" kindref="compound">XMC_VADC_GROUP_EMUXCFG_t</ref><sp/>emux_config;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" kindref="compound">XMC_VADC_GROUP_CLASS_t</ref><sp/>class0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" kindref="compound">XMC_VADC_GROUP_CLASS_t</ref><sp/>class1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary0<sp/><sp/>:<sp/>12;<sp/><sp/></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>boundary1<sp/><sp/>:<sp/>12;<sp/><sp/></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>g_bound;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>arbitration_round_length<sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>arbiter_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>24;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>g_arbcfg;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_GROUP_CONFIG_t</ref>;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239" refid="struct_x_m_c___v_a_d_c___r_e_s_u_l_t___c_o_n_f_i_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_RESULT_CONFIG</highlight></codeline>
<codeline lineno="1240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>16;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>data_reduction_control<sp/><sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>post_processing_mode<sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>wait_for_read_mode<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>part_of_fifo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>event_gen_enable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>g_rcr;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___r_e_s_u_l_t___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_RESULT_CONFIG_t</ref>;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_FULL_SET_REG<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_GLOBAL_SHS_STEP_CONFIG</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sh_unit_step0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>enable_step0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sh_unit_step1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>enable_step1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sh_unit_step2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>enable_step2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sh_unit_step3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>enable_step3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sh_unit_step4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>enable_step4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sh_unit_step5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>enable_step5<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sh_unit_step6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>enable_step6<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sh_unit_step7<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>enable_step7<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>stepcfg;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}<sp/>XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305" refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___s_h_s___c_o_n_f_i_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_GLOBAL_SHS_CONFIG</highlight></codeline>
<codeline lineno="1306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_FULL_SET_REG<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>shs_clock_divider<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;<sp/></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>6;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>10;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>analog_reference_select<sp/><sp/>:<sp/>2;<sp/></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>20;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>shscfg;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_FULL_SET_REG<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1gaa82e58957a3cdeed35f4fadd92682e7c" kindref="member">XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t</ref><sp/>calibration_order;<sp/></highlight></codeline>
<codeline lineno="1324"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___s_h_s___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_GLOBAL_SHS_CONFIG_t</ref>;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332" refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___d_e_t_a_i_l_e_d___r_e_s_u_l_t__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_GLOBAL_DETAILED_RESULT</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>16;<sp/></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>group_number<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>channel_number<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;<sp/><sp/></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>emux_channel_number<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>converted_request_source<sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>fast_compare_result<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>vaild_result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>res;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1349"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___d_e_t_a_i_l_e_d___r_e_s_u_l_t__t" kindref="compound">XMC_VADC_GLOBAL_DETAILED_RESULT_t</ref>;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354" refid="struct_x_m_c___v_a_d_c___d_e_t_a_i_l_e_d___r_e_s_u_l_t__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_VADC_DETAILED_RESULT</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>16;<sp/></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>data_reduction_counter<sp/><sp/><sp/>:<sp/>4;<sp/><sp/></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>channel_number<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>5;<sp/><sp/></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>emux_channel_number<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>3;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>converted_request_source<sp/>:<sp/>2;<sp/><sp/></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>fast_compare_result<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>vaild_result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>res;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1371"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___v_a_d_c___d_e_t_a_i_l_e_d___r_e_s_u_l_t__t" kindref="compound">XMC_VADC_DETAILED_RESULT_t</ref>;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="comment">/*Anonymous<sp/>structure/union<sp/>guard<sp/>end*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CC_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__TASKING__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning<sp/>restore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="comment">/*********************************************************************************************************************</highlight></codeline>
<codeline lineno="1381"><highlight class="comment"><sp/>*<sp/>static<sp/>inline<sp/>functions</highlight></codeline>
<codeline lineno="1382"><highlight class="comment"><sp/>********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GROUP_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XMC_VADC_CHECK_GROUP_PTR(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_MAXIMUM_NUM_GROUPS<sp/>==<sp/>4U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((group_ptr<sp/>==<sp/>VADC_G0)<sp/>||<sp/>(group_ptr<sp/>==<sp/>VADC_G1)<sp/>||<sp/>(group_ptr<sp/>==<sp/>VADC_G2)<sp/>||<sp/>(group_ptr<sp/>==<sp/>VADC_G3));</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((group_ptr<sp/>==<sp/>VADC_G0)<sp/>||<sp/>(group_ptr<sp/>==<sp/>VADC_G1));</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="comment">/*********************************************************************************************************************</highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/>*<sp/>API<sp/>Prototypes</highlight></codeline>
<codeline lineno="1396"><highlight class="comment"><sp/>********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga9751f6e7d01d01dcd69f939cc7acfc48" kindref="member">XMC_VADC_GLOBAL_EnableModule</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa02b1286238761c5d6c1a42f552463df" kindref="member">XMC_VADC_GLOBAL_DisableModule</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga3a03902554eb8c9ff9fdfb6f3e76dc2c" kindref="member">XMC_VADC_GLOBAL_Init</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_GLOBAL_CONFIG_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga70fe4b872487d7243db7622c3f9b5359" kindref="member">XMC_VADC_GLOBAL_EnableModuleClock</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_Enable:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>global_ptr-&gt;CLC<sp/>&amp;=<sp/>~((uint32_t)VADC_CLC_DISR_Msk);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaeada77d79207d448a245c39960cdc048" kindref="member">XMC_VADC_GLOBAL_DisableModuleClock</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="1489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_Disable:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>global_ptr-&gt;CLC<sp/>|=<sp/>(uint32_t)<sp/>((uint32_t)1<sp/>&lt;&lt;<sp/><sp/>VADC_CLC_DISR_Pos);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga3693d7ff09be4b5594ca160dafb28064" kindref="member">XMC_VADC_GLOBAL_EnableSleepMode</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_EnableSleepMode:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/>global_ptr-&gt;CLC<sp/>&amp;=<sp/>~((uint32_t)VADC_CLC_EDIS_Msk);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga3fdc0facec70f34cd38d018caca13141" kindref="member">XMC_VADC_GLOBAL_DisableSleepMode</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="1528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_DisableSleepMode:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>global_ptr-&gt;CLC<sp/>|=<sp/>(uint32_t)<sp/>((uint32_t)1<sp/>&lt;&lt;<sp/><sp/>VADC_CLC_EDIS_Pos);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GROUP_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaf5ec0ac1eedfeedd49e8f84e0e1147fa" kindref="member">XMC_VADC_GLOBAL_ClockInit</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_o_c_k__t" kindref="compound">XMC_VADC_GLOBAL_CLOCK_t</ref><sp/>*config)</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_ClockInit:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>the<sp/>Clock<sp/>configuration<sp/>into<sp/>the<sp/>GLOBCFG<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>global_ptr-&gt;GLOBCFG<sp/>=<sp/>(uint32_t)(config-&gt;globcfg<sp/>|<sp/>(VADC_GLOBCFG_DIVWC_Msk));</highlight></codeline>
<codeline lineno="1556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga2e65df86680f0bce4057ea37a495445d" kindref="member">XMC_VADC_GLOBAL_InputClassInit</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___c_l_a_s_s__t" kindref="compound">XMC_VADC_GLOBAL_CLASS_t</ref><sp/>config,</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gadf393a8c811d7ee6601688797e616646" kindref="member">XMC_VADC_GROUP_CONV_t</ref><sp/>conv_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>set_num);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa30f659438385897376765d156118654" kindref="member">XMC_VADC_GLOBAL_ResultInit</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___r_e_s_u_l_t___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_RESULT_CONFIG_t</ref><sp/>*config)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_ResultInit:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>GLOBRCR*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/>global_ptr-&gt;GLOBRCR<sp/>=<sp/>config-&gt;g_rcr;</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga8c267fe37fbdf8654d14f46acf2d3b86" kindref="member">XMC_VADC_GLOBAL_StartupCalibration</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga8413b5d67494882776c5500b765424d6" kindref="member">XMC_VADC_GLOBAL_DisableStartupCalibration</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>global_ptr-&gt;GLOBCFG<sp/>&amp;=<sp/>~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GROUP_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga91a285da9e41bf4ef81bec9eef95be57" kindref="member">XMC_VADC_GLOBAL_DisablePostCalibration</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/>uint32_t<sp/>group_number)</highlight></codeline>
<codeline lineno="1673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_DisablePostCalibration:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/>global_ptr-&gt;GLOBCFG<sp/>|=<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>((uint32_t)VADC_GLOBCFG_DPCAL0_Pos<sp/>+<sp/>group_number));</highlight></codeline>
<codeline lineno="1677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga10affbd1419c11a15022f6cf6cfc1f64" kindref="member">XMC_VADC_GLOBAL_EnablePostCalibration</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/>uint32_t<sp/>group_number)</highlight></codeline>
<codeline lineno="1697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_EnablePostCalibration:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>global_ptr-&gt;GLOBCFG<sp/>&amp;=<sp/>(~<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>((uint32_t)VADC_GLOBCFG_DPCAL0_Pos<sp/>+<sp/>group_number)));</highlight></codeline>
<codeline lineno="1701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_BOUNDARY_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gae55dd1c7a50cabe7d188e56e79319dc6" kindref="member">XMC_VADC_GLOBAL_SetBoundaries</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>boundary0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>boundary1);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaf0cebde428e6c88a8285b68449de8f71" kindref="member">XMC_VADC_GLOBAL_SetIndividualBoundary</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga203ae2271679fb3e05d185a6bd14b8b2" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_t</ref><sp/>selection,</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>boundary_value);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_EMUX_AVAILABLE==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga2b17cb1350c5d568783f96f721348928" kindref="member">XMC_VADC_GLOBAL_BindGroupToEMux</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>emuxif,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>group);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal">__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___v_a_d_c_1ga7ae7ddbf6a4e2bc626ada83bcf72b56a" kindref="member">XMC_VADC_GLOBAL_GetDetailedResult</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_GetDetailedResult:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(global_ptr-&gt;GLOBRES);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal">__STATIC_INLINE<sp/><ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref><sp/><ref refid="group___v_a_d_c_1ga13f09c6935ff21f3c034199fd3bfe825" kindref="member">XMC_VADC_GLOBAL_GetResult</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="1808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_GetResult:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref>)global_ptr-&gt;GLOBRES);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gac239d3389baab5175eca043b6ac606b8" kindref="member">XMC_VADC_GLOBAL_SetCompareValue</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref><sp/>compare_val);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><ref refid="group___v_a_d_c_1ga42e972915a3d2ac3b46847a4d5228c64" kindref="member">XMC_VADC_FAST_COMPARE_t</ref><sp/><ref refid="group___v_a_d_c_1ga2e6a5c936529f8bf35c81f662e5a57c9" kindref="member">XMC_VADC_GLOBAL_GetCompareResult</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa4880cd1755d46ad1b0bd775d4e0ac49" kindref="member">XMC_VADC_GLOBAL_TriggerEvent</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>event_type)</highlight></codeline>
<codeline lineno="1866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_TriggerEvent:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_TriggerEvent:Wrong<sp/>Global<sp/>Event&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="group___v_a_d_c_1ggaa69659f0a647c58e6a0c434759a5f358ac6d9b471959c249288e9eb86eb874fe3" kindref="member">XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE</ref><sp/>==<sp/>event_type)<sp/>||<sp/>(<ref refid="group___v_a_d_c_1ggaa69659f0a647c58e6a0c434759a5f358acd0bc4bf1a88d34dde532f8c597b3de8" kindref="member">XMC_VADC_GLOBAL_EVENT_RESULT</ref><sp/>==<sp/>event_type)))</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/>global_ptr-&gt;GLOBEFLAG<sp/>=<sp/>event_type;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gae6a4d9c2ba0621bef3d077e899754bd9" kindref="member">XMC_VADC_GLOBAL_ClearEvent</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>event_type)</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_ClearEvent:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_ClearEvent:Wrong<sp/>Global<sp/>Event&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((<ref refid="group___v_a_d_c_1ggaa69659f0a647c58e6a0c434759a5f358ac6d9b471959c249288e9eb86eb874fe3" kindref="member">XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE</ref><sp/>==<sp/>event_type)<sp/>||<sp/>(<ref refid="group___v_a_d_c_1ggaa69659f0a647c58e6a0c434759a5f358acd0bc4bf1a88d34dde532f8c597b3de8" kindref="member">XMC_VADC_GLOBAL_EVENT_RESULT</ref><sp/>==<sp/>event_type)))</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/>global_ptr-&gt;GLOBEFLAG<sp/>=<sp/>((uint32_t)(event_type<sp/>&lt;&lt;<sp/>(uint32_t)16));</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa9738610187d2b11716c5faa07e214c7" kindref="member">XMC_VADC_GLOBAL_SetResultEventInterruptNode</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/><ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref><sp/>sr);</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga7f53b56af0d025239dbbcd80af5a5481" kindref="member">XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/><ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref><sp/>sr);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gacbee02fbd290c66b2960df5f6ba18630" kindref="member">XMC_VADC_GLOBAL_SHS_Init</ref>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___g_l_o_b_a_l___s_h_s___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_GLOBAL_SHS_CONFIG_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga3687cc7be37530b4b27d920bf7c817ed" kindref="member">XMC_VADC_GLOBAL_SHS_SetAnalogReference</ref>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga66c363caf91b81a17ffd84aa75dd54d2" kindref="member">XMC_VADC_GLOBAL_SHS_AREF_t</ref><sp/>aref)</highlight></codeline>
<codeline lineno="1962"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_StepperInit:Wrong<sp/>SHS<sp/>Pointer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shs_ptr<sp/>==<sp/>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)SHS0))</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>shs_ptr-&gt;SHSCFG<sp/>=<sp/>(shs_ptr-&gt;SHSCFG<sp/>&amp;<sp/>(uint32_t)~SHS_SHSCFG_AREF_Msk)<sp/>|<sp/>(uint32_t)aref<sp/>|<sp/>SHS_SHSCFG_SCWC_Msk;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_FULL_SET_REG<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_SetStepperSequence(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t<sp/>*config)</highlight></codeline>
<codeline lineno="1986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_StepperInit:Wrong<sp/>SHS<sp/>Pointer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shs_ptr<sp/>==<sp/>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)SHS0))</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_StepperInit:Wrong<sp/>config<sp/>pointer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(config<sp/>==<sp/>(XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t<sp/>*)NULL))</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/>shs_ptr-&gt;STEPCFG<sp/>=<sp/>(uint32_t)<sp/>config-&gt;stepcfg;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa416263f08801fb2b42aca3ea979d77a" kindref="member">XMC_VADC_GLOBAL_SHS_IsConverterReady</ref>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr)</highlight></codeline>
<codeline lineno="2010"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong<sp/>SHS<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(shs_ptr<sp/>==<sp/>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)SHS0))</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)((shs_ptr-&gt;SHSCFG<sp/>&gt;&gt;<sp/>(uint32_t)SHS_SHSCFG_ANRDY_Pos)<sp/>&amp;<sp/>(uint32_t)0x1));</highlight></codeline>
<codeline lineno="2014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_FULL_SET_REG<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,<sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref><sp/>group_num);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,<sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref><sp/>group_num);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_SetShortSampleTime(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref><sp/>group_num,</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>sst_value);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gac97ed253a1995c6a76a03653d267e130" kindref="member">XMC_VADC_GLOBAL_SHS_SetClockDivider</ref>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,<sp/>uint8_t<sp/>divs_value)</highlight></codeline>
<codeline lineno="2087"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong<sp/>SHS<sp/>Pointer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shs_ptr<sp/>==<sp/>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)SHS0))</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong<sp/>divide<sp/>factor<sp/>selected&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(divs_value<sp/>&lt;<sp/>(uint32_t)0x10))</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/>shs_ptr-&gt;SHSCFG<sp/>=<sp/><sp/>(shs_ptr-&gt;SHSCFG<sp/>&amp;<sp/>(~(uint32_t)SHS_SHSCFG_DIVS_Msk))<sp/>|<sp/>(uint32_t)SHS_SHSCFG_SCWC_Msk;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/>shs_ptr-&gt;SHSCFG<sp/>|=<sp/><sp/>((uint32_t)divs_value<sp/>&lt;&lt;<sp/>SHS_SHSCFG_DIVS_Pos)<sp/>|<sp/>(uint32_t)SHS_SHSCFG_SCWC_Msk;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga877757ed311cfa96c56fd5f18448fac1" kindref="member">XMC_VADC_GLOBAL_SHS_SetGainFactor</ref>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>gain_value,</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref><sp/>group_num,</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ch_num);</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight><highlight class="preprocessor">#if(XMC_VADC_SHS_FULL_SET_REG<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_SetMaxCalTime(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>max_calibration_time)</highlight></codeline>
<codeline lineno="2135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong<sp/>SHS<sp/>Pointer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shs_ptr<sp/>==<sp/>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)SHS0))</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/>shs_ptr-&gt;CALCTR<sp/>&amp;=<sp/>~((uint32_t)SHS_CALCTR_CALMAX_Msk);</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/>shs_ptr-&gt;CALCTR<sp/>|=<sp/><sp/>((uint32_t)max_calibration_time<sp/>&lt;&lt;<sp/>SHS_CALCTR_CALMAX_Pos);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref><sp/>group_num);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref><sp/>group_num);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal">uint8_t<sp/>XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref><sp/>group_num,</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>XMC_VADC_SHS_GAIN_LEVEL_t<sp/>gain_level);</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref><sp/>group_num,</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/>XMC_VADC_SHS_GAIN_LEVEL_t<sp/>gain_level,</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>offset_calibration_value);</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gace104f134291b019923842a26872d805" kindref="member">XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop</ref>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga2a37056c647c7622f8102dae982336eb" kindref="member">XMC_VADC_GROUP_INDEX_t</ref><sp/>group_num,</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1gae43c31aa12cebdad8a95072453ce71b8" kindref="member">XMC_VADC_SHS_LOOP_CH_t</ref><sp/>loop_select,</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ch_num);</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga9d9cbddc95a0d8ed1d8e3b9520bcc0bd" kindref="member">XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop</ref>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1gae43c31aa12cebdad8a95072453ce71b8" kindref="member">XMC_VADC_SHS_LOOP_CH_t</ref><sp/>loop_select)</highlight></codeline>
<codeline lineno="2248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong<sp/>SHS<sp/>Pointer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shs_ptr<sp/>==<sp/>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)SHS0))</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong<sp/>Delta<sp/>sigma<sp/>loop<sp/>selected&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(loop_select<sp/>==<sp/><ref refid="group___v_a_d_c_1ggae43c31aa12cebdad8a95072453ce71b8a7ab1638f0adc462c223be819b45964ed" kindref="member">XMC_VADC_SHS_LOOP_CH_0</ref>)<sp/>||<sp/>(loop_select<sp/>==<sp/><ref refid="group___v_a_d_c_1ggae43c31aa12cebdad8a95072453ce71b8a66588df417260b06419f2dd4498dbf4f" kindref="member">XMC_VADC_SHS_LOOP_CH_1</ref>))</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/>shs_ptr-&gt;LOOP<sp/>|=<sp/>(uint32_t)SHS_LOOP_LPEN0_Msk<sp/>&lt;&lt;<sp/>(uint32_t)loop_select;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga5a6f38a564aefe7665c4df7c609aa1e0" kindref="member">XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop</ref>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>shs_ptr,</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1gae43c31aa12cebdad8a95072453ce71b8" kindref="member">XMC_VADC_SHS_LOOP_CH_t</ref><sp/>loop_select)</highlight></codeline>
<codeline lineno="2272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong<sp/>SHS<sp/>Pointer&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(shs_ptr<sp/>==<sp/>(<ref refid="group___v_a_d_c_1ga11a8b12d7d98d3a9b81c95f9d5c671c4" kindref="member">XMC_VADC_GLOBAL_SHS_t</ref><sp/>*)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)SHS0))</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong<sp/>Delta<sp/>sigma<sp/>loop<sp/>selected&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(loop_select<sp/>==<sp/><ref refid="group___v_a_d_c_1ggae43c31aa12cebdad8a95072453ce71b8a7ab1638f0adc462c223be819b45964ed" kindref="member">XMC_VADC_SHS_LOOP_CH_0</ref>)<sp/>||<sp/>(loop_select<sp/>==<sp/><ref refid="group___v_a_d_c_1ggae43c31aa12cebdad8a95072453ce71b8a66588df417260b06419f2dd4498dbf4f" kindref="member">XMC_VADC_SHS_LOOP_CH_1</ref>))</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/>shs_ptr-&gt;LOOP<sp/>&amp;=<sp/>~((uint32_t)SHS_LOOP_LPEN0_Msk<sp/>&lt;&lt;<sp/>(uint32_t)loop_select);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GROUP_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gac147b4cbfd00c81b136425fc8e70215d" kindref="member">XMC_VADC_GROUP_Init</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_GROUP_CONFIG_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa7a2bbb2f627f186c23ae8b93ebf34fc" kindref="member">XMC_VADC_GROUP_InputClassInit</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" kindref="compound">XMC_VADC_GROUP_CLASS_t</ref><sp/>config,</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gadf393a8c811d7ee6601688797e616646" kindref="member">XMC_VADC_GROUP_CONV_t</ref><sp/>conv_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>set_num);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gac1469b90543473edcd8bfd1253166cc2" kindref="member">XMC_VADC_GROUP_SetSyncSlave</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/>uint32_t<sp/>master_grp,<sp/>uint32_t<sp/>slave_group);</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gae435b6b66cac1abc05d17fd17d5caca6" kindref="member">XMC_VADC_GROUP_SetPowerMode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga7226349aef79a52f614eb5e75e3f55d9" kindref="member">XMC_VADC_GROUP_POWERMODE_t</ref><sp/>power_mode);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal">__STATIC_INLINE<sp/>int32_t<sp/><ref refid="group___v_a_d_c_1ga1b9afae465264f66c1fc05840ce2003a" kindref="member">XMC_VADC_GROUP_GetPowerMode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="2383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((group_ptr-&gt;ARBCFG<sp/>&amp;<sp/>(uint32_t)VADC_G_ARBCFG_ANONS_Msk)<sp/>&gt;&gt;<sp/>VADC_G_ARBCFG_ANONS_Pos);</highlight></codeline>
<codeline lineno="2385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gae1406cd26c69119e3a181b38f9d1fd26" kindref="member">XMC_VADC_GROUP_SetSyncMaster</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga22b85c7c9fc777c05d74f1ae2a7cc9ac" kindref="member">XMC_VADC_GROUP_CheckSlaveReadiness</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/>uint32_t<sp/>slave_group);</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga8e04b2a4deb50a629b3e80bcfeafa14d" kindref="member">XMC_VADC_GROUP_IgnoreSlaveReadiness</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/>uint32_t<sp/>slave_group);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gafbcf0f992b933cd687968d433abddd4a" kindref="member">XMC_VADC_GROUP_SetSyncSlaveReadySignal</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>eval_waiting_group,</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>eval_origin_group);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal">__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___v_a_d_c_1gaf32f0439218c42086d7863d9d8307a54" kindref="member">XMC_VADC_GROUP_GetSyncReadySignal</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="2480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/>uint32_t<sp/>eval_mask;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetSyncReadySignal:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_MAXIMUM_NUM_GROUPS<sp/>&gt;<sp/>2U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/>eval_mask<sp/>=<sp/>VADC_G_SYNCTR_EVALR1_Msk<sp/>|<sp/>VADC_G_SYNCTR_EVALR2_Msk<sp/>|<sp/>VADC_G_SYNCTR_EVALR3_Msk;</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/>eval_mask<sp/>=<sp/>VADC_G_SYNCTR_EVALR1_Msk;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>group_ptr-&gt;SYNCTR<sp/>&amp;<sp/>eval_mask);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gafcb0c959798ebac91498ac34296dec2e" kindref="member">XMC_VADC_GROUP_SetSyncReadySignal</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="2507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/>uint32_t<sp/>eval_mask;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_SetSyncReadySignal:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_MAXIMUM_NUM_GROUPS<sp/>&gt;<sp/>2U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/>eval_mask<sp/>=<sp/>VADC_G_SYNCTR_EVALR1_Msk<sp/>|<sp/>VADC_G_SYNCTR_EVALR2_Msk<sp/>|<sp/>VADC_G_SYNCTR_EVALR3_Msk;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/>eval_mask<sp/>=<sp/>VADC_G_SYNCTR_EVALR1_Msk;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/>group_ptr-&gt;SYNCTR<sp/>&amp;=<sp/>~(eval_mask);</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>group_ptr-&gt;SYNCTR<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gadb698bad87dcbc3fdf6ce8d6df1ecbb4" kindref="member">XMC_VADC_GROUP_EnableChannelSyncRequest</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga2b5c2e50ccf150e33028b51577c57749" kindref="member">XMC_VADC_GROUP_DisableChannelSyncRequest</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><ref refid="group___v_a_d_c_1ga4effb949346537c7a515c4f2ff542df5" kindref="member">XMC_VADC_GROUP_STATE_t</ref><sp/><ref refid="group___v_a_d_c_1ga8e70ce6dfa38cee7c48004720aac8aeb" kindref="member">XMC_VADC_GROUP_IsConverterBusy</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr);</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga5f2cda270ffbbc2dcf6879d66ddb94b8" kindref="member">XMC_VADC_GROUP_SetBoundaries</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>boundary0,</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>boundary1);</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga4e210b7836e3419b3aab27f3ee3d1bbc" kindref="member">XMC_VADC_GROUP_SetIndividualBoundary</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga203ae2271679fb3e05d185a6bd14b8b2" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_t</ref><sp/>selection,</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>boundary_value);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga1723512610fb75b8092cab99d15997ca" kindref="member">XMC_VADC_GROUP_TriggerServiceRequest</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>sr_num,</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga14a1cbb73bf2a92a3321aea14488f354" kindref="member">XMC_VADC_GROUP_IRQ_t</ref><sp/>type);</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga71ab6e09e78d8cca7fda70210d5d9d0b" kindref="member">XMC_VADC_GROUP_ExternalMuxControlInit</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t" kindref="compound">XMC_VADC_GROUP_EMUXCFG_t</ref><sp/>emux_cfg)</highlight></codeline>
<codeline lineno="2649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/>uint32_t<sp/><sp/><sp/>emux_config;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ExternalMuxControlInit:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/>emux_config<sp/>=<sp/>((uint32_t)emux_cfg.<ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t_1a4c9fe9883ca928cf65e2a37d1bc6842f" kindref="member">starting_external_channel</ref><sp/>&lt;&lt;<sp/>(uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)emux_cfg.<ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t_1a9d472636e8e590483d2183563101a190" kindref="member">connected_channel</ref><sp/>&lt;&lt;<sp/>(uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/>group_ptr-&gt;EMUXCTR<sp/><sp/>=<sp/>emux_config;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/>emux_config<sp/>=<sp/>((uint32_t)emux_cfg.<ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t_1a0c0bcdd01551639ead516db9d74298f3" kindref="member">emux_coding</ref><sp/>&lt;&lt;<sp/>(uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)<sp/><sp/>|</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)emux_cfg.<ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t_1a67b079297a01fecd839fd79219a41185" kindref="member">emux_mode</ref><sp/><sp/>&lt;&lt;<sp/>(uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)<sp/>|</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)emux_cfg.<ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___e_m_u_x_c_f_g__t_1a68fe1c943f2f317e8052ac3110cf8ad2" kindref="member">stce_usage</ref><sp/>&lt;&lt;<sp/>(uint32_t)VADC_G_EMUXCTR_EMXST_Pos);</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_EMUX_CH_SEL_STYLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/>emux_config<sp/>|=<sp/>((uint32_t)emux_cfg.emux_channel_select_style<sp/>&lt;&lt;<sp/>(uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/>group_ptr-&gt;EMUXCTR<sp/><sp/>|=<sp/>(emux_config<sp/>|<sp/>((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk))<sp/>;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"></highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>XMC_VADC_BOUNDARY_FLAG_SELECT<sp/>==<sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gad05d956c1ed2061bd737ae62d8a7d29b" kindref="member">XMC_VADC_GROUP_SetBoundaryEventInterruptNode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>boundary_flag_num,</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaebb436d84700b3f1a711a834119646b8" kindref="member">XMC_VADC_BOUNDARY_NODE_t</ref><sp/>node);</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal">__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___v_a_d_c_1gabb513e8317c33685db6e82c76c81d4ff" kindref="member">XMC_VADC_GROUP_GetAlias</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="2704"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetAliasWrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(group_ptr-&gt;ALIAS);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal">__STATIC_INLINE<sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" kindref="compound">XMC_VADC_GROUP_CLASS_t</ref><sp/><ref refid="group___v_a_d_c_1gaee20e2687198c9446da88b963d4a4c4f" kindref="member">XMC_VADC_GROUP_GetInputClass</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" kindref="member">XMC_VADC_CHANNEL_CONV_t</ref><sp/>conv_class)</highlight></codeline>
<codeline lineno="2725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><ref refid="struct_x_m_c___v_a_d_c___g_r_o_u_p___c_l_a_s_s__t" kindref="compound">XMC_VADC_GROUP_CLASS_t</ref><sp/>input_value;</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetInputClass:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetInputClass:Wrong<sp/>conv_class<sp/>selected&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03a01d1d18f4ea33aae01eb486660393989" kindref="member">XMC_VADC_CHANNEL_CONV_GROUP_CLASS0</ref><sp/>==<sp/>conv_class)<sp/>||<sp/>(<ref refid="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03aa39fbfa369d7a906592f7849e58298a2" kindref="member">XMC_VADC_CHANNEL_CONV_GROUP_CLASS1</ref><sp/>==<sp/>conv_class))</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/>input_value.g_iclass0<sp/>=<sp/>(uint32_t)<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03a01d1d18f4ea33aae01eb486660393989" kindref="member">XMC_VADC_CHANNEL_CONV_GROUP_CLASS0</ref><sp/>==<sp/>conv_class)<sp/>||<sp/>(<ref refid="group___v_a_d_c_1gga0da7a93877a25398b4e70482b85acd03aa39fbfa369d7a906592f7849e58298a2" kindref="member">XMC_VADC_CHANNEL_CONV_GROUP_CLASS1</ref><sp/>==<sp/>conv_class))</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>input_value.g_iclass0<sp/>=<sp/>group_ptr-&gt;ICLASS[(uint32_t)conv_class];</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(input_value);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GSCAN_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2742"><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga0baf952034feb3eaa81736e9761cf48f" kindref="member">XMC_VADC_GROUP_ScanInit</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___s_c_a_n___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_SCAN_CONFIG_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga916530591113892be436af6238ead6ea" kindref="member">XMC_VADC_GROUP_ScanEnableArbitrationSlot</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="2778"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ARBPR<sp/>|=<sp/>(uint32_t)VADC_G_ARBPR_ASEN1_Msk;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga4d1f77cf454d509dfaff575717a8693f" kindref="member">XMC_VADC_GROUP_ScanDisableArbitrationSlot</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="2799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ARBPR<sp/>&amp;=<sp/>~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);</highlight></codeline>
<codeline lineno="2802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa0cc3b32dac68d975d7ab1b0ecfb81f0" kindref="member">XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="2820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((group_ptr-&gt;ARBPR<sp/>&amp;<sp/>(uint32_t)VADC_G_ARBPR_ASEN1_Msk)<sp/>&gt;&gt;<sp/>VADC_G_ARBPR_ASEN1_Pos);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga4d29e840f790e5c763c1f00bbcf1e131" kindref="member">XMC_VADC_GROUP_ScanSelectTrigger</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/><ref refid="group___v_a_d_c_1gab71bdae1d928ee308430626a761eab97" kindref="member">XMC_VADC_TRIGGER_INPUT_SELECT_t</ref><sp/>trigger_input);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gac4a2232fd93259e95bd4cbb45949edfc" kindref="member">XMC_VADC_GROUP_ScanSelectTriggerEdge</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaabd0d22cd15f13e6e49809a3b811b241" kindref="member">XMC_VADC_TRIGGER_EDGE_t</ref><sp/>trigger_edge);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gab637f1591586c7dfb8593fb394104887" kindref="member">XMC_VADC_GROUP_ScanSelectGating</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/><ref refid="group___v_a_d_c_1gaa16f1136a4a4efddcd67ebd5fc69bc9f" kindref="member">XMC_VADC_GATE_INPUT_SELECT_t</ref><sp/>gating_input);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga5db8e4e617a0df8234d948ed26d7d9a3" kindref="member">XMC_VADC_GROUP_ScanSetGatingMode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/><ref refid="group___v_a_d_c_1ga4db02e3b835b8cad941ab60ae288f8c8" kindref="member">XMC_VADC_GATEMODE_t</ref><sp/>mode_sel)</highlight></codeline>
<codeline lineno="2898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanSetGatingMode:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanSetGatingMode:Wrong<sp/>mode<sp/>selected&quot;</highlight><highlight class="normal">,<sp/>(mode_sel<sp/>&lt;=<sp/><ref refid="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8a6c503bea41d82b4d2b00bbbdc1d39ac6" kindref="member">XMC_VADC_GATEMODE_ACTIVELOW</ref>))</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>existing<sp/>gate<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASMR<sp/>&amp;=<sp/>(uint32_t)<sp/>(~((uint32_t)VADC_G_ASMR_ENGT_Msk));</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>new<sp/>gating<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASMR<sp/>|=<sp/>(uint32_t)((uint32_t)mode_sel<sp/>&lt;&lt;<sp/>VADC_G_ASMR_ENGT_Pos);</highlight></codeline>
<codeline lineno="2906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga4fa59213861735578dff28c02d961120" kindref="member">XMC_VADC_GROUP_ScanEnableContinuousMode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="2926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASMR<sp/>|=<sp/>(uint32_t)VADC_G_ASMR_SCAN_Msk;</highlight></codeline>
<codeline lineno="2929"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga1aa7cb076e7e2b56f330d0bb14645494" kindref="member">XMC_VADC_GROUP_ScanDisableContinuousMode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="2949"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASMR<sp/>&amp;=<sp/>~((uint32_t)VADC_G_ASMR_SCAN_Msk);</highlight></codeline>
<codeline lineno="2952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight></codeline>
<codeline lineno="2968"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga013308f793d25106e935c6f1bdbd95a9" kindref="member">XMC_VADC_GROUP_ScanTriggerConversion</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="2969"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanTriggerConversion:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASMR<sp/>|=<sp/>(uint32_t)VADC_G_ASMR_LDEV_Msk;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga4963004f5c5f5bfd255b51d79d62e143" kindref="member">XMC_VADC_GROUP_ScanSequenceAbort</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gab72f743031df5ebe062fe8a28275888b" kindref="member">XMC_VADC_GROUP_ScanAddChannelToSequence</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num)</highlight></codeline>
<codeline lineno="3008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;VADC_GSCAN_AddSingleChannel:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong<sp/>Channel<sp/>Number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ch_num)<sp/>&lt;<sp/><ref refid="group___v_a_d_c_1ga5493b6e76383802d08a3a1b8198e566e" kindref="member">XMC_VADC_NUM_CHANNELS_PER_GROUP</ref>))</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASSEL<sp/>|=<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>ch_num);</highlight></codeline>
<codeline lineno="3013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga51f598fc7306207185177af62858ac65" kindref="member">XMC_VADC_GROUP_ScanAddMultipleChannels</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_mask)</highlight></codeline>
<codeline lineno="3035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASSEL<sp/>=<sp/>ch_mask;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga4ea5f62893afbb468820cb612f09e3d1" kindref="member">XMC_VADC_GROUP_ScanIsChannelPending</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num)</highlight></codeline>
<codeline lineno="3058"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanIsChannelPending:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanIsChannelPending:Wrong<sp/>Channel<sp/>Number&quot;</highlight><highlight class="normal">,<sp/>((ch_num)<sp/>&lt;<sp/><ref refid="group___v_a_d_c_1ga5493b6e76383802d08a3a1b8198e566e" kindref="member">XMC_VADC_NUM_CHANNELS_PER_GROUP</ref>))</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)((uint32_t)(group_ptr-&gt;ASPND<sp/>&gt;&gt;<sp/>ch_num)<sp/>&amp;<sp/>1U));</highlight></codeline>
<codeline lineno="3064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal">uint32_t<sp/><ref refid="group___v_a_d_c_1ga723bda6902bb2b8b0641a0e60b1da61a" kindref="member">XMC_VADC_GROUP_ScanGetNumChannelsPending</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr);</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gacf7d930e6e633e535725c13eaf444afc" kindref="member">XMC_VADC_GROUP_ScanTriggerReqSrcEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/>group_ptr-&gt;SEFLAG<sp/><sp/><sp/><sp/>|=<sp/>(uint32_t)VADC_G_SEFLAG_SEV1_Msk;</highlight></codeline>
<codeline lineno="3102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga02dca0332550c23db82bbdd3750d5670" kindref="member">XMC_VADC_GROUP_ScanClearReqSrcEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/>group_ptr-&gt;SEFCLR<sp/>|=<sp/>(uint32_t)VADC_G_SEFCLR_SEV1_Msk;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gad08132ae30e2e73e5f71d2fb5b3b1c7a" kindref="member">XMC_VADC_GROUP_ScanGetReqSrcEventStatus</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GSCAN_GetRSEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(group_ptr-&gt;SEFLAG<sp/>&amp;<sp/>(uint32_t)VADC_G_SEFLAG_SEV1_Msk));</highlight></codeline>
<codeline lineno="3141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga3c309bf576995893d65adc4cd362a321" kindref="member">XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref><sp/>sr);</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa08eef43607d1b9a39aaab3fae84e7f3" kindref="member">XMC_VADC_GROUP_ScanEnableExternalTrigger</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASMR<sp/>|=<sp/>(uint32_t)VADC_G_ASMR_ENTR_Msk;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga7a558bd413ed6540b84d350728d57eec" kindref="member">XMC_VADC_GROUP_ScanDisableExternalTrigger</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASMR<sp/>&amp;=<sp/>~((uint32_t)VADC_G_ASMR_ENTR_Msk);</highlight></codeline>
<codeline lineno="3201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga96c47634e7fcc9e50f4212e31a533dd8" kindref="member">XMC_VADC_GROUP_ScanRemoveChannel</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>channel_num);</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga65fcf00d15dcacbe46cbc9bcd06bdf8d" kindref="member">XMC_VADC_GROUP_ScanEnableEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanEnableEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASMR<sp/>|=<sp/>((uint32_t)VADC_G_ASMR_ENSI_Msk);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa3fdc34d89a6fb9e3875cb30f68488c0" kindref="member">XMC_VADC_GROUP_ScanDisableEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ScanDisableEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ASMR<sp/>&amp;=<sp/>~((uint32_t)VADC_G_ASMR_ENSI_Msk);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga2a669e00443f963546fdbe05a1eb0084" kindref="member">XMC_VADC_GLOBAL_BackgroundInit</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___s_c_a_n___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_BACKGROUND_CONFIG_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GROUP_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga63f7baff861c509eeb73f7794eff890a" kindref="member">XMC_VADC_GROUP_BackgroundEnableArbitrationSlot</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/><sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ARBPR<sp/>|=<sp/>(uint32_t)VADC_G_ARBPR_ASEN2_Msk;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga3058d26882687fd994756615eb7b5b3d" kindref="member">XMC_VADC_GROUP_BackgroundDisableArbitrationSlot</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/><sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ARBPR<sp/>&amp;=<sp/>~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga1dc24406fa9e95d845a8095728dcbce4" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectTrigger</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>input_num);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaea3cd4f61981bbc16074a4301b2c1fd3" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaabd0d22cd15f13e6e49809a3b811b241" kindref="member">XMC_VADC_TRIGGER_EDGE_t</ref><sp/>trigger_edge);</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gacba7a4847be06bb2e71493eabf9bbb69" kindref="member">XMC_VADC_GLOBAL_BackgroundSelectGating</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>input_num);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga8c8708cf159e5c190926e0873f4055ca" kindref="member">XMC_VADC_GLOBAL_BackgroundSetGatingMode</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga4db02e3b835b8cad941ab60ae288f8c8" kindref="member">XMC_VADC_GATEMODE_t</ref><sp/>mode_sel)</highlight></codeline>
<codeline lineno="3403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong<sp/>mode<sp/>selected&quot;</highlight><highlight class="normal">,<sp/>(mode_sel<sp/>&lt;=<sp/><ref refid="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8a6c503bea41d82b4d2b00bbbdc1d39ac6" kindref="member">XMC_VADC_GATEMODE_ACTIVELOW</ref>))</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"></highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>existing<sp/>gate<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSMR<sp/>&amp;=<sp/>(uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>the<sp/>new<sp/>gating<sp/>mode*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSMR<sp/>|=<sp/>(uint32_t)((uint32_t)mode_sel<sp/>&lt;&lt;<sp/>VADC_BRSMR_ENGT_Pos);</highlight></codeline>
<codeline lineno="3411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga3242cf2af1c5d920154c06ecf1aaff72" kindref="member">XMC_VADC_GLOBAL_BackgroundEnableContinuousMode</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSMR<sp/>|=<sp/>(uint32_t)VADC_BRSMR_SCAN_Msk;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaf73c916feb89e889cf848fdbe6dd20e0" kindref="member">XMC_VADC_GLOBAL_BackgroundDisableContinuousMode</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSMR<sp/>&amp;=<sp/>~((uint32_t)VADC_BRSMR_SCAN_Msk);</highlight></codeline>
<codeline lineno="3458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga599af86b8424e4e378f20dc1952b4cba" kindref="member">XMC_VADC_GLOBAL_BackgroundTriggerConversion</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3475"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSMR<sp/>|=<sp/>(uint32_t)VADC_BRSMR_LDEV_Msk;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga04933ff6939f277ded8a4c19c3ef8d38" kindref="member">XMC_VADC_GLOBAL_BackgroundAbortSequence</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr);</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga67c4d922e3b0a4abbaefde613a2a3c00" kindref="member">XMC_VADC_GLOBAL_BackgroundAddChannelToSequence</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>grp_num,</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num)</highlight></codeline>
<codeline lineno="3519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong<sp/>Group<sp/>Number&quot;</highlight><highlight class="normal">,<sp/>((grp_num)<sp/>&lt;<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS))</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong<sp/>Channel<sp/>Number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ch_num)<sp/>&lt;<sp/><ref refid="group___v_a_d_c_1ga5493b6e76383802d08a3a1b8198e566e" kindref="member">XMC_VADC_NUM_CHANNELS_PER_GROUP</ref>))</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSSEL[grp_num]<sp/>|=<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>ch_num);</highlight></codeline>
<codeline lineno="3526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gadf9c9021b0e1d538b9d6e6571a4dc2cd" kindref="member">XMC_VADC_GLOBAL_BackgndAddMultipleChannels</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>grp_num,</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_mask)</highlight></codeline>
<codeline lineno="3551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong<sp/>Group<sp/>Number&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>((grp_num)<sp/>&lt;<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS))</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSSEL[grp_num]<sp/>|=<sp/>ch_mask;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa2480a6ce2dcd7dd7478dc35a5b20774" kindref="member">XMC_VADC_GLOBAL_BackgroundRemoveChannelFromSequence</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>grp_num,</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num)</highlight></codeline>
<codeline lineno="3578"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong<sp/>Group<sp/>Number&quot;</highlight><highlight class="normal">,<sp/>((grp_num)<sp/>&lt;<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS))</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong<sp/>Channel<sp/>Number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ch_num)<sp/>&lt;<sp/><ref refid="group___v_a_d_c_1ga5493b6e76383802d08a3a1b8198e566e" kindref="member">XMC_VADC_NUM_CHANNELS_PER_GROUP</ref>))</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSSEL[grp_num]<sp/>&amp;=<sp/>(uint32_t)~((uint32_t)1<sp/>&lt;&lt;<sp/>ch_num);</highlight></codeline>
<codeline lineno="3585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga1fb2f851984db31b10d5ae16be7fe05f" kindref="member">XMC_VADC_GLOBAL_BackgndRemoveMultipleChannels</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>grp_num,</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_mask)</highlight></codeline>
<codeline lineno="3610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong<sp/>Group<sp/>Number&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>((grp_num)<sp/>&lt;<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS))</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSSEL[grp_num]<sp/>&amp;=<sp/>(uint32_t)~ch_mask;</highlight></codeline>
<codeline lineno="3614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gad6e756229d4b42d79c942f594895e880" kindref="member">XMC_VADC_GLOBAL_BackgroundIsChannelPending</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr,</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>grp_num,</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num)</highlight></codeline>
<codeline lineno="3637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong<sp/>Group<sp/>Number&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>((grp_num)<sp/>&lt;<sp/>XMC_VADC_MAXIMUM_NUM_GROUPS))</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong<sp/>Channel<sp/>Number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ch_num)<sp/>&lt;<sp/><ref refid="group___v_a_d_c_1ga5493b6e76383802d08a3a1b8198e566e" kindref="member">XMC_VADC_NUM_CHANNELS_PER_GROUP</ref>))</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(global_ptr-&gt;BRSPND[grp_num]<sp/>&amp;<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>ch_num)));</highlight></codeline>
<codeline lineno="3644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal">uint32_t<sp/><ref refid="group___v_a_d_c_1ga424f2cfadf7566780a290be6b34a63cd" kindref="member">XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga0fdfbc995a8b763c210c044d2d979814" kindref="member">XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/>global_ptr-&gt;GLOBEFLAG<sp/>|=<sp/>(uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga075844a45e021e56d4ee6e17a60dba02" kindref="member">XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/>global_ptr-&gt;GLOBEFLAG<sp/>|=<sp/>(uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;</highlight></codeline>
<codeline lineno="3701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga2c6d9214be3444f9e6fc7944523c6b09" kindref="member">XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(global_ptr-&gt;GLOBEFLAG<sp/>&amp;<sp/>(uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));</highlight></codeline>
<codeline lineno="3722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gad94ac8b683df176e39944d0d2aff7501" kindref="member">XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSMR<sp/>|=<sp/>(uint32_t)VADC_BRSMR_ENTR_Msk;</highlight></codeline>
<codeline lineno="3743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa2a92785dd1bfeda948728c15c7205f7" kindref="member">XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSMR<sp/>&amp;=<sp/>~((uint32_t)VADC_BRSMR_ENTR_Msk);</highlight></codeline>
<codeline lineno="3765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaec3793022a41345bdff9e87e264ac8c0" kindref="member">XMC_VADC_GLOBAL_BackgroundEnableEvent</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundEnableEvent:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSMR<sp/>|=<sp/>((uint32_t)VADC_BRSMR_ENSI_Msk);</highlight></codeline>
<codeline lineno="3786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa31e5b59f99a6f6a8098425816a5daee" kindref="member">XMC_VADC_GLOBAL_BackgroundDisableEvent</ref>(<ref refid="group___v_a_d_c_1ga8cc559b855e4da85ee2f48bcd98405cb" kindref="member">XMC_VADC_GLOBAL_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>global_ptr)</highlight></codeline>
<codeline lineno="3803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GLOBAL_BackgroundDisableEvent:Wrong<sp/>Module<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>(global_ptr<sp/>==<sp/>VADC))</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/>global_ptr-&gt;BRSMR<sp/>&amp;=<sp/>~((uint32_t)VADC_BRSMR_ENSI_Msk);</highlight></codeline>
<codeline lineno="3807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_QUEUE_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga881c16d2f992825869d02005d91ddc09" kindref="member">XMC_VADC_GROUP_QueueInit</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_QUEUE_CONFIG_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaf3c728f97550bccd474f79befc017365" kindref="member">XMC_VADC_GROUP_QueueEnableArbitrationSlot</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3848"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr));</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ARBPR<sp/>|=<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>VADC_G_ARBPR_ASEN0_Pos);</highlight></codeline>
<codeline lineno="3851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa8d19efeb6b04913e91406eaccff72ed" kindref="member">XMC_VADC_GROUP_QueueDisableArbitrationSlot</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr));</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ARBPR<sp/>&amp;=<sp/>~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);</highlight></codeline>
<codeline lineno="3872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight></codeline>
<codeline lineno="3890"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga1f715d0acda4b3b07a33bb7b907ddae5" kindref="member">XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="3891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((group_ptr-&gt;ARBPR<sp/>&amp;<sp/>(uint32_t)VADC_G_ARBPR_ASEN0_Msk)<sp/>&gt;&gt;<sp/>VADC_G_ARBPR_ASEN0_Pos);</highlight></codeline>
<codeline lineno="3895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga921d0b59c5a88d92bdc7017d7be2765f" kindref="member">XMC_VADC_GROUP_QueueSelectTrigger</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gab71bdae1d928ee308430626a761eab97" kindref="member">XMC_VADC_TRIGGER_INPUT_SELECT_t</ref><sp/>input_num);</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gac969fb0698f7ecf7a1a177ee4bcd4654" kindref="member">XMC_VADC_GROUP_QueueSelectTriggerEdge</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaabd0d22cd15f13e6e49809a3b811b241" kindref="member">XMC_VADC_TRIGGER_EDGE_t</ref><sp/>trigger_edge);</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga1962d86a697f244d19a4127580efd099" kindref="member">XMC_VADC_GROUP_QueueSelectGating</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa16f1136a4a4efddcd67ebd5fc69bc9f" kindref="member">XMC_VADC_GATE_INPUT_SELECT_t</ref><sp/>input_num);</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaaf9874010e5073415ab846b4ef46955e" kindref="member">XMC_VADC_GROUP_QueueSetGatingMode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/><ref refid="group___v_a_d_c_1ga4db02e3b835b8cad941ab60ae288f8c8" kindref="member">XMC_VADC_GATEMODE_t</ref><sp/>mode_sel)</highlight></codeline>
<codeline lineno="3971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueSetGatingMode:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueSetGatingMode:Wrong<sp/>mode<sp/>selected&quot;</highlight><highlight class="normal">,<sp/>(mode_sel<sp/>&lt;=<sp/><ref refid="group___v_a_d_c_1gga4db02e3b835b8cad941ab60ae288f8c8a6c503bea41d82b4d2b00bbbdc1d39ac6" kindref="member">XMC_VADC_GATEMODE_ACTIVELOW</ref>))</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>existing<sp/>gate<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/>group_ptr-&gt;QMR0<sp/>&amp;=<sp/>(uint32_t)(~((uint32_t)<sp/>VADC_G_QMR0_ENGT_Msk));</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>new<sp/>gating<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/>group_ptr-&gt;QMR0<sp/>|=<sp/>(uint32_t)((uint32_t)mode_sel<sp/>&lt;&lt;<sp/>VADC_G_QMR0_ENGT_Pos);</highlight></codeline>
<codeline lineno="3979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"></highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gabf7bf44150a8541ab60d12889f367053" kindref="member">XMC_VADC_GROUP_QueueTriggerConversion</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="4006"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueTriggerConversion:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/>group_ptr-&gt;QMR0<sp/>|=<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>VADC_G_QMR0_TREV_Pos);</highlight></codeline>
<codeline lineno="4009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal">uint32_t<sp/><ref refid="group___v_a_d_c_1gab733f165ccdd37704dc50f5ec5801134" kindref="member">XMC_VADC_GROUP_QueueGetLength</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr);</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga9bfd983c7c4dc403ed40eabe3920c9db" kindref="member">XMC_VADC_GROUP_QueueAbortSequence</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr);</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gac49297c2076517f3b435504f871ba59d" kindref="member">XMC_VADC_GROUP_QueueFlushEntries</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="4063"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initiate<sp/>flushing<sp/>of<sp/>the<sp/>queue<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/>group_ptr-&gt;QMR0<sp/>|=<sp/>(uint32_t)VADC_G_QMR0_FLUSH_Msk;</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>!((group_ptr-&gt;QSR0)<sp/>&amp;<sp/>(uint32_t)VADC_G_QSR0_EMPTY_Msk))</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>until<sp/>the<sp/>queue<sp/>is<sp/>indeed<sp/>flushed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga19b2912cd17132e6a10f818023fa0745" kindref="member">XMC_VADC_GROUP_QueueRemoveChannel</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr);</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga26dff19d499748825e53019d060a675a" kindref="member">XMC_VADC_GROUP_QueueInsertChannel</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___q_u_e_u_e___e_n_t_r_y__t" kindref="compound">XMC_VADC_QUEUE_ENTRY_t</ref><sp/>entry)</highlight></codeline>
<codeline lineno="4113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueInsertChannel:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>channel<sp/>physically<sp/>and<sp/>get<sp/>the<sp/>length<sp/>of<sp/>the<sp/>queue*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/>group_ptr-&gt;QINR0<sp/>=<sp/>entry.qinr0;</highlight></codeline>
<codeline lineno="4117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal">int32_t<sp/><ref refid="group___v_a_d_c_1ga305e60b302a668a2d2c35b96208cdea7" kindref="member">XMC_VADC_GROUP_QueueGetNextChannel</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr);</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal">int32_t<sp/><ref refid="group___v_a_d_c_1ga8ed5e69a5c33fd5b3acea763bdf957b9" kindref="member">XMC_VADC_GROUP_QueueGetInterruptedChannel</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr);</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga51bc955e0976c66affb8b660261cdf82" kindref="member">XMC_VADC_GROUP_QueueTriggerReqSrcEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="4174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueTriggerReqSrcEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/>group_ptr-&gt;SEFLAG<sp/>|=<sp/>1U;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga165449401f44c76bafa98f119569ffdc" kindref="member">XMC_VADC_GROUP_QueueClearReqSrcEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="4193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueClearReqSrcEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/>group_ptr-&gt;SEFCLR<sp/>=<sp/>(uint32_t)VADC_G_SEFCLR_SEV0_Msk;</highlight></codeline>
<codeline lineno="4196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaaf5dae90963d3decfcc07d961b2cfdaf" kindref="member">XMC_VADC_GROUP_QueueGetReqSrcEventStatus</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="4213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueGetReqSrcEventStatus:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(group_ptr-&gt;SEFLAG<sp/>&amp;<sp/>(uint32_t)VADC_G_SEFLAG_SEV0_Msk);</highlight></codeline>
<codeline lineno="4217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gabf8bc9e2f7207523e5fb6d6b360ea663" kindref="member">XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref><sp/>sr);</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight></codeline>
<codeline lineno="4250"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga67769f0c1fba40f3fdd1026936ed50b9" kindref="member">XMC_VADC_GROUP_QueueEnableExternalTrigger</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="4251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueEnableExternalTrigger:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/>group_ptr-&gt;QMR0<sp/>|=<sp/>(uint32_t)VADC_G_QMR0_ENTR_Msk;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gacdb123380f2ec61225fd8c7ed70c4c8b" kindref="member">XMC_VADC_GROUP_QueueDisableExternalTrigger</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="4273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_QueueDisableExternalTrigger:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/>group_ptr-&gt;QMR0<sp/>&amp;=<sp/>~((uint32_t)VADC_G_QMR0_ENTR_Msk);</highlight></codeline>
<codeline lineno="4277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(XMC_VADC_GROUP_AVAILABLE<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight></codeline>
<codeline lineno="4300"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga88e0f4deb5ddd8a85c786a6291327fa6" kindref="member">XMC_VADC_GROUP_ChannelInit</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num,</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___c_h_a_n_n_e_l___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_CHANNEL_CONFIG_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight></codeline>
<codeline lineno="4330"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa9a9864939239099c1de61555e12d223" kindref="member">XMC_VADC_GROUP_SetChannelAlias</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>src_ch_num,</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>alias_ch_num)</highlight></codeline>
<codeline lineno="4333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_SetChannelAlias:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_SetChannelAlias:Wrong<sp/>Alias<sp/>Channel&quot;</highlight><highlight class="normal">,<sp/>((alias_ch_num<sp/>==<sp/>0)<sp/>||<sp/>(alias_ch_num<sp/>==<sp/>1U)))</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_SetChannelAlias:Wrong<sp/>Aliased<sp/>Channel&quot;</highlight><highlight class="normal">,<sp/>((src_ch_num<sp/>&lt;<sp/>8U)))</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/>group_ptr-&gt;ALIAS<sp/>=<sp/>(group_ptr-&gt;ALIAS<sp/>&amp;<sp/>(uint32_t)~(VADC_G_ALIAS_ALIAS0_Msk<sp/>&lt;&lt;<sp/>(VADC_G_ALIAS_ALIAS1_Pos<sp/>*<sp/>src_ch_num)))<sp/>|</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(alias_ch_num<sp/>&lt;&lt;<sp/>(VADC_G_ALIAS_ALIAS1_Pos<sp/>*<sp/>src_ch_num));</highlight></codeline>
<codeline lineno="4340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal">__STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group___v_a_d_c_1gaf2c2aa711194c6d8712973744551d76c" kindref="member">XMC_VADC_GROUP_GetChannelAlias</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>alias_ch_num)</highlight></codeline>
<codeline lineno="4357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_SetChannelAlias:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_SetChannelAlias:Wrong<sp/>Alias<sp/>Channel&quot;</highlight><highlight class="normal">,<sp/>((alias_ch_num<sp/>==<sp/>0)<sp/>||<sp/>(alias_ch_num<sp/>==<sp/>1U)))</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((group_ptr-&gt;ALIAS<sp/>&gt;&gt;<sp/>(VADC_G_ALIAS_ALIAS1_Pos<sp/>*<sp/>alias_ch_num))<sp/>&amp;<sp/>VADC_G_ALIAS_ALIAS0_Msk);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaf864b20c64882d1c78712892dbeae965" kindref="member">XMC_VADC_GROUP_ChannelIsResultOutOfBounds</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num);</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga02ef37668d4c2692d73b9b028202a923" kindref="member">XMC_VADC_GROUP_ChannelSetInputReference</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num,</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gab0c1eb7f8d8743b6b98ebfe8acd14e28" kindref="member">XMC_VADC_CHANNEL_REF_t</ref><sp/>ref);</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga6db93a7e9cdeb07b7e9ef1d2f34defd5" kindref="member">XMC_VADC_GROUP_ChannelSetResultRegister</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num,</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>result_reg_num);</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga285cba68d20e2b60001fcf3e727d54d1" kindref="member">XMC_VADC_GROUP_ChannelSetIclass</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num,</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" kindref="member">XMC_VADC_CHANNEL_CONV_t</ref><sp/>conversion_class);</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal">__STATIC_INLINE<sp/><ref refid="group___v_a_d_c_1ga5db9760a1339267ae158e21ee3047859" kindref="member">XMC_VADC_RESULT_ALIGN_t</ref><sp/><ref refid="group___v_a_d_c_1gabe045650b5b6d51b47f88bc49843ff47" kindref="member">XMC_VADC_GROUP_ChannelGetResultAlignment</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num)</highlight></codeline>
<codeline lineno="4466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ChannelGetResultAlignment:Wrong<sp/>Channel<sp/>Number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ch_num)<sp/>&lt;<sp/><ref refid="group___v_a_d_c_1ga5493b6e76383802d08a3a1b8198e566e" kindref="member">XMC_VADC_NUM_CHANNELS_PER_GROUP</ref>))</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="group___v_a_d_c_1ga5db9760a1339267ae158e21ee3047859" kindref="member">XMC_VADC_RESULT_ALIGN_t</ref>)((group_ptr-&gt;CHCTR[ch_num]<sp/>&amp;<sp/>(uint32_t)VADC_G_CHCTR_RESPOS_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)VADC_G_CHCTR_RESPOS_Pos)<sp/>);</highlight></codeline>
<codeline lineno="4473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal">__STATIC_INLINE<sp/><ref refid="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" kindref="member">XMC_VADC_CHANNEL_CONV_t</ref><sp/><ref refid="group___v_a_d_c_1gad554f725ef92cbbdf78d96af43e764b2" kindref="member">XMC_VADC_GROUP_ChannelGetInputClass</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num)</highlight></codeline>
<codeline lineno="4494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ChannelGetInputClass:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ChannelGetInputClass:Wrong<sp/>Channel<sp/>Number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ch_num)<sp/>&lt;<sp/><ref refid="group___v_a_d_c_1ga5493b6e76383802d08a3a1b8198e566e" kindref="member">XMC_VADC_NUM_CHANNELS_PER_GROUP</ref>))</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"></highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="group___v_a_d_c_1ga0da7a93877a25398b4e70482b85acd03" kindref="member">XMC_VADC_CHANNEL_CONV_t</ref>)((group_ptr-&gt;CHCTR[ch_num]<sp/>&amp;<sp/>(uint32_t)VADC_G_CHCTR_ICLSEL_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)VADC_G_CHCTR_ICLSEL_Pos)<sp/>);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"></highlight></codeline>
<codeline lineno="4521"><highlight class="normal">uint8_t<sp/><ref refid="group___v_a_d_c_1gae5c0071a3d6728dad1f4ddcb06f6bed8" kindref="member">XMC_VADC_GROUP_ChannelGetResultRegister</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num);</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"></highlight></codeline>
<codeline lineno="4539"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga495788bc643c2c9d51444edddcb0d3cb" kindref="member">XMC_VADC_GROUP_ChannelTriggerEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num);</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight></codeline>
<codeline lineno="4554"><highlight class="normal">__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___v_a_d_c_1ga0a71564a0703f2d0e4d3bbb329c76e29" kindref="member">XMC_VADC_GROUP_ChannelGetAssertedEvents</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="4555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ChannelGetAssertedEvents:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(group_ptr-&gt;CEFLAG);</highlight></codeline>
<codeline lineno="4558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga76846cba41d6ea170992e6b5ea61d957" kindref="member">XMC_VADC_GROUP_ChannelClearEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num)</highlight></codeline>
<codeline lineno="4577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ChannelClearEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ChannelClearEvent:Wrong<sp/>Channel<sp/>Number&quot;</highlight><highlight class="normal">,<sp/>((ch_num)<sp/>&lt;<sp/><ref refid="group___v_a_d_c_1ga5493b6e76383802d08a3a1b8198e566e" kindref="member">XMC_VADC_NUM_CHANNELS_PER_GROUP</ref>))</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/>group_ptr-&gt;CEFCLR<sp/>=<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>ch_num);</highlight></codeline>
<codeline lineno="4582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight></codeline>
<codeline lineno="4601"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga8b2d0baaf1e9113c61ef28c7d45e9feb" kindref="member">XMC_VADC_GROUP_ChannelSetEventInterruptNode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num,</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref><sp/>sr);</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga2a6ebe138cbedaba37f2333ccfb068a2" kindref="member">XMC_VADC_GROUP_ChannelTriggerEventGenCriteria</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num,</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga1b6bf4c15562eef67deac95cb36a48d6" kindref="member">XMC_VADC_CHANNEL_EVGEN_t</ref><sp/>criteria);</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"></highlight></codeline>
<codeline lineno="4626"><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="group___v_a_d_c_1ga0bb0fea79161f556b09b65f3a5a5ce16" kindref="member">XMC_VADC_GROUP_ChannelSetBoundarySelection</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ch_num,</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga23f503143ad7d53a741328bf71faa03e" kindref="member">XMC_VADC_BOUNDARY_SELECT_t</ref><sp/>boundary_sel,</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___v_a_d_c_1ga203ae2271679fb3e05d185a6bd14b8b2" kindref="member">XMC_VADC_CHANNEL_BOUNDARY_t</ref><sp/>selection);</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"></highlight></codeline>
<codeline lineno="4671"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga1a5f41454d3e42d5505db9e3acf5177f" kindref="member">XMC_VADC_GROUP_ResultInit</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg_num,</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___v_a_d_c___r_e_s_u_l_t___c_o_n_f_i_g__t" kindref="compound">XMC_VADC_RESULT_CONFIG_t</ref><sp/>*config)</highlight></codeline>
<codeline lineno="4674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ResultInit:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/>group_ptr-&gt;RCR[res_reg_num]<sp/>=<sp/>config-&gt;g_rcr;</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaf2c5118b682ff5c4820400ea362b3cc7" kindref="member">XMC_VADC_GROUP_AddResultToFifo</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg);</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gae1fa1ad973c5ab02b6a6a9ece61e1045" kindref="member">XMC_VADC_GROUP_EnableResultEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg)</highlight></codeline>
<codeline lineno="4725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_EnableResultEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_EnableResultEvent:Wrong<sp/>Result<sp/>Register&quot;</highlight><highlight class="normal">,<sp/>((res_reg)<sp/>&lt;<sp/>XMC_VADC_NUM_RESULT_REGISTERS))</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/>group_ptr-&gt;RCR[res_reg]<sp/>|=<sp/>(uint32_t)VADC_G_RCR_SRGEN_Msk;</highlight></codeline>
<codeline lineno="4730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga356e5be65b3abe1ac62e58adfda17529" kindref="member">XMC_VADC_GROUP_DisableResultEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg)</highlight></codeline>
<codeline lineno="4748"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_DisableResultEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_DisableResultEvent:Wrong<sp/>Result<sp/>Register&quot;</highlight><highlight class="normal">,<sp/>((res_reg)<sp/>&lt;<sp/>XMC_VADC_NUM_RESULT_REGISTERS))</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/>group_ptr-&gt;RCR[res_reg]<sp/>&amp;=<sp/>~((uint32_t)VADC_G_RCR_SRGEN_Msk);</highlight></codeline>
<codeline lineno="4752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight></codeline>
<codeline lineno="4773"><highlight class="normal">__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___v_a_d_c_1ga38c817eb225c4a684c4bbf5495981b2b" kindref="member">XMC_VADC_GROUP_GetDetailedResult</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg)</highlight></codeline>
<codeline lineno="4774"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetDetailedResult:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetDetailedResult:Wrong<sp/>Result<sp/>Register&quot;</highlight><highlight class="normal">,<sp/>((res_reg)<sp/>&lt;<sp/>XMC_VADC_NUM_RESULT_REGISTERS))</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(group_ptr-&gt;RES[res_reg]);</highlight></codeline>
<codeline lineno="4778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal">__STATIC_INLINE<sp/><ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref><sp/><ref refid="group___v_a_d_c_1gad190eca993528847f048cb3791bb1484" kindref="member">XMC_VADC_GROUP_GetResult</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg)</highlight></codeline>
<codeline lineno="4798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetResult:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetResult:Wrong<sp/>Result<sp/>Register&quot;</highlight><highlight class="normal">,<sp/>((res_reg)<sp/>&lt;<sp/>XMC_VADC_NUM_RESULT_REGISTERS))</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"></highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((<ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref>)group_ptr-&gt;RES[res_reg]);</highlight></codeline>
<codeline lineno="4803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"></highlight></codeline>
<codeline lineno="4828"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga151403257b63a3307631979702dee524" kindref="member">XMC_VADC_GROUP_SetResultFastCompareValue</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg,</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gadb07d5ea1ef8b662d9550d22944825d4" kindref="member">XMC_VADC_RESULT_SIZE_t</ref><sp/>compare_val);</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"></highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><ref refid="group___v_a_d_c_1ga42e972915a3d2ac3b46847a4d5228c64" kindref="member">XMC_VADC_FAST_COMPARE_t</ref><sp/><ref refid="group___v_a_d_c_1ga74c556f6be3e4ad892ad04afedf1f566" kindref="member">XMC_VADC_GROUP_GetFastCompareResult</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg);</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"></highlight></codeline>
<codeline lineno="4869"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaa938b07f4f1d5ece14be6aec0738752c" kindref="member">XMC_VADC_GROUP_SetResultSubtractionValue</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>subtraction_val);</highlight></codeline>
<codeline lineno="4887"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gadd781581d9749d4f79c9d8a2b6570596" kindref="member">XMC_VADC_GROUP_TriggerResultEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg)</highlight></codeline>
<codeline lineno="4888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_TriggerResultEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_TriggerResultEvent:Wrong<sp/>Result<sp/>Register&quot;</highlight><highlight class="normal">,<sp/>((res_reg)<sp/>&lt;<sp/>XMC_VADC_NUM_RESULT_REGISTERS))</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/>group_ptr-&gt;REFLAG<sp/>=<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>res_reg);</highlight></codeline>
<codeline lineno="4892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight></codeline>
<codeline lineno="4907"><highlight class="normal">__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___v_a_d_c_1gab8150d5363128515d90811868cf39b29" kindref="member">XMC_VADC_GROUP_GetAssertedResultEvents</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="4908"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetAssertedResultEvents:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(group_ptr-&gt;REFLAG);</highlight></codeline>
<codeline lineno="4911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gaf4178ad4431b23112dbc89e8e258bc22" kindref="member">XMC_VADC_GROUP_ClearResultEvent</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg)</highlight></codeline>
<codeline lineno="4930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ClearResultEvent:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_ClearResultEvent:Wrong<sp/>Result<sp/>Register&quot;</highlight><highlight class="normal">,<sp/>((res_reg)<sp/>&lt;<sp/>XMC_VADC_NUM_RESULT_REGISTERS))</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/>group_ptr-&gt;REFCLR<sp/>=<sp/>(uint32_t)((uint32_t)1<sp/>&lt;&lt;<sp/>res_reg);</highlight></codeline>
<codeline lineno="4934"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"></highlight></codeline>
<codeline lineno="4953"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga701140b8237cba836cbd4f1cd3393330" kindref="member">XMC_VADC_GROUP_SetResultInterruptNode</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg,</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gab518b0c522cae78b7434dfa327a540b1" kindref="member">XMC_VADC_SR_t</ref><sp/>sr);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"></highlight></codeline>
<codeline lineno="4974"><highlight class="normal">uint32_t<sp/><ref refid="group___v_a_d_c_1ga233d039edab60b343aa4efef57d79cca" kindref="member">XMC_VADC_GROUP_GetResultFifoTail</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/>uint32_t<sp/>res_reg);</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal">uint32_t<sp/><ref refid="group___v_a_d_c_1ga902952b0e1027e6fecbd5743229f595c" kindref="member">XMC_VADC_GROUP_GetResultFifoHead</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg);</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1ga4fb1c3e933690c2e106823950c6fe06d" kindref="member">XMC_VADC_GROUP_IsResultRegisterFifoHead</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg);</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight></codeline>
<codeline lineno="5029"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group___v_a_d_c_1gae1b61fdad9ee903b23e944e787843e46" kindref="member">XMC_VADC_GROUP_IsResultRegisterInFifo</ref>(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_reg)</highlight></codeline>
<codeline lineno="5031"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"></highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_IsResultRegisterInFifo:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_IsResultRegisterInFifo:Wrong<sp/>Result<sp/>Register&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((res_reg)<sp/>&lt;<sp/>XMC_VADC_NUM_RESULT_REGISTERS))</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(group_ptr-&gt;RCR[res_reg]<sp/>&amp;<sp/>(uint32_t)VADC_G_RCR_FEN_Msk));</highlight></codeline>
<codeline lineno="5037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight></codeline>
<codeline lineno="5039"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>XMC_VADC_RESULT_PRIORITY_AVAILABLE<sp/>==<sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5040"><highlight class="normal"></highlight></codeline>
<codeline lineno="5058"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_VADC_GROUP_SetResultRegPriority(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>res_mask)</highlight></codeline>
<codeline lineno="5059"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_SetResultRegPriority:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/>group_ptr-&gt;RRASS<sp/>=<sp/>(uint32_t)res_mask;</highlight></codeline>
<codeline lineno="5062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"></highlight></codeline>
<codeline lineno="5076"><highlight class="normal">__STATIC_INLINE<sp/>uint32_t<sp/>XMC_VADC_GROUP_GetResultRegPriority(<ref refid="group___v_a_d_c_1ga1cab39abba3ecb096d57ab19b5774800" kindref="member">XMC_VADC_GROUP_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>group_ptr)</highlight></codeline>
<codeline lineno="5077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/>XMC_ASSERT(</highlight><highlight class="stringliteral">&quot;XMC_VADC_GROUP_GetResultRegPriority:Wrong<sp/>Group<sp/>Pointer&quot;</highlight><highlight class="normal">,<sp/>XMC_VADC_CHECK_GROUP_PTR(group_ptr))</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(group_ptr-&gt;RRASS);</highlight></codeline>
<codeline lineno="5080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5087"><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/var/tmp/gitlab-runner1/builds/7e5c9300/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_vadc.h"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="xmc__spi_8h" kind="file" language="C++">
    <compoundname>xmc_spi.h</compoundname>
    <includes refid="xmc__usic_8h" local="yes">xmc_usic.h</includes>
    <innerclass refid="struct_x_m_c___s_p_i___c_h___c_o_n_f_i_g__t" prot="public">XMC_SPI_CH_CONFIG_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___s_p_i_1gafbe409a89eb539dd5009c5f96ece7248" prot="public" static="no">
        <name>XMC_SPI0_CH0</name>
        <initializer><ref refid="group___u_s_i_c_1ga28dd6da4b742e7336b12ae6fa8de5e9f" kindref="member">XMC_USIC0_CH0</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI0 channel 0 base address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="133" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1gaea0fc2e67a9745c9dded45de4b218095" prot="public" static="no">
        <name>XMC_SPI0_CH1</name>
        <initializer><ref refid="group___u_s_i_c_1gab7c9a3765e7d637114fc67951cf20c5b" kindref="member">XMC_USIC0_CH1</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI0 channel 1 base address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="134" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1ga51b74698dfc8082605bc0d5a7a478c50" prot="public" static="no">
        <name>XMC_SPI1_CH0</name>
        <initializer><ref refid="group___u_s_i_c_1gab3012ea0f6b1dddc5b1c05425e15c4a1" kindref="member">XMC_USIC1_CH0</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI1 channel 0 base address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="138" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1gacd8b796500e98b94f045f57198e3d4ae" prot="public" static="no">
        <name>XMC_SPI1_CH1</name>
        <initializer><ref refid="group___u_s_i_c_1ga8892cec48c6246ff3e470178e4273f99" kindref="member">XMC_USIC1_CH1</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI1 channel 1 base address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="139" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1gad2f1be17c48106b2fde910c65ba36166" prot="public" static="no">
        <name>XMC_SPI2_CH0</name>
        <initializer><ref refid="group___u_s_i_c_1gab79d676f4efb3235bd3d8c977b83b1cf" kindref="member">XMC_USIC2_CH0</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI2 channel 0 base address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="143" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_i_1ga099781db3446d2d4b85863cb86247053" prot="public" static="no">
        <name>XMC_SPI2_CH1</name>
        <initializer><ref refid="group___u_s_i_c_1ga6f71692f25917f0dcd77bb77e5518313" kindref="member">XMC_USIC2_CH1</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI2 channel 1 base address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="144" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___s_p_i_1gaf703b28cb6fe62eec40258bbb4b2381e" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t</name>
        <enumvalue id="group___s_p_i_1ggaf703b28cb6fe62eec40258bbb4b2381eae57defba0e28b37387753485a740acf2" prot="public">
          <name>XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK</name>
          <initializer>= XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Baudrate Generator shift clock output: SCLK </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggaf703b28cb6fe62eec40258bbb4b2381eae8aea9225b3233a8cf60f426bb0368f8" prot="public">
          <name>XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1</name>
          <initializer>= XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock obtained as input from master: DX1 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI Baudrate Generator shift clock output </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="325" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="324" bodyend="328"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1gad62a419e5f01dc507f3f731995873fe4" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t</name>
        <enumvalue id="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4a60da59e367df81e02204c193307c7543" prot="public">
          <name>XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED</name>
          <initializer>= XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Passive clock level 0, delay disabled Passive clock level 1, delay disabled </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4adba7c97cc13e382c36fb79a927ba779d" prot="public">
          <name>XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED</name>
          <initializer>= XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Passive clock level 0, delay enabled </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4a5d8efe2fd3be3cbb88685afcfc7f4e04" prot="public">
          <name>XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED</name>
          <initializer>= XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Passive clock level 1, delay enabled </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4af17533483b9c436c86e509a4339fc067" prot="public">
          <name>XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED</name>
          <initializer>= XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI Baudrate Generator shift clock passive level </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="292" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="291" bodyend="301"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1gaaf40703e598cf0bd196246cc048dda10" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_BUS_MODE_t</name>
        <enumvalue id="group___s_p_i_1ggaaf40703e598cf0bd196246cc048dda10a6535e33ac253d974dbdade07b9bdc6d5" prot="public">
          <name>XMC_SPI_CH_BUS_MODE_MASTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI Master </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1ggaaf40703e598cf0bd196246cc048dda10a6ded2d0050c88da873e2cfc0167d3e54" prot="public">
          <name>XMC_SPI_CH_BUS_MODE_SLAVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI Slave </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the SPI bus mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="164" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="163" bodyend="167"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga3d2e9e07d36e47a2840855c7761f3d2f" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_DATA_POLARITY_t</name>
        <enumvalue id="group___s_p_i_1gga3d2e9e07d36e47a2840855c7761f3d2fa07561a103212e36eb152fad4c6e0bc09" prot="public">
          <name>XMC_SPI_CH_DATA_POLARITY_DIRECT</name>
          <initializer>= 0x0UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The polarity of the data line is not inverted </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga3d2e9e07d36e47a2840855c7761f3d2fad4dced7ef4a2819a36fabb92a24a160b" prot="public">
          <name>XMC_SPI_CH_DATA_POLARITY_INVERT</name>
          <initializer>= 0x1UL &lt;&lt; USIC_CH_DX2CR_DPOL_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The polarity of the data line is inverted </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the Polarity of the data inputs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="185" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga7cf84a07d3e3970c1b09369fcf3c12db" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_EVENT_t</name>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba4b9fc48875e84294585b5b62cd5faea3" prot="public">
          <name>XMC_SPI_CH_EVENT_RECEIVE_START</name>
          <initializer>= USIC_CH_CCR_RSIEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Receive start event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba45328c5bfb41c4fa0d7fc47e51640c6d" prot="public">
          <name>XMC_SPI_CH_EVENT_DATA_LOST</name>
          <initializer>= USIC_CH_CCR_DLIEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data lost event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dbadd8d1e2334f16528a036b045c0c9eefc" prot="public">
          <name>XMC_SPI_CH_EVENT_TRANSMIT_SHIFT</name>
          <initializer>= USIC_CH_CCR_TSIEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Transmit shift event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dbaf08fec199ecb9705918d10cdb24ed446" prot="public">
          <name>XMC_SPI_CH_EVENT_TRANSMIT_BUFFER</name>
          <initializer>= USIC_CH_CCR_TBIEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Transmit buffer event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba0accbca5448646b799940028bd294fe8" prot="public">
          <name>XMC_SPI_CH_EVENT_STANDARD_RECEIVE</name>
          <initializer>= USIC_CH_CCR_RIEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Receive event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba1b751bd9beb2fcbcaaf6afd59ced9b94" prot="public">
          <name>XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE</name>
          <initializer>= USIC_CH_CCR_AIEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Alternate receive event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba33d6fbed5535423f89e0413eb7f0ff34" prot="public">
          <name>XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR</name>
          <initializer>= USIC_CH_CCR_BRGIEN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Baudrate generator event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dbaeccd57639b56f8276d0cf3d4ff23285e" prot="public">
          <name>XMC_SPI_CH_EVENT_PARITY_ERROR</name>
          <initializer>= USIC_CH_PCR_SSCMode_PARIEN_Msk &gt;&gt; 13U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity error event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba9957b6f9ec5e89ec4fe744ca9b85cb9a" prot="public">
          <name>XMC_SPI_CH_EVENT_MSLS_CHANGE</name>
          <initializer>=  USIC_CH_PCR_SSCMode_MSLSIEN_Msk &gt;&gt; 13U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Master slave select(MSLS) output transition event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dbab0ccd895a632344bf17ad5003af08965" prot="public">
          <name>XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED</name>
          <initializer>= USIC_CH_PCR_SSCMode_DX2TIEN_Msk &gt;&gt; 13U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave select input signal transition event </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines SPI specific events </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="209" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="208" bodyend="221"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga52dd53cd4c107af8f6d72c6c6a011886" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t</name>
        <enumvalue id="group___s_p_i_1gga52dd53cd4c107af8f6d72c6c6a011886a58b64a73bcb7179ea3154579254725c2" prot="public">
          <name>XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV</name>
          <initializer>= 0x0UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Output of PDIV divider: FPDIV </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga52dd53cd4c107af8f6d72c6c6a011886aae8eded70ac9defd6fa10321482aecda" prot="public">
          <name>XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP</name>
          <initializer>= 0x1UL &lt;&lt; USIC_CH_PCR_SSCMode_CTQSEL1_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Peripheral clock: FPPP </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga52dd53cd4c107af8f6d72c6c6a011886a0c2051effe9ccca3dcd9f959874c4d36" prot="public">
          <name>XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK</name>
          <initializer>= 0x2UL &lt;&lt; USIC_CH_PCR_SSCMode_CTQSEL1_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shift clock: FSCLK </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga52dd53cd4c107af8f6d72c6c6a011886ad52df965918f9e56f530f872ed792d02" prot="public">
          <name>XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK</name>
          <initializer>= 0x3UL &lt;&lt; USIC_CH_PCR_SSCMode_CTQSEL1_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Master clock: FMCLK </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines input frequency sources for slave select signal delay configuration. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="256" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="255" bodyend="261"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_INPUT_t</name>
        <enumvalue id="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fa3730321c216c06c0ae39693e68786d4c" prot="public">
          <name>XMC_SPI_CH_INPUT_DIN0</name>
          <initializer>= 0UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data input stage 0 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fa5b0aed31501650341a5710a8db35b40a" prot="public">
          <name>XMC_SPI_CH_INPUT_SLAVE_SCLKIN</name>
          <initializer>= 1UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock input stage </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fa96fe102aaf89df811f501ca34f3967a0" prot="public">
          <name>XMC_SPI_CH_INPUT_SLAVE_SELIN</name>
          <initializer>= 2UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave select input stage </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fa32f593df13abbed01017df7ea1cd9b11" prot="public">
          <name>XMC_SPI_CH_INPUT_DIN1</name>
          <initializer>= 3UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data input stage 1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fad7d757c2e37f1d9678ee76c5ac58cd9b" prot="public">
          <name>XMC_SPI_CH_INPUT_DIN2</name>
          <initializer>= 4UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data input stage 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fadce039080e9a2e2795af411defb8a17e" prot="public">
          <name>XMC_SPI_CH_INPUT_DIN3</name>
          <initializer>= 5UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data input stage 3 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define data and clock input stages </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="267" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="266" bodyend="274"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga6396e4407b48373dd88ce24c1e229635" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_INTERRUPT_NODE_POINTER_t</name>
        <enumvalue id="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635adbf85c1c2d8fef17554d399c4d3ffd77" prot="public">
          <name>XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT</name>
          <initializer>= XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Node pointer for transmit shift interrupt </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635acef45b4e93a44535a1e05154d5078b9a" prot="public">
          <name>XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER</name>
          <initializer>= XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Node pointer for transmit buffer interrupt </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635a829ccec5de803a4d04d46c1bc959cd1a" prot="public">
          <name>XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE</name>
          <initializer>= XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Node pointer for receive interrupt </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635a79a1d019abac22505f9b50e38b415041" prot="public">
          <name>XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE</name>
          <initializer>= XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Node pointer for alternate receive interrupt </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635a643fcd627d71ba72b3c48449474d96dd" prot="public">
          <name>XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL</name>
          <initializer>= XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Node pointer for protocol related interrupts </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI channel interrupt node pointers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="334" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="333" bodyend="340"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_MODE_t</name>
        <enumvalue id="group___s_p_i_1gga9dabbd3f51646f95b0719bf82c69c38fa7ed5131d8a7ba77370debe459420e79a" prot="public">
          <name>XMC_SPI_CH_MODE_STANDARD</name>
          <initializer>= 0UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI standard full duplex mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga9dabbd3f51646f95b0719bf82c69c38fa17c7eb1a23dd44233a32bc40e1d91d7b" prot="public">
          <name>XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX</name>
          <initializer>= 5UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI standard half duplex mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga9dabbd3f51646f95b0719bf82c69c38fa4c0d92f4303e350e8f221bd870ea5855" prot="public">
          <name>XMC_SPI_CH_MODE_DUAL</name>
          <initializer>= 6UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI half duplex mode with dual data lines </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga9dabbd3f51646f95b0719bf82c69c38fa3e0c7cf3a25d8091075bafaac56109b2" prot="public">
          <name>XMC_SPI_CH_MODE_QUAD</name>
          <initializer>= 7UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SPI half duplex mode with quad data lines </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define SPI data transfer mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="280" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="279" bodyend="285"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga01a43390cf6218a5f16976f0b6027096" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t</name>
        <enumvalue id="group___s_p_i_1gga01a43390cf6218a5f16976f0b6027096a2d4df93fa0c9ae9bb7bc2050372d4150" prot="public">
          <name>XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS</name>
          <initializer>= 0x0UL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The SELO outputs have the same polarity as the MSLS signal (active high) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga01a43390cf6218a5f16976f0b6027096aa7c8920fcfd744c9236533eba2e87391" prot="public">
          <name>XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS</name>
          <initializer>= 0x1UL &lt;&lt; USIC_CH_PCR_SSCMode_SELINV_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The SELO outputs have the inverted polarity to the MSLS signal (active low) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the Polarity of the slave select signals SELO[7:0] in relation to the master slave select signal MSLS. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="173" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="172" bodyend="179"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga770391e79549c7df020fdd0f3864a808" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_SLAVE_SELECT_t</name>
        <enumvalue id="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a00be0d2c599ae2957bd0fed44fb88855" prot="public">
          <name>XMC_SPI_CH_SLAVE_SELECT_0</name>
          <initializer>= 1UL &lt;&lt; USIC_CH_PCR_SSCMode_SELO_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave Select line 0 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a2690a4c89d59b73f382c5139ee3c7536" prot="public">
          <name>XMC_SPI_CH_SLAVE_SELECT_1</name>
          <initializer>= 2UL &lt;&lt; USIC_CH_PCR_SSCMode_SELO_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave Select line 1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808af0bcf851c8a1b519dbc76693489288df" prot="public">
          <name>XMC_SPI_CH_SLAVE_SELECT_2</name>
          <initializer>= 4UL &lt;&lt; USIC_CH_PCR_SSCMode_SELO_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave Select line 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a6db85b62c5780f013bab00d3cf3e01a3" prot="public">
          <name>XMC_SPI_CH_SLAVE_SELECT_3</name>
          <initializer>= 8UL &lt;&lt; USIC_CH_PCR_SSCMode_SELO_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave Select line 3 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a1c8340b08676a487e080a6f9af45a548" prot="public">
          <name>XMC_SPI_CH_SLAVE_SELECT_4</name>
          <initializer>= 16UL &lt;&lt; USIC_CH_PCR_SSCMode_SELO_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave Select line 4 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a53320f8b59200bf61ced7b50266e11f4" prot="public">
          <name>XMC_SPI_CH_SLAVE_SELECT_5</name>
          <initializer>= 32UL &lt;&lt; USIC_CH_PCR_SSCMode_SELO_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave Select line 5 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a9c659e80688ec34014de2a9bcbb2a879" prot="public">
          <name>XMC_SPI_CH_SLAVE_SELECT_6</name>
          <initializer>= 64UL &lt;&lt; USIC_CH_PCR_SSCMode_SELO_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave Select line 6 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a13b1ba1e6096ae777c0e0bd6428ba4fa" prot="public">
          <name>XMC_SPI_CH_SLAVE_SELECT_7</name>
          <initializer>= 128UL &lt;&lt; USIC_CH_PCR_SSCMode_SELO_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Slave Select line 7 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines Slave Select lines </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="194" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="193" bodyend="203"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga7c2761994b910b3e09b6373448a90762" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_STATUS_FLAG_t</name>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a8eca08cb355c692a598c0dae8c8dc9f1" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_MSLS</name>
          <initializer>= USIC_CH_PSR_SSCMode_MSLS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status of Master slave select(MSLS) signal </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a2a5bf5f0e3d29181560104b7d1ede1ad" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_DX2S</name>
          <initializer>= USIC_CH_PSR_SSCMode_DX2S_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status of slave select input(DX2) signal </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762aa64256e3a419a6e5e78af40b13b06c07" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED</name>
          <initializer>= USIC_CH_PSR_SSCMode_MSLSEV_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status for master slave select output signal transition </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a6f535a37e10de454228ad80aa61186be" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED</name>
          <initializer>= USIC_CH_PSR_SSCMode_DX2TEV_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status for slave select input signal transition </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a5f02c5c437155e4305b61e31e858767f" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED</name>
          <initializer>= USIC_CH_PSR_SSCMode_PARERR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates status of the parity error </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762aebb0f539334bf93e7956a471bfbd13af" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION</name>
          <initializer>= USIC_CH_PSR_SSCMode_RSIF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status for receive start event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a08c7ad534bb131f741d313d7ea28cbe3" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION</name>
          <initializer>= USIC_CH_PSR_SSCMode_DLIF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status for data lost event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762af609b97f1e6ea2c118c0b4d3682090d0" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION</name>
          <initializer>= USIC_CH_PSR_SSCMode_TSIF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status for transmit shift event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a7054d7d1cc298711c1dd27b6ddc5c2f5" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION</name>
          <initializer>= USIC_CH_PSR_SSCMode_TBIF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status for transmit buffer event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762aebbab80c5922351320b1e1948633c27a" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION</name>
          <initializer>= USIC_CH_PSR_SSCMode_RIF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status for receive event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a1d9c5c5eb3ac18540acb5c58fb8b126a" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION</name>
          <initializer>= USIC_CH_PSR_SSCMode_AIF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status for alternative receive event </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a8cece74a4527cac93aa69b958bb81309" prot="public">
          <name>XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION</name>
          <initializer>= USIC_CH_PSR_SSCMode_BRGIF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status for baud rate generation error event </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines SPI event status </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="227" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="226" bodyend="250"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga3f497bc1a5457fddd4f5e57f30c3531d" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CH_STATUS_t</name>
        <enumvalue id="group___s_p_i_1gga3f497bc1a5457fddd4f5e57f30c3531dad6241ca094413611b4054d3222e58339" prot="public">
          <name>XMC_SPI_CH_STATUS_OK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status of the Module: OK </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga3f497bc1a5457fddd4f5e57f30c3531da9d3531bfa6a78a7e74c58be3decf9440" prot="public">
          <name>XMC_SPI_CH_STATUS_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Status of the Module: ERROR </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga3f497bc1a5457fddd4f5e57f30c3531dac122b8021103d9d5807eaa51bb63b876" prot="public">
          <name>XMC_SPI_CH_STATUS_BUSY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The Module is busy </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines return status of SPI driver APIs </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="155" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="154" bodyend="159"/>
      </memberdef>
      <memberdef kind="enum" id="group___s_p_i_1ga4ba31662807d655662ed15c5a44e9832" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_SPI_CLOCK_MODE_t</name>
        <enumvalue id="group___s_p_i_1gga4ba31662807d655662ed15c5a44e9832acfd02e5cdfabac3d60ce9d1ff9f727e7" prot="public">
          <name>XMC_SPI_CPOL_0_CPHA_0</name>
          <initializer>= XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga4ba31662807d655662ed15c5a44e9832a67f948755f9aed46498efeaf482864b7" prot="public">
          <name>XMC_SPI_CPOL_0_CPHA_1</name>
          <initializer>= XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga4ba31662807d655662ed15c5a44e9832ac0b1fe1eb0c9d7772cb44fec3ec0db0f" prot="public">
          <name>XMC_SPI_CPOL_1_CPHA_0</name>
          <initializer>= XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___s_p_i_1gga4ba31662807d655662ed15c5a44e9832aebca1cc69b17cb7879d82cd1c1eff128" prot="public">
          <name>XMC_SPI_CPOL_1_CPHA_1</name>
          <initializer>= XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>SPI clock modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="314" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="313" bodyend="319"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___s_p_i_1ga2a54f046194eee8c765c8c4ff4af73ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_ClearStatusFlag</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint32_t flag)</argsstring>
        <name>XMC_SPI_CH_ClearStatusFlag</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Protocol event status to be cleared for detection of next occurence. Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <bold>OR</bold> combinations of these enum item can be used as input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Clears the events specified, by setting PSCR register.<linebreak/>
<linebreak/>
During communication the events occurred have to be cleared to detect their next occurence.<linebreak/>
e.g: During transmission Transmit buffer event occurs to indicating data word transfer has started. This event has to be cleared after transmission of each data word. Otherwise next event cannot be recognized.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga16747654a19c5dcef00d7f7e61d14f48" kindref="member">XMC_SPI_CH_GetStatusFlag()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="716" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="716" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gac19e7d5bf3ff9b28764463d224b6e581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_ConfigExternalInputSignalToBRG</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint16_t pdiv, const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode)</argsstring>
        <name>XMC_SPI_CH_ConfigExternalInputSignalToBRG</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>pdiv</declname>
        </param>
        <param>
          <type>const <ref refid="group___u_s_i_c_1ga4c50ae5a7f12a5496d82d2bc665e1db2" kindref="member">XMC_USIC_CH_INPUT_COMBINATION_MODE_t</ref></type>
          <declname>combination_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USIC channel handler of type <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> <linebreak/>
 <bold>Range:</bold> <ref refid="group___s_p_i_1gafbe409a89eb539dd5009c5f96ece7248" kindref="member">XMC_SPI0_CH0</ref>, <ref refid="group___s_p_i_1gaea0fc2e67a9745c9dded45de4b218095" kindref="member">XMC_SPI0_CH1</ref>,<ref refid="group___s_p_i_1ga51b74698dfc8082605bc0d5a7a478c50" kindref="member">XMC_SPI1_CH0</ref>,<ref refid="group___s_p_i_1gacd8b796500e98b94f045f57198e3d4ae" kindref="member">XMC_SPI1_CH1</ref>,<ref refid="group___s_p_i_1gad2f1be17c48106b2fde910c65ba36166" kindref="member">XMC_SPI2_CH0</ref>,<ref refid="group___s_p_i_1ga099781db3446d2d4b85863cb86247053" kindref="member">XMC_SPI2_CH1</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Availability of SPI1 and SPI2 depends on device selection </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pdiv</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired divider for the external frequency input. <bold>Range:</bold> minimum value = 1, maximum value = 1024 <linebreak/>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>combination_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>USIC channel input combination mode <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables the external frequency input for the Baudrate Generator and configures the divider, oversampling and the combination mode of the USIC channel. <linebreak/>
<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___u_s_i_c_1ga2876a325930da4b77ef46ec4e0acda0d" kindref="member">XMC_USIC_CH_SetBRGInputClockSource()</ref>, <ref refid="group___u_s_i_c_1gaeef58e03c1253fce5b8a456f5d8c6da6" kindref="member">XMC_USIC_CH_SetInputTriggerCombinationMode()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1280" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1280" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gadaf15fe97c6fc0b78ac661e923521ee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_ConfigureShiftClockOutput</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level, const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)</argsstring>
        <name>XMC_SPI_CH_ConfigureShiftClockOutput</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1gad62a419e5f01dc507f3f731995873fe4" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t</ref></type>
          <declname>passive_level</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1gaf703b28cb6fe62eec40258bbb4b2381e" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t</ref></type>
          <declname>clock_output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>passive_level</parametername>
</parameternamelist>
<parameterdescription>
<para>polarity and delay of the selected shift clock.<linebreak/>
 Refer <ref refid="group___s_p_i_1gad62a419e5f01dc507f3f731995873fe4" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t</ref> for valid inputs. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clock_output</parametername>
</parameternamelist>
<parameterdescription>
<para>shift clock source.<linebreak/>
 Refer <ref refid="group___s_p_i_1gaf703b28cb6fe62eec40258bbb4b2381e" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t</ref> for valid inputs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the shift clock source with the selected polarity and delay by setting BRG.SCLKOSEL and BRG.SCLKCFG.<linebreak/>
<linebreak/>
In Master mode operation, shift clock is generated by the internal baud rate generator. This SCLK is made available for external slave devices by SCLKOUT signal.<linebreak/>
In Slave mode, the signal is received from the external master. So the DX1(input) stage has to be connected to input.<linebreak/>
The shift clock output(SCLKOUT) signal polarity can be set relative to SCLK, with the delay of half the shift clock period. These settings are applicable only in master mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="951" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="951" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga87d32f246cfd7eca010b38e90810277b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableDataTransmission</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_DisableDataTransmission</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to USIC channel handle of type <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> <linebreak/>
 <bold>Range:</bold> <ref refid="group___s_p_i_1gafbe409a89eb539dd5009c5f96ece7248" kindref="member">XMC_SPI0_CH0</ref>, <ref refid="group___s_p_i_1gaea0fc2e67a9745c9dded45de4b218095" kindref="member">XMC_SPI0_CH1</ref>,<ref refid="group___s_p_i_1ga51b74698dfc8082605bc0d5a7a478c50" kindref="member">XMC_SPI1_CH0</ref>,<ref refid="group___s_p_i_1gacd8b796500e98b94f045f57198e3d4ae" kindref="member">XMC_SPI1_CH1</ref>,<ref refid="group___s_p_i_1gad2f1be17c48106b2fde910c65ba36166" kindref="member">XMC_SPI2_CH0</ref>,<ref refid="group___s_p_i_1ga099781db3446d2d4b85863cb86247053" kindref="member">XMC_SPI2_CH1</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Availability of SPI1 and SPI2 depends on device selection </para>
</simplesect>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disable data transmission.<linebreak/>
<linebreak/>
Use this function in combination with <ref refid="group___s_p_i_1ga9ed5d8b86f55dd5a64316392b90c661b" kindref="member">XMC_SPI_CH_EnableDataTransmission()</ref> to fill the FIFO and send the FIFO content without gaps in the transmission. FIFO is filled using <ref refid="group___u_s_i_c_1gae96e9afeaefe2585b687e36f6227727f" kindref="member">XMC_USIC_CH_TXFIFO_PutData()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga9ed5d8b86f55dd5a64316392b90c661b" kindref="member">XMC_SPI_CH_EnableDataTransmission()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1348" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1348" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gac0b5cdd04a90124e347ba3ef897dc545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableDelayCompensation</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_DisableDelayCompensation</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USIC channel handler of type <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> <linebreak/>
 <bold>Range:</bold> <ref refid="group___s_p_i_1gafbe409a89eb539dd5009c5f96ece7248" kindref="member">XMC_SPI0_CH0</ref>, <ref refid="group___s_p_i_1gaea0fc2e67a9745c9dded45de4b218095" kindref="member">XMC_SPI0_CH1</ref>,<ref refid="group___s_p_i_1ga51b74698dfc8082605bc0d5a7a478c50" kindref="member">XMC_SPI1_CH0</ref>,<ref refid="group___s_p_i_1gacd8b796500e98b94f045f57198e3d4ae" kindref="member">XMC_SPI1_CH1</ref>,<ref refid="group___s_p_i_1gad2f1be17c48106b2fde910c65ba36166" kindref="member">XMC_SPI2_CH0</ref>,<ref refid="group___s_p_i_1ga099781db3446d2d4b85863cb86247053" kindref="member">XMC_SPI2_CH1</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Availability of SPI1 and SPI2 depends on device selection </para>
</simplesect>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables delay compensation.. <linebreak/>
<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gab1fb0a57f619c0d1872482196399a443" kindref="member">XMC_SPI_CH_EnableDelayCompensation()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1260" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1260" bodyend="1263"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gaeb24e63f6664b519405dd75ca9d856fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableEOF</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_DisableEOF</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configure the handling of end of frame through hardware, by clearing TCSR.EOF bit.<linebreak/>
<linebreak/>
Typically this can be disabled, where the transmission control is done by the hardware.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gae37ff42efc15af1807458ff0a47053ea" kindref="member">XMC_SPI_CH_EnableEOF()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1070" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1070" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga8f3bb2759c5dc83f4df9674bc7521dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableEvent</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint32_t event)</argsstring>
        <name>XMC_SPI_CH_DisableEvent</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Protocol events which have to be disabled. Refer @ XMC_SPI_CH_EVENT_t for valid values. <bold>OR</bold> combinations of these enum item can be used as input.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the SPI protocol specific events, by configuring PCR register.<linebreak/>
<linebreak/>
After disabling the events, <ref refid="group___s_p_i_1ga91fef97e4d595f37fbfb60a4fd5624e4" kindref="member">XMC_SPI_CH_EnableEvent()</ref> has to be invoked to re-enable the events.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga91fef97e4d595f37fbfb60a4fd5624e4" kindref="member">XMC_SPI_CH_EnableEvent()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga76bad04e2d660078ce675baa6320f1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableFEM</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_DisableFEM</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Configure to disable the MSLS(Slave select signal) if the current data frame is considered as finished, by setting PCR.FEM bit.<linebreak/>
<linebreak/>
 When the last bit of a data word has been sent out and the transmit buffer TBUF does not contain new data, is considered as frame is ended and MSLS(Slave select signal) is disabled.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga50f619649550b90af1adfecb924ce0df" kindref="member">XMC_SPI_CH_EnableFEM()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="929" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="929" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gadf00d5c823846ca5c13f627baa541663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableInputInversion</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_INPUT_t input)</argsstring>
        <name>XMC_SPI_CH_DisableInputInversion</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI channel input stage.<linebreak/>
 Refer <ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref> for valid inputs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Disables the polarity inversion of input data signal, by clearing DXyCR.DPOL(where y = <emphasis>input</emphasis>).<linebreak/>
<linebreak/>
Resets the input data polarity. Invoke <ref refid="group___s_p_i_1ga68c629a48d4d82c08c1017a9c822deeb" kindref="member">XMC_SPI_CH_EnableInputInversion()</ref> to apply inversion.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga68c629a48d4d82c08c1017a9c822deeb" kindref="member">XMC_SPI_CH_EnableInputInversion()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1153" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1153" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gaeb85102d1ba6a3387e578819de6ccb9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableInterwordDelay</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_DisableInterwordDelay</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the delay after after each word, by clearing PCR.TIWEN bit.<linebreak/>
<linebreak/>
So the last data bit of a data word is directly followed by the first data bit of the next data word. If needed can be enabled by invoking <ref refid="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" kindref="member">XMC_SPI_CH_EnableInterwordDelay()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" kindref="member">XMC_SPI_CH_EnableInterwordDelay()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="825" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="825" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gac7bd8be53e17d3285fd8fc87ec2a50bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableMasterClock</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_DisableMasterClock</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the generation of Master clock by clearing PCR.MCLK bit.<linebreak/>
<linebreak/>
This clock can be enabled by invoking <ref refid="group___s_p_i_1gaf1bf70c8e262bdf3727e7bc2d21b578b" kindref="member">XMC_SPI_CH_EnableMasterClock()</ref> as needed in the program.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gaf1bf70c8e262bdf3727e7bc2d21b578b" kindref="member">XMC_SPI_CH_EnableMasterClock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="752" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="752" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga5b2480876aa7c3b1c9646156d015e398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableSlaveSelect</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_DisableSlaveSelect</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant ponter to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disable all the slave signals by clearing PCR.SELO bits.<linebreak/>
<linebreak/>
<ref refid="group___s_p_i_1ga065897e36db1bbcffe141ad992cea9ce" kindref="member">XMC_SPI_CH_EnableSlaveSelect()</ref> has to be invoked to start the communication with the desired slave again.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga065897e36db1bbcffe141ad992cea9ce" kindref="member">XMC_SPI_CH_EnableSlaveSelect()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gacb9748ed69822299ecb2a1488a3210e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableSlaveSelectCodedMode</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_DisableSlaveSelectCodedMode</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Each SELOx line (with x = 0-7) can be directly connected to an external slave device. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1310" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1310" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gac0243074b234e51bebab42c98a194a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_DisableSOF</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_DisableSOF</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Set the control of the handling start of frame through hardware, by clearing TCSR.SOF bit.<linebreak/>
<linebreak/>
Typically this can be disabled, where the transmission control is done by the hardware.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gad11bb01cc21d11bf8f7cfa0a1a2b8a46" kindref="member">XMC_SPI_CH_EnableSOF()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1033" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1033" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga9ed5d8b86f55dd5a64316392b90c661b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableDataTransmission</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_EnableDataTransmission</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant pointer to USIC channel handle of type <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> <linebreak/>
 <bold>Range:</bold> <ref refid="group___s_p_i_1gafbe409a89eb539dd5009c5f96ece7248" kindref="member">XMC_SPI0_CH0</ref>, <ref refid="group___s_p_i_1gaea0fc2e67a9745c9dded45de4b218095" kindref="member">XMC_SPI0_CH1</ref>,<ref refid="group___s_p_i_1ga51b74698dfc8082605bc0d5a7a478c50" kindref="member">XMC_SPI1_CH0</ref>,<ref refid="group___s_p_i_1gacd8b796500e98b94f045f57198e3d4ae" kindref="member">XMC_SPI1_CH1</ref>,<ref refid="group___s_p_i_1gad2f1be17c48106b2fde910c65ba36166" kindref="member">XMC_SPI2_CH0</ref>,<ref refid="group___s_p_i_1ga099781db3446d2d4b85863cb86247053" kindref="member">XMC_SPI2_CH1</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Availability of SPI1 and SPI2 depends on device selection </para>
</simplesect>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enable data transmission.<linebreak/>
<linebreak/>
Use this function in combination with <ref refid="group___s_p_i_1ga87d32f246cfd7eca010b38e90810277b" kindref="member">XMC_SPI_CH_DisableDataTransmission()</ref> to fill the FIFO and send the FIFO content without gaps in the transmission. FIFO is filled using <ref refid="group___u_s_i_c_1gae96e9afeaefe2585b687e36f6227727f" kindref="member">XMC_USIC_CH_TXFIFO_PutData()</ref>. </para>
</simplesect>
<simplesect kind="note"><para>If you need more control over the start of transmission use <ref refid="group___u_s_i_c_1ga3b02352ba5e94e8f79751dea304084e0" kindref="member">XMC_USIC_CH_SetStartTransmisionMode()</ref></para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga87d32f246cfd7eca010b38e90810277b" kindref="member">XMC_SPI_CH_DisableDataTransmission()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1330" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1330" bodyend="1333"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gab1fb0a57f619c0d1872482196399a443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableDelayCompensation</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_EnableDelayCompensation</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USIC channel handler of type <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> <linebreak/>
 <bold>Range:</bold> <ref refid="group___s_p_i_1gafbe409a89eb539dd5009c5f96ece7248" kindref="member">XMC_SPI0_CH0</ref>, <ref refid="group___s_p_i_1gaea0fc2e67a9745c9dded45de4b218095" kindref="member">XMC_SPI0_CH1</ref>,<ref refid="group___s_p_i_1ga51b74698dfc8082605bc0d5a7a478c50" kindref="member">XMC_SPI1_CH0</ref>,<ref refid="group___s_p_i_1gacd8b796500e98b94f045f57198e3d4ae" kindref="member">XMC_SPI1_CH1</ref>,<ref refid="group___s_p_i_1gad2f1be17c48106b2fde910c65ba36166" kindref="member">XMC_SPI2_CH0</ref>,<ref refid="group___s_p_i_1ga099781db3446d2d4b85863cb86247053" kindref="member">XMC_SPI2_CH1</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Availability of SPI1 and SPI2 depends on device selection </para>
</simplesect>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables delay compensation. <linebreak/>
<linebreak/>
 Delay compensation can be applied to the receive path. </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gac0b5cdd04a90124e347ba3ef897dc545" kindref="member">XMC_SPI_CH_DisableDelayCompensation()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1244" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1244" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gae37ff42efc15af1807458ff0a47053ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableEOF</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_EnableEOF</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configure the handling of end of frame through software, by setting TCSR.EOF bit.<linebreak/>
<linebreak/>
This can be used if the software handles the TBUF data without FIFO. If EOF is set, a valid content of the TBUF is considered as last word of a frame. After transfer of the last word, MSLS signal becomes inactive. For software handling of EOF bit, it is recommended to configure TCSR.WLEMD as 0. <linebreak/>
<bold>Note:</bold> The API should be called before putting the last data word of the frame to TBUF.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gaeb24e63f6664b519405dd75ca9d856fc" kindref="member">XMC_SPI_CH_DisableEOF()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1053" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1053" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga91fef97e4d595f37fbfb60a4fd5624e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableEvent</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint32_t event)</argsstring>
        <name>XMC_SPI_CH_EnableEvent</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>Protocol events which have to be enabled. Refer @ XMC_SPI_CH_EVENT_t for valid values. <bold>OR</bold> combinations of these enum items can be used as input.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the SPI protocol specific events, by configuring PCR register.<linebreak/>
<linebreak/>
Events can be enabled as needed using <ref refid="group___s_p_i_1ga91fef97e4d595f37fbfb60a4fd5624e4" kindref="member">XMC_SPI_CH_EnableEvent()</ref>. <ref refid="group___s_p_i_1ga8f3bb2759c5dc83f4df9674bc7521dfa" kindref="member">XMC_SPI_CH_DisableEvent()</ref> can be used to disable the events.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga8f3bb2759c5dc83f4df9674bc7521dfa" kindref="member">XMC_SPI_CH_DisableEvent()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="664" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga50f619649550b90af1adfecb924ce0df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableFEM</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_EnableFEM</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para></para>
</simplesect>
Configure to keep MSLS(Slave select signal) active even after finishing the current data frame, by setting PCR.FEM bit.<linebreak/>
<linebreak/>
This is typically used during the transmission of multi-data word frames, where there is possibility of delay in delivering the data. Frame end mode is enabled in <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref> during initialization. To disable <ref refid="group___s_p_i_1ga76bad04e2d660078ce675baa6320f1b7" kindref="member">XMC_SPI_CH_DisableFEM()</ref> can be invoked as needed in the program.</para>
<para><simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga76bad04e2d660078ce675baa6320f1b7" kindref="member">XMC_SPI_CH_DisableFEM()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="909" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga68c629a48d4d82c08c1017a9c822deeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableInputInversion</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_INPUT_t input)</argsstring>
        <name>XMC_SPI_CH_EnableInputInversion</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI channel input stage.<linebreak/>
 Refer <ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref> for valid inputs.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Enables the polarity inversion of input data signal, by setting DXyCR.DPOL(where y = <emphasis>input</emphasis>).<linebreak/>
<linebreak/>
This is not set in <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref>. Invoke <ref refid="group___s_p_i_1ga68c629a48d4d82c08c1017a9c822deeb" kindref="member">XMC_SPI_CH_EnableInputInversion()</ref> as needed later in the program. To disable the inversion <ref refid="group___s_p_i_1gadf00d5c823846ca5c13f627baa541663" kindref="member">XMC_SPI_CH_DisableInputInversion()</ref> can be invoked.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gadf00d5c823846ca5c13f627baa541663" kindref="member">XMC_SPI_CH_DisableInputInversion()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1133" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1133" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableInterwordDelay</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_EnableInterwordDelay</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the delay after each word, by setting PCR.TIWEN bit.<linebreak/>
<linebreak/>
The inter word delay starts at the end of last SCLK cycle of data word. During this time no clock pulses are generated and MSLS signal stays active. If inter word delay is not enabled, last data bit of a data word is directly followed by the first data bit of the next data word. This is not enabled in <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref>. To enable <ref refid="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" kindref="member">XMC_SPI_CH_EnableInterwordDelay()</ref> has to be invoked as needed in the program. And can be disabled by invoking <ref refid="group___s_p_i_1gaeb85102d1ba6a3387e578819de6ccb9d" kindref="member">XMC_SPI_CH_DisableInterwordDelay()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gaeb85102d1ba6a3387e578819de6ccb9d" kindref="member">XMC_SPI_CH_DisableInterwordDelay()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="807" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="807" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gaf1bf70c8e262bdf3727e7bc2d21b578b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableMasterClock</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_EnableMasterClock</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the generation of Master clock by setting PCR.MCLK bit.<linebreak/>
<linebreak/>
This clock can be used as a clock reference for external devices. This is not enabled during initialization in <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref>. Invoke <ref refid="group___s_p_i_1gaf1bf70c8e262bdf3727e7bc2d21b578b" kindref="member">XMC_SPI_CH_EnableMasterClock()</ref> to enable as needed in the program, or if it is disabled by <ref refid="group___s_p_i_1gac7bd8be53e17d3285fd8fc87ec2a50bd" kindref="member">XMC_SPI_CH_DisableMasterClock()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gac7bd8be53e17d3285fd8fc87ec2a50bd" kindref="member">XMC_SPI_CH_DisableMasterClock()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="735" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="735" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga065897e36db1bbcffe141ad992cea9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableSlaveSelect</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)</argsstring>
        <name>XMC_SPI_CH_EnableSlaveSelect</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1ga770391e79549c7df020fdd0f3864a808" kindref="member">XMC_SPI_CH_SLAVE_SELECT_t</ref></type>
          <declname>slave</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>slave</parametername>
</parameternamelist>
<parameterdescription>
<para>Slave select signal.<linebreak/>
 Refer <ref refid="group___s_p_i_1ga770391e79549c7df020fdd0f3864a808" kindref="member">XMC_SPI_CH_SLAVE_SELECT_t</ref> for valid values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enable the selected slave signal by setting PCR.SELO bits.<linebreak/>
<linebreak/>
Each slave is connected with one slave select signal. This is not configured in <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref>. Invoke <ref refid="group___s_p_i_1ga065897e36db1bbcffe141ad992cea9ce" kindref="member">XMC_SPI_CH_EnableSlaveSelect()</ref> with required <emphasis>slave</emphasis> to to start the communication. After finishing the communication <ref refid="group___s_p_i_1ga5b2480876aa7c3b1c9646156d015e398" kindref="member">XMC_SPI_CH_DisableSlaveSelect()</ref> can be invoked to disable the slaves.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga5b2480876aa7c3b1c9646156d015e398" kindref="member">XMC_SPI_CH_DisableSlaveSelect()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="518" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gaa1d508df7f014140bc929286ef63a9c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableSlaveSelectCodedMode</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_EnableSlaveSelectCodedMode</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>The SELOx lines (with x = 1-7) can be used as addresses for an external address decoder to increase the number of external slave devices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1296" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1296" bodyend="1300"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gad11bb01cc21d11bf8f7cfa0a1a2b8a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_EnableSOF</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_EnableSOF</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Configure the handling of start of frame through software, by setting TCSR.SOF bit.<linebreak/>
<linebreak/>
This can be used if the software handles the TBUF data without FIFO. If SOF is set, a valid content of the TBUF is considered as first word of a new frame by finishing the currently running frame. For software handling of SOF bit, it is recommended to configure TCSR.WLEMD as 0. This is not configured during initialization. <ref refid="group___s_p_i_1gad11bb01cc21d11bf8f7cfa0a1a2b8a46" kindref="member">XMC_SPI_CH_EnableSOF()</ref> can be called as needed in the program and can be disabled by <ref refid="group___s_p_i_1gac0243074b234e51bebab42c98a194a63" kindref="member">XMC_SPI_CH_DisableSOF()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gac0243074b234e51bebab42c98a194a63" kindref="member">XMC_SPI_CH_DisableSOF()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1016" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1016" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga55ae75a9f812ee0ed92303074e990f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t XMC_SPI_CH_GetReceivedData</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_GetReceivedData</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t Data read from the receive buffer.</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Reads data from the receive buffer based on the FIFO selection.<linebreak/>
<linebreak/>
Invocation of <ref refid="group___s_p_i_1gae797c93243d5ab6ad7c5b1de311d6a3c" kindref="member">XMC_SPI_CH_Receive()</ref> receives the data and place it into receive buffer. After receiving the data <ref refid="group___s_p_i_1ga55ae75a9f812ee0ed92303074e990f97" kindref="member">XMC_SPI_CH_GetReceivedData()</ref> can be used to read the data from the buffer.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gae797c93243d5ab6ad7c5b1de311d6a3c" kindref="member">XMC_SPI_CH_Receive()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="610" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga16747654a19c5dcef00d7f7e61d14f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_SPI_CH_GetStatusFlag</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_GetStatusFlag</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Status of SPI protocol events.</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Returns the status of the events, by reading PSR register.<linebreak/>
<linebreak/>
This indicates the status of the all the events, for SPI communication.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga2a54f046194eee8c765c8c4ff4af73ed" kindref="member">XMC_SPI_CH_ClearStatusFlag()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="695" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="695" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_Init</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)</argsstring>
        <name>XMC_SPI_CH_Init</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___s_p_i___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_SPI_CH_CONFIG_t</ref> *const</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to constant SPI channel configuration data structure.<linebreak/>
 Refer data structure <ref refid="struct_x_m_c___s_p_i___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_SPI_CH_CONFIG_t</ref> for detail.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Initializes the selected SPI <emphasis>channel</emphasis> with the <emphasis>config</emphasis> structure.<linebreak/>
<linebreak/>
Enable SPI channel by calling <ref refid="group___u_s_i_c_1ga0567321036170adb335fef9b36dc3b71" kindref="member">XMC_USIC_CH_Enable()</ref> and then configures <itemizedlist>
<listitem>
<para>Baudrate, </para>
</listitem>
<listitem>
<para>Passive data level as active high, </para>
</listitem>
<listitem>
<para>Shift control signal as active high, </para>
</listitem>
<listitem>
<para>Frame length as 64U, </para>
</listitem>
<listitem>
<para>Word length as 8U, </para>
</listitem>
<listitem>
<para>Enable Hardware port control mode, </para>
</listitem>
<listitem>
<para>Enable transmission of data TDV(Transmit data valid) bit is set to 1, </para>
</listitem>
<listitem>
<para>Enable invalidation of data in TBUF once loaded into shift register, </para>
</listitem>
<listitem>
<para>Parity mode settings </para>
</listitem>
</itemizedlist>
And if master mode is selected, <itemizedlist>
<listitem>
<para>Enables MSLS signal generation, </para>
</listitem>
<listitem>
<para>configures slave selection as normal mode, </para>
</listitem>
<listitem>
<para>Set polarity for the Slave signal, </para>
</listitem>
<listitem>
<para>Enable Frame end mode(MSLS signal is kept active after transmission of a frame) </para>
</listitem>
</itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="428" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gaf75ad720e31d94b96f1811e47c7e7559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_InitEx</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)</argsstring>
        <name>XMC_SPI_CH_InitEx</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="struct_x_m_c___s_p_i___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_SPI_CH_CONFIG_t</ref> *const</type>
          <declname>config</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>init_brg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to constant SPI channel configuration data structure.<linebreak/>
 Refer data structure <ref refid="struct_x_m_c___s_p_i___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_SPI_CH_CONFIG_t</ref> for detail. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_brg</parametername>
</parameternamelist>
<parameterdescription>
<para>Selects if the baudrate generator should be configured automatically.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Initializes the selected SPI <emphasis>channel</emphasis> with the <emphasis>config</emphasis> structure.<linebreak/>
<linebreak/>
Enable SPI channel by calling <ref refid="group___u_s_i_c_1ga0567321036170adb335fef9b36dc3b71" kindref="member">XMC_USIC_CH_Enable()</ref> and then configures <itemizedlist>
<listitem>
<para>Baudrate, </para>
</listitem>
<listitem>
<para>Passive data level as active high, </para>
</listitem>
<listitem>
<para>Shift control signal as active high, </para>
</listitem>
<listitem>
<para>Frame length as 64U, </para>
</listitem>
<listitem>
<para>Word length as 8U, </para>
</listitem>
<listitem>
<para>Enable Hardware port control mode, </para>
</listitem>
<listitem>
<para>Enable transmission of data TDV(Transmit data valid) bit is set to 1, </para>
</listitem>
<listitem>
<para>Enable invalidation of data in TBUF once loaded into shift register, </para>
</listitem>
<listitem>
<para>Parity mode settings </para>
</listitem>
</itemizedlist>
And if master mode is selected, <itemizedlist>
<listitem>
<para>Enables MSLS signal generation, </para>
</listitem>
<listitem>
<para>configures slave selection as normal mode, </para>
</listitem>
<listitem>
<para>Set polarity for the Slave signal, </para>
</listitem>
<listitem>
<para>Enable Frame end mode(MSLS signal is kept active after transmission of a frame) </para>
</listitem>
</itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gae797c93243d5ab6ad7c5b1de311d6a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_Receive</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)</argsstring>
        <name>XMC_SPI_CH_Receive</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Communication mode of the SPI, based on this mode TCI(Transmit control information)is updated.<linebreak/>
 Refer <ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref> for valid values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.<linebreak/>
<linebreak/>
<ref refid="group___s_p_i_1gae797c93243d5ab6ad7c5b1de311d6a3c" kindref="member">XMC_SPI_CH_Receive()</ref> receives the data and places it into buffer based on the FIFO selection. After reception of data <ref refid="group___s_p_i_1ga55ae75a9f812ee0ed92303074e990f97" kindref="member">XMC_SPI_CH_GetReceivedData()</ref> can be invoked to read the data from the buffers.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>XMC_SPI_CH_GetReceivedDaa() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="591" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="591" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga4a6b621ddf701529b5256181d40bbdac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SelectInterruptNodePointer</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_INTERRUPT_NODE_POINTER_t interrupt_node, const uint32_t service_request)</argsstring>
        <name>XMC_SPI_CH_SelectInterruptNodePointer</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1ga6396e4407b48373dd88ce24c1e229635" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_t</ref></type>
          <declname>interrupt_node</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>service_request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USIC channel handler of type <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> <linebreak/>
 <bold>Range:</bold> <ref refid="group___s_p_i_1gafbe409a89eb539dd5009c5f96ece7248" kindref="member">XMC_SPI0_CH0</ref>, <ref refid="group___s_p_i_1gaea0fc2e67a9745c9dded45de4b218095" kindref="member">XMC_SPI0_CH1</ref>,<ref refid="group___s_p_i_1ga51b74698dfc8082605bc0d5a7a478c50" kindref="member">XMC_SPI1_CH0</ref>,<ref refid="group___s_p_i_1gacd8b796500e98b94f045f57198e3d4ae" kindref="member">XMC_SPI1_CH1</ref>,<ref refid="group___s_p_i_1gad2f1be17c48106b2fde910c65ba36166" kindref="member">XMC_SPI2_CH0</ref>,<ref refid="group___s_p_i_1ga099781db3446d2d4b85863cb86247053" kindref="member">XMC_SPI2_CH1</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Availability of SPI1 and SPI2 depends on device selection </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interrupt_node</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt node pointer to be configured. <linebreak/>
 <bold>Range:</bold> <ref refid="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635adbf85c1c2d8fef17554d399c4d3ffd77" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT</ref>, <ref refid="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635acef45b4e93a44535a1e05154d5078b9a" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER</ref> etc. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>service_request</parametername>
</parameternamelist>
<parameterdescription>
<para>Service request number.<linebreak/>
 <bold>Range:</bold> 0 to 5. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Sets the interrupt node for USIC channel events. <linebreak/>
<linebreak/>
For an event to generate interrupt, node pointer should be configured with service request(SR0, SR1..SR5). The NVIC node gets linked to the interrupt event by doing so.<linebreak/>
 Note: NVIC node should be separately enabled to generate the interrupt.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga91fef97e4d595f37fbfb60a4fd5624e4" kindref="member">XMC_SPI_CH_EnableEvent()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1204" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1204" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga41fd386bd95f41b0274c4fd162b1a539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_p_i_1ga3f497bc1a5457fddd4f5e57f30c3531d" kindref="member">XMC_SPI_CH_STATUS_t</ref></type>
        <definition>XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint32_t rate)</argsstring>
        <name>XMC_SPI_CH_SetBaudrate</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus speed in bits per second</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is processed. <linebreak/>
 XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. <linebreak/>
 XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the bus speed in bits per second</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref>, <ref refid="group___s_p_i_1ga7fd532dae41a2b9d754aa3de0f412a8d" kindref="member">XMC_SPI_CH_Stop()</ref>, <ref refid="group___u_s_i_c_1gadde84d71507e50a2c49eba8040480abf" kindref="member">XMC_USIC_CH_GetSCLKFrequency()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gab70defd631cb9e9210f779fedce93efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_p_i_1ga3f497bc1a5457fddd4f5e57f30c3531d" kindref="member">XMC_SPI_CH_STATUS_t</ref></type>
        <definition>XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrateEx</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint32_t rate, bool normal_divider_mode)</argsstring>
        <name>XMC_SPI_CH_SetBaudrateEx</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>rate</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>normal_divider_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus speed in bits per second </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normal_divider_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Selects normal divider mode for baudrate generator instead of default fractional divider decreasing jitter of signal at the cost of frequency selection</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is processed. <linebreak/>
 XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. <linebreak/>
 XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the bus speed in bits per second</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref>, <ref refid="group___s_p_i_1ga7fd532dae41a2b9d754aa3de0f412a8d" kindref="member">XMC_SPI_CH_Stop()</ref>, <ref refid="group___u_s_i_c_1gadde84d71507e50a2c49eba8040480abf" kindref="member">XMC_USIC_CH_GetSCLKFrequency()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="500" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga72ca69c5bc68803067ff496538ff5f02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetBitOrderLsbFirst</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_SetBitOrderLsbFirst</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.<linebreak/>
<linebreak/>
This is typically based on the slave settings. Invoke <ref refid="group___s_p_i_1ga72ca69c5bc68803067ff496538ff5f02" kindref="member">XMC_SPI_CH_SetBitOrderLsbFirst()</ref> to set direction as needed in the program.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga8f4bbed2c9583c7a454951c83acbe646" kindref="member">XMC_SPI_CH_SetBitOrderMsbFirst()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="625" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="625" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga8f4bbed2c9583c7a454951c83acbe646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetBitOrderMsbFirst</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_SetBitOrderMsbFirst</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.<linebreak/>
<linebreak/>
This is typically based on the slave settings. This is not set during <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref>. Invoke <ref refid="group___s_p_i_1ga8f4bbed2c9583c7a454951c83acbe646" kindref="member">XMC_SPI_CH_SetBitOrderMsbFirst()</ref> to set direction as needed in the program.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga72ca69c5bc68803067ff496538ff5f02" kindref="member">XMC_SPI_CH_SetBitOrderLsbFirst()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="643" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="643" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gaedb545863be3b85d6b2ec51503926432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetFrameLength</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint8_t frame_length)</argsstring>
        <name>XMC_SPI_CH_SetFrameLength</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>frame_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits in a frame. <linebreak/>
 <bold>Range:</bold> 1 to 64. If the value 64 is configured, then the frame does not automatically end. User should explicitly end the frame.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Define the data frame length.<linebreak/>
<linebreak/>
Set the number of bits to be serially transmitted in a frame. The frame length should be multiples of word length. If the value is set to 64, the frame does not automatically end. Use <ref refid="group___s_p_i_1ga5b2480876aa7c3b1c9646156d015e398" kindref="member">XMC_SPI_CH_DisableSlaveSelect()</ref> to end the frame after all the data is transmitted.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___u_s_i_c_1gabb9d02b8388a03cd28190c976cdb8b78" kindref="member">XMC_USIC_CH_SetWordLength()</ref>, <ref refid="group___u_s_i_c_1gaf1d2b03bb1350dfc628f0bfa9fb6ffb0" kindref="member">XMC_USIC_CH_EnableFrameLengthControl()</ref>, <ref refid="group___s_p_i_1ga5b2480876aa7c3b1c9646156d015e398" kindref="member">XMC_SPI_CH_DisableSlaveSelect()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="996" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="996" bodyend="999"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gab5800f69155c1ecadedf587fd567e2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetInputSource</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_INPUT_t input, const uint8_t source)</argsstring>
        <name>XMC_SPI_CH_SetInputSource</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref></type>
          <declname>input</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>SPI channel input stage.<linebreak/>
 Refer <ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref> for valid values </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>Input source select for the input stage. Range : [0 to 7]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Selects the data source for SPI input stage, by configuring DXCR.DSEL bits.<linebreak/>
<linebreak/>
Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be used for all the input stages like DX0CR, DX1CR etc. This is not done during initialization. This has to be configured before starting the SPI communication. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1090" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1090" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga14b1f10c37e326b76cd214f7c006add2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetInterruptNodePointer</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint8_t service_request)</argsstring>
        <name>XMC_SPI_CH_SetInterruptNodePointer</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>service_request</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>service_request</parametername>
</parameternamelist>
<parameterdescription>
<para>Service request number. Range: [0 to 5]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Sets the interrupt node for SPI channel events.<linebreak/>
<linebreak/>
For an event to generate interrupt, node pointer should be configured with service request(SR0, SR1..SR5). The NVIC node gets linked to the interrupt event by doing so. This is not configured in <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref> during initialization.</para>
</simplesect>
<simplesect kind="par"><title>Note::</title><para><orderedlist>
<listitem><para>NVIC node should be separately enabled to generate the interrupt.</para>
</listitem></orderedlist>
</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___u_s_i_c_1ga6f9467a0f290d65f7292b45cc29e32b4" kindref="member">XMC_USIC_CH_EnableEvent()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1178" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1178" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga3902d15aaff83cbce1d0d9b252183ef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetInterwordDelay</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, uint32_t tinterword_delay_ns)</argsstring>
        <name>XMC_SPI_CH_SetInterwordDelay</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>tinterword_delay_ns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tinterword_delay_ns</parametername>
</parameternamelist>
<parameterdescription>
<para>delay in terms of nano seconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the inter word delay by setting PCR.PCTQ1, PCR.DCTQ1 bit fields.<linebreak/>
<linebreak/>
The inter word delay is dependent on the peripheral clock. The maximum possible value is calculated by using the below formula<linebreak/>
 Maximum inter word delay = ((1 + PCTQ1_max)(1 + DCTQ1_max)) / peripheral clock<linebreak/>
 where PCTQ1_max = 3 and DCTQ1_max = 31<linebreak/>
After configuring the inter word delay, this has to be enabled by invoking <ref refid="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" kindref="member">XMC_SPI_CH_EnableInterwordDelay()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" kindref="member">XMC_SPI_CH_EnableInterwordDelay()</ref>,<ref refid="group___s_p_i_1ga5ebec7e4e0641a615e9a98ccb11ada78" kindref="member">XMC_SPI_CH_SetInterwordDelaySCLK()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="847" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga5ebec7e4e0641a615e9a98ccb11ada78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetInterwordDelaySCLK</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, uint32_t sclk_period)</argsstring>
        <name>XMC_SPI_CH_SetInterwordDelaySCLK</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sclk_period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sclk_period</parametername>
</parameternamelist>
<parameterdescription>
<para>in terms of clk cycles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the inter word delay by setting PCR.DCTQ1 bit fields.<linebreak/>
<linebreak/>
This delay is dependent on the peripheral clock. The maximum possible value supported by this API is 32 clock cycles. After configuring the inter word delay, this has to be enabled by invoking <ref refid="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" kindref="member">XMC_SPI_CH_EnableInterwordDelay()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" kindref="member">XMC_SPI_CH_EnableInterwordDelay()</ref>,<ref refid="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" kindref="member">XMC_SPI_CH_EnableInterwordDelay()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="864" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="864" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga916c987f6fafac74e740c6b626f37a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetSlaveSelectDelay</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, uint32_t sclk_period)</argsstring>
        <name>XMC_SPI_CH_SetSlaveSelectDelay</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sclk_period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sclk_period</parametername>
</parameternamelist>
<parameterdescription>
<para>delay in terms of sclk clock cycles.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Configures the leading/trailing delay by setting BRG.DCTQ bit field.<linebreak/>
<linebreak/>
This delay is dependent on the peripheral clock. The maximum possible value supported by this API is 30 clock cycles. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="885" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="885" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga6c327beee42bdb3d24865f1bc19376d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetSlaveSelectPolarity</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t selo_inversion)</argsstring>
        <name>XMC_SPI_CH_SetSlaveSelectPolarity</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1ga01a43390cf6218a5f16976f0b6027096" kindref="member">XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t</ref></type>
          <declname>selo_inversion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selo_inversion</parametername>
</parameternamelist>
<parameterdescription>
<para>Polarity of the slave select signal relative to the MSLS signal.<linebreak/>
 Refer <ref refid="group___s_p_i_1ga01a43390cf6218a5f16976f0b6027096" kindref="member">XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t</ref> for valid values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Set the polarity of the slave select signal, by configuring PCR.SELINV bit.<linebreak/>
<linebreak/>
Normally MSLS signal is active low level signal. SO based on the slave inversion has to be applied. This is configured in <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref> during initialization. Invoke <ref refid="group___s_p_i_1ga6c327beee42bdb3d24865f1bc19376d8" kindref="member">XMC_SPI_CH_SetSlaveSelectPolarity()</ref> with desired settings as needed later in the program. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1111" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1111" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1gabef8a168c4d9d5e229fd04ae66a92ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetTransmitMode</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)</argsstring>
        <name>XMC_SPI_CH_SetTransmitMode</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Communication mode of the SPI, based on this mode TCI(Transmit control information)is updated.<linebreak/>
 Refer <ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref> for valid values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>In Dual and Quad modes, hardware port control(CCR.HPCEN) mode is enabled. <linebreak/>
<linebreak/>
By enabling this the direction of the data pin is updated by hardware itself. Before transmitting the data set the mode to ensure the proper communication.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga273573d7d388e93ff9018ff87abe9dc0" kindref="member">XMC_SPI_CH_Transmit()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="549" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="549" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga874157094bd9b28c5a5493eee577df72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_SetWordLength</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint8_t word_length)</argsstring>
        <name>XMC_SPI_CH_SetWordLength</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>word_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>word_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits to be configured for a data word. <linebreak/>
 <bold>Range:</bold> 1 to 16.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Defines the data word length.<linebreak/>
<linebreak/>
Sets the number of bits to represent a data word. Frame length should be a multiple of word length.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gaedb545863be3b85d6b2ec51503926432" kindref="member">XMC_SPI_CH_SetFrameLength()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="973" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="973" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga4e3869696f61ef196fd2ea66a667bb0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_Start</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_Start</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Set the selected USIC channel to operate in SPI mode, by setting CCR.MODE bits.<linebreak/>
<linebreak/>
It should be executed after <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref> during initialization. By invoking <ref refid="group___s_p_i_1ga7fd532dae41a2b9d754aa3de0f412a8d" kindref="member">XMC_SPI_CH_Stop()</ref>, the MODE is set to IDLE state. Call <ref refid="group___s_p_i_1ga4e3869696f61ef196fd2ea66a667bb0e" kindref="member">XMC_SPI_CH_Start()</ref> to set the SPI mode again, as needed later in the program.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref>, <ref refid="group___s_p_i_1ga7fd532dae41a2b9d754aa3de0f412a8d" kindref="member">XMC_SPI_CH_Stop()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="446" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="446" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga7fd532dae41a2b9d754aa3de0f412a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___s_p_i_1ga3f497bc1a5457fddd4f5e57f30c3531d" kindref="member">XMC_SPI_CH_STATUS_t</ref></type>
        <definition>XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop</definition>
        <argsstring>(XMC_USIC_CH_t *const channel)</argsstring>
        <name>XMC_SPI_CH_Stop</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for stopping is processed. <linebreak/>
 XMC_SPI_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. <linebreak/>
 XMC_SPI_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Set the selected SPI channel to IDLE mode, by clearing CCR.MODE bits.<linebreak/>
<linebreak/>
After calling XMC_SPI_CH_Stop, channel is IDLE mode. So no communication is supported. <ref refid="group___s_p_i_1ga4e3869696f61ef196fd2ea66a667bb0e" kindref="member">XMC_SPI_CH_Start()</ref> has to be invoked to start the communication again.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga4e3869696f61ef196fd2ea66a667bb0e" kindref="member">XMC_SPI_CH_Start()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="467" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga273573d7d388e93ff9018ff87abe9dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_Transmit</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)</argsstring>
        <name>XMC_SPI_CH_Transmit</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>A constant pointer to <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref>, pointing to the USIC channel base address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Data to be transmitted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Communication mode of the SPI, based on this mode TCI(Transmit control information)is updated.<linebreak/>
 Refer <ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref> for valid values.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the proper mode.<linebreak/>
<linebreak/>
In Dual and Quad modes, hardware port control(CCR.HPCEN) mode is enabled. By enabling this the direction of the data pin is updated by hardware itself. TCI(Transmit Control Information) allows dynamic control of both the data shift mode and pin direction during data transfers by writing to SCTR.DSM and SCTR.HPCDIR bit fields. To support this auto update, TCSR.HPCMD(Hardware Port control) will be enabled during the initialization using <ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init()</ref> for all modes.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1gae797c93243d5ab6ad7c5b1de311d6a3c" kindref="member">XMC_SPI_CH_Receive()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="574" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i_1ga69901d79102b4efda87bc822b0d1e5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_SPI_CH_TriggerServiceRequest</definition>
        <argsstring>(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)</argsstring>
        <name>XMC_SPI_CH_TriggerServiceRequest</name>
        <param>
          <type><ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> *const</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>service_request_line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to USIC channel handler of type <ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref> <linebreak/>
 <bold>Range:</bold> <ref refid="group___s_p_i_1gafbe409a89eb539dd5009c5f96ece7248" kindref="member">XMC_SPI0_CH0</ref>, <ref refid="group___s_p_i_1gaea0fc2e67a9745c9dded45de4b218095" kindref="member">XMC_SPI0_CH1</ref>,<ref refid="group___s_p_i_1ga51b74698dfc8082605bc0d5a7a478c50" kindref="member">XMC_SPI1_CH0</ref>,<ref refid="group___s_p_i_1gacd8b796500e98b94f045f57198e3d4ae" kindref="member">XMC_SPI1_CH1</ref>,<ref refid="group___s_p_i_1gad2f1be17c48106b2fde910c65ba36166" kindref="member">XMC_SPI2_CH0</ref>,<ref refid="group___s_p_i_1ga099781db3446d2d4b85863cb86247053" kindref="member">XMC_SPI2_CH1</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Availability of SPI1 and SPI2 depends on device selection </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>service_request_line</parametername>
</parameternamelist>
<parameterdescription>
<para>service request number of the event to be triggered. <linebreak/>
 <bold>Range:</bold> 0 to 5. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description</title><para>Trigger a SPI interrupt service request.<linebreak/>
<linebreak/>
When the SPI service request is triggered, the NVIC interrupt associated with it will be generated if enabled.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___s_p_i_1ga4a6b621ddf701529b5256181d40bbdac" kindref="member">XMC_SPI_CH_SelectInterruptNodePointer()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" line="1227" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h" bodystart="1227" bodyend="1230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="date"><para>2020-12-05 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="95"><highlight class="preprocessor">#ifndef<sp/>XMC_SPI_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_SPI_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************************************************************</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>HEADER<sp/>FILES</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;xmc_usic.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">/***********************************************************************************************************************</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>MACROS</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>**********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USIC0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_SPI0_CH0<sp/>XMC_USIC0_CH0<sp/></highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor">#define<sp/>XMC_SPI0_CH1<sp/>XMC_USIC0_CH1<sp/></highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USIC1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_SPI1_CH0<sp/>XMC_USIC1_CH0<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor">#define<sp/>XMC_SPI1_CH1<sp/>XMC_USIC1_CH1<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USIC2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMC_SPI2_CH0<sp/>XMC_USIC2_CH0<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor">#define<sp/>XMC_SPI2_CH1<sp/>XMC_USIC2_CH1<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************************************************************</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>ENUMS</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>***********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_STATUS</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga3f497bc1a5457fddd4f5e57f30c3531dad6241ca094413611b4054d3222e58339" kindref="member">XMC_SPI_CH_STATUS_OK</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga3f497bc1a5457fddd4f5e57f30c3531da9d3531bfa6a78a7e74c58be3decf9440" kindref="member">XMC_SPI_CH_STATUS_ERROR</ref>,<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga3f497bc1a5457fddd4f5e57f30c3531dac122b8021103d9d5807eaa51bb63b876" kindref="member">XMC_SPI_CH_STATUS_BUSY</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga3f497bc1a5457fddd4f5e57f30c3531d" kindref="member">XMC_SPI_CH_STATUS_t</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_BUS_MODE</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1ggaaf40703e598cf0bd196246cc048dda10a6535e33ac253d974dbdade07b9bdc6d5" kindref="member">XMC_SPI_CH_BUS_MODE_MASTER</ref>,<sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1ggaaf40703e598cf0bd196246cc048dda10a6ded2d0050c88da873e2cfc0167d3e54" kindref="member">XMC_SPI_CH_BUS_MODE_SLAVE</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1gaaf40703e598cf0bd196246cc048dda10" kindref="member">XMC_SPI_CH_BUS_MODE_t</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_SLAVE_SEL_MSLS_INV</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga01a43390cf6218a5f16976f0b6027096a2d4df93fa0c9ae9bb7bc2050372d4150" kindref="member">XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS</ref><sp/>=<sp/>0x0UL,<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga01a43390cf6218a5f16976f0b6027096aa7c8920fcfd744c9236533eba2e87391" kindref="member">XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS</ref><sp/>=<sp/>0x1UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_SELINV_Pos<sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga01a43390cf6218a5f16976f0b6027096" kindref="member">XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_DATA_POLARITY</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga3d2e9e07d36e47a2840855c7761f3d2fa07561a103212e36eb152fad4c6e0bc09" kindref="member">XMC_SPI_CH_DATA_POLARITY_DIRECT</ref><sp/>=<sp/>0x0UL,<sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga3d2e9e07d36e47a2840855c7761f3d2fad4dced7ef4a2819a36fabb92a24a160b" kindref="member">XMC_SPI_CH_DATA_POLARITY_INVERT</ref><sp/>=<sp/>0x1UL<sp/>&lt;&lt;<sp/>USIC_CH_DX2CR_DPOL_Pos<sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga3d2e9e07d36e47a2840855c7761f3d2f" kindref="member">XMC_SPI_CH_DATA_POLARITY_t</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_SLAVE_SELECT</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a00be0d2c599ae2957bd0fed44fb88855" kindref="member">XMC_SPI_CH_SLAVE_SELECT_0</ref><sp/>=<sp/>1UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_SELO_Pos,<sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a2690a4c89d59b73f382c5139ee3c7536" kindref="member">XMC_SPI_CH_SLAVE_SELECT_1</ref><sp/>=<sp/>2UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_SELO_Pos,<sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808af0bcf851c8a1b519dbc76693489288df" kindref="member">XMC_SPI_CH_SLAVE_SELECT_2</ref><sp/>=<sp/>4UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_SELO_Pos,<sp/><sp/></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a6db85b62c5780f013bab00d3cf3e01a3" kindref="member">XMC_SPI_CH_SLAVE_SELECT_3</ref><sp/>=<sp/>8UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_SELO_Pos,<sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a1c8340b08676a487e080a6f9af45a548" kindref="member">XMC_SPI_CH_SLAVE_SELECT_4</ref><sp/>=<sp/>16UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_SELO_Pos,<sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a53320f8b59200bf61ced7b50266e11f4" kindref="member">XMC_SPI_CH_SLAVE_SELECT_5</ref><sp/>=<sp/>32UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_SELO_Pos,<sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a9c659e80688ec34014de2a9bcbb2a879" kindref="member">XMC_SPI_CH_SLAVE_SELECT_6</ref><sp/>=<sp/>64UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_SELO_Pos,<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga770391e79549c7df020fdd0f3864a808a13b1ba1e6096ae777c0e0bd6428ba4fa" kindref="member">XMC_SPI_CH_SLAVE_SELECT_7</ref><sp/>=<sp/>128UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_SELO_Pos<sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga770391e79549c7df020fdd0f3864a808" kindref="member">XMC_SPI_CH_SLAVE_SELECT_t</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_EVENT</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba4b9fc48875e84294585b5b62cd5faea3" kindref="member">XMC_SPI_CH_EVENT_RECEIVE_START</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USIC_CH_CCR_RSIEN_Msk,<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba45328c5bfb41c4fa0d7fc47e51640c6d" kindref="member">XMC_SPI_CH_EVENT_DATA_LOST</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USIC_CH_CCR_DLIEN_Msk,<sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dbadd8d1e2334f16528a036b045c0c9eefc" kindref="member">XMC_SPI_CH_EVENT_TRANSMIT_SHIFT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USIC_CH_CCR_TSIEN_Msk,<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dbaf08fec199ecb9705918d10cdb24ed446" kindref="member">XMC_SPI_CH_EVENT_TRANSMIT_BUFFER</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>USIC_CH_CCR_TBIEN_Msk,<sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba0accbca5448646b799940028bd294fe8" kindref="member">XMC_SPI_CH_EVENT_STANDARD_RECEIVE</ref><sp/><sp/><sp/><sp/>=<sp/>USIC_CH_CCR_RIEN_Msk,<sp/><sp/></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba1b751bd9beb2fcbcaaf6afd59ced9b94" kindref="member">XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE</ref><sp/>=<sp/>USIC_CH_CCR_AIEN_Msk,<sp/><sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba33d6fbed5535423f89e0413eb7f0ff34" kindref="member">XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR</ref><sp/>=<sp/>USIC_CH_CCR_BRGIEN_Msk,<sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dbaeccd57639b56f8276d0cf3d4ff23285e" kindref="member">XMC_SPI_CH_EVENT_PARITY_ERROR</ref><sp/>=<sp/>USIC_CH_PCR_SSCMode_PARIEN_Msk<sp/>&gt;&gt;<sp/>13U,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dba9957b6f9ec5e89ec4fe744ca9b85cb9a" kindref="member">XMC_SPI_CH_EVENT_MSLS_CHANGE</ref><sp/>=<sp/><sp/>USIC_CH_PCR_SSCMode_MSLSIEN_Msk<sp/>&gt;&gt;<sp/>13U,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7cf84a07d3e3970c1b09369fcf3c12dbab0ccd895a632344bf17ad5003af08965" kindref="member">XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED</ref><sp/>=<sp/>USIC_CH_PCR_SSCMode_DX2TIEN_Msk<sp/>&gt;&gt;<sp/>13U<sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga7cf84a07d3e3970c1b09369fcf3c12db" kindref="member">XMC_SPI_CH_EVENT_t</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_STATUS_FLAG</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a8eca08cb355c692a598c0dae8c8dc9f1" kindref="member">XMC_SPI_CH_STATUS_FLAG_MSLS</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_MSLS_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a2a5bf5f0e3d29181560104b7d1ede1ad" kindref="member">XMC_SPI_CH_STATUS_FLAG_DX2S</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_DX2S_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762aa64256e3a419a6e5e78af40b13b06c07" kindref="member">XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_MSLSEV_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a6f535a37e10de454228ad80aa61186be" kindref="member">XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_DX2TEV_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a5f02c5c437155e4305b61e31e858767f" kindref="member">XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_PARERR_Msk,<sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762aebb0f539334bf93e7956a471bfbd13af" kindref="member">XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_RSIF_Msk,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a08c7ad534bb131f741d313d7ea28cbe3" kindref="member">XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_DLIF_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762af609b97f1e6ea2c118c0b4d3682090d0" kindref="member">XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_TSIF_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a7054d7d1cc298711c1dd27b6ddc5c2f5" kindref="member">XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_TBIF_Msk,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762aebbab80c5922351320b1e1948633c27a" kindref="member">XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_RIF_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a1d9c5c5eb3ac18540acb5c58fb8b126a" kindref="member">XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_AIF_Msk,<sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga7c2761994b910b3e09b6373448a90762a8cece74a4527cac93aa69b958bb81309" kindref="member">XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION</ref><sp/>=<sp/>USIC_CH_PSR_SSCMode_BRGIF_Msk</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga7c2761994b910b3e09b6373448a90762" kindref="member">XMC_SPI_CH_STATUS_FLAG_t</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga52dd53cd4c107af8f6d72c6c6a011886a58b64a73bcb7179ea3154579254725c2" kindref="member">XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV</ref><sp/>=<sp/>0x0UL,<sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga52dd53cd4c107af8f6d72c6c6a011886aae8eded70ac9defd6fa10321482aecda" kindref="member">XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP</ref><sp/><sp/>=<sp/>0x1UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_CTQSEL1_Pos,<sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga52dd53cd4c107af8f6d72c6c6a011886a0c2051effe9ccca3dcd9f959874c4d36" kindref="member">XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK</ref><sp/>=<sp/>0x2UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_CTQSEL1_Pos,<sp/></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga52dd53cd4c107af8f6d72c6c6a011886ad52df965918f9e56f530f872ed792d02" kindref="member">XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK</ref><sp/>=<sp/>0x3UL<sp/>&lt;&lt;<sp/>USIC_CH_PCR_SSCMode_CTQSEL1_Pos<sp/><sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga52dd53cd4c107af8f6d72c6c6a011886" kindref="member">XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t</ref>;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_INPUT</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fa3730321c216c06c0ae39693e68786d4c" kindref="member">XMC_SPI_CH_INPUT_DIN0</ref><sp/>=<sp/>0UL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fa5b0aed31501650341a5710a8db35b40a" kindref="member">XMC_SPI_CH_INPUT_SLAVE_SCLKIN</ref><sp/>=<sp/>1UL,<sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fa96fe102aaf89df811f501ca34f3967a0" kindref="member">XMC_SPI_CH_INPUT_SLAVE_SELIN</ref><sp/>=<sp/>2UL,<sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fa32f593df13abbed01017df7ea1cd9b11" kindref="member">XMC_SPI_CH_INPUT_DIN1</ref><sp/>=<sp/>3UL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fad7d757c2e37f1d9678ee76c5ac58cd9b" kindref="member">XMC_SPI_CH_INPUT_DIN2</ref><sp/>=<sp/>4UL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga5e1e7ef1aea059d58462c59b0fd75f8fadce039080e9a2e2795af411defb8a17e" kindref="member">XMC_SPI_CH_INPUT_DIN3</ref><sp/>=<sp/>5UL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_MODE</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga9dabbd3f51646f95b0719bf82c69c38fa7ed5131d8a7ba77370debe459420e79a" kindref="member">XMC_SPI_CH_MODE_STANDARD</ref><sp/>=<sp/>0UL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga9dabbd3f51646f95b0719bf82c69c38fa17c7eb1a23dd44233a32bc40e1d91d7b" kindref="member">XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX</ref><sp/>=<sp/>5UL,<sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga9dabbd3f51646f95b0719bf82c69c38fa4c0d92f4303e350e8f221bd870ea5855" kindref="member">XMC_SPI_CH_MODE_DUAL</ref><sp/>=<sp/>6UL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga9dabbd3f51646f95b0719bf82c69c38fa3e0c7cf3a25d8091075bafaac56109b2" kindref="member">XMC_SPI_CH_MODE_QUAD</ref><sp/>=<sp/>7UL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="285"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4a60da59e367df81e02204c193307c7543" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED</ref><sp/>=<sp/><ref refid="group___u_s_i_c_1ggaabdebf7dc81a008ca887ab0336f9b3dea73b5e738a2fbe968b46ea6aae3466956" kindref="member">XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED</ref>,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4adba7c97cc13e382c36fb79a927ba779d" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED</ref><sp/>=<sp/><ref refid="group___u_s_i_c_1ggaabdebf7dc81a008ca887ab0336f9b3deaf4a7841504a26dfd70873f1962f5ba89" kindref="member">XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED</ref>,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4a5d8efe2fd3be3cbb88685afcfc7f4e04" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED</ref><sp/><sp/>=<sp/><ref refid="group___u_s_i_c_1ggaabdebf7dc81a008ca887ab0336f9b3deabb31d132a979405f51e7a6ab44071f46" kindref="member">XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED</ref>,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED<sp/><sp/>=<sp/><ref refid="group___u_s_i_c_1ggaabdebf7dc81a008ca887ab0336f9b3deac496300b9f7d9f340bed2bf4dfb1b8d6" kindref="member">XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED</ref></highlight></codeline>
<codeline lineno="301"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1gad62a419e5f01dc507f3f731995873fe4" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="comment">/*<sp/>CPOL=0<sp/>is<sp/>a<sp/>clock<sp/>which<sp/>idles<sp/>at<sp/>0,<sp/>and<sp/>each<sp/>cycle<sp/>consists<sp/>of<sp/>a<sp/>pulse<sp/>of<sp/>1.<sp/>That<sp/>is,<sp/>the<sp/>leading<sp/>edge<sp/>is<sp/>a<sp/>rising<sp/>edge,<sp/>and<sp/>the<sp/>trailing<sp/>edge<sp/>is<sp/>a<sp/>falling<sp/>edge<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CPOL=1<sp/>is<sp/>a<sp/>clock<sp/>which<sp/>idles<sp/>at<sp/>1,<sp/>and<sp/>each<sp/>cycle<sp/>consists<sp/>of<sp/>a<sp/>pulse<sp/>of<sp/>0.<sp/>That<sp/>is,<sp/>the<sp/>leading<sp/>edge<sp/>is<sp/>a<sp/>falling<sp/>edge,<sp/>and<sp/>the<sp/>trailing<sp/>edge<sp/>is<sp/>a<sp/>rising<sp/>edge<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CPHA=0,<sp/>the<sp/>&quot;out&quot;<sp/>side<sp/>changes<sp/>the<sp/>data<sp/>on<sp/>the<sp/>trailing<sp/>edge<sp/>of<sp/>the<sp/>preceding<sp/>clock<sp/>cycle,<sp/>while<sp/>the<sp/>&quot;in&quot;<sp/>side<sp/>captures<sp/>the<sp/>data<sp/>on<sp/>(or<sp/>shortly<sp/>after)<sp/>the<sp/>leading<sp/>edge<sp/>of<sp/>the<sp/>clock<sp/>cycle.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/>The<sp/>out<sp/>side<sp/>holds<sp/>the<sp/>data<sp/>valid<sp/>until<sp/>the<sp/>trailing<sp/>edge<sp/>of<sp/>the<sp/>current<sp/>clock<sp/>cycle.<sp/>For<sp/>the<sp/>first<sp/>cycle,<sp/>the<sp/>first<sp/>bit<sp/>must<sp/>be<sp/>on<sp/>the<sp/>MOSI<sp/>line<sp/>before<sp/>the<sp/>leading<sp/>clock<sp/>edge.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>CPHA=1,<sp/>the<sp/>&quot;out&quot;<sp/>side<sp/>changes<sp/>the<sp/>data<sp/>on<sp/>the<sp/>leading<sp/>edge<sp/>of<sp/>the<sp/>current<sp/>clock<sp/>cycle,<sp/>while<sp/>the<sp/>&quot;in&quot;<sp/>side<sp/>captures<sp/>the<sp/>data<sp/>on<sp/>(or<sp/>shortly<sp/>after)<sp/>the<sp/>trailing<sp/>edge<sp/>of<sp/>the<sp/>clock<sp/>cycle.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/>The<sp/>out<sp/>side<sp/>holds<sp/>the<sp/>data<sp/>valid<sp/>until<sp/>the<sp/>leading<sp/>edge<sp/>of<sp/>the<sp/>following<sp/>clock<sp/>cycle.<sp/>For<sp/>the<sp/>last<sp/>cycle,<sp/>the<sp/>slave<sp/>holds<sp/>the<sp/>MISO<sp/>line<sp/>valid<sp/>until<sp/>slave<sp/>select<sp/>is<sp/>deasserted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CLOCK_MODE</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>XMC_SPI_CPOL_0_CPHA_0<sp/>=<sp/><ref refid="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4a5d8efe2fd3be3cbb88685afcfc7f4e04" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED</ref>,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>XMC_SPI_CPOL_0_CPHA_1<sp/>=<sp/><ref refid="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4a60da59e367df81e02204c193307c7543" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED</ref>,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>XMC_SPI_CPOL_1_CPHA_0<sp/>=<sp/><ref refid="group___s_p_i_1ggad62a419e5f01dc507f3f731995873fe4adba7c97cc13e382c36fb79a927ba779d" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED</ref>,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>XMC_SPI_CPOL_1_CPHA_1<sp/>=<sp/>XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga4ba31662807d655662ed15c5a44e9832" kindref="member">XMC_SPI_CLOCK_MODE_t</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1ggaf703b28cb6fe62eec40258bbb4b2381eae57defba0e28b37387753485a740acf2" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK</ref><sp/>=<sp/><ref refid="group___u_s_i_c_1gga373c90ba61a8cc0013f395840bc9acfda9491b02e6b95460911ccdbfd916dd28f" kindref="member">XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1ggaf703b28cb6fe62eec40258bbb4b2381eae8aea9225b3233a8cf60f426bb0368f8" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1</ref><sp/><sp/>=<sp/><ref refid="group___u_s_i_c_1gga373c90ba61a8cc0013f395840bc9acfdabcd84dcb72da7b117900df0eb5c43660" kindref="member">XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="328"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1gaf703b28cb6fe62eec40258bbb4b2381e" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>XMC_SPI_CH_INTERRUPT_NODE_POINTER</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635adbf85c1c2d8fef17554d399c4d3ffd77" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group___u_s_i_c_1gga074b5b1abff43f98316c7a5b69523e62ac3d37f726e6214704f420586ff8effc3" kindref="member">XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT</ref>,<sp/></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635acef45b4e93a44535a1e05154d5078b9a" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER</ref><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group___u_s_i_c_1gga074b5b1abff43f98316c7a5b69523e62a2298fc6a0fcee48a76f0aea1eb95e3a6" kindref="member">XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER</ref>,<sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635a829ccec5de803a4d04d46c1bc959cd1a" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group___u_s_i_c_1gga074b5b1abff43f98316c7a5b69523e62acd626621eaea679896369d2f9c1b44c8" kindref="member">XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635a79a1d019abac22505f9b50e38b415041" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE</ref><sp/><sp/><sp/>=<sp/><ref refid="group___u_s_i_c_1gga074b5b1abff43f98316c7a5b69523e62a9e0ff35d1ba446c2a1c9bff1b39e5740" kindref="member">XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gga6396e4407b48373dd88ce24c1e229635a643fcd627d71ba72b3c48449474d96dd" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group___u_s_i_c_1gga074b5b1abff43f98316c7a5b69523e62a3b99d0d6e93882ea791e8952cc993a7b" kindref="member">XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL</ref><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal">}<sp/><ref refid="group___s_p_i_1ga6396e4407b48373dd88ce24c1e229635" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_t</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************************************************************</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>DATA<sp/>STRUCTURES</highlight></codeline>
<codeline lineno="344"><highlight class="comment">**********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="struct_x_m_c___s_p_i___c_h___c_o_n_f_i_g__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XMC_SPI_CH_CONFIG</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>uint32_t<sp/>baudrate;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normal_divider_mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gaaf40703e598cf0bd196246cc048dda10" kindref="member">XMC_SPI_CH_BUS_MODE_t</ref><sp/>bus_mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1ga01a43390cf6218a5f16976f0b6027096" kindref="member">XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t</ref><sp/>selo_inversion;<sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga0a55c03c810078ffc9fa8b512dc57e37" kindref="member">XMC_USIC_CH_PARITY_MODE_t</ref><sp/>parity_mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal">}<sp/><ref refid="struct_x_m_c___s_p_i___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_SPI_CH_CONFIG_t</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/**********************************************************************************************************************</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>API<sp/>PROTOTYPES</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gaf75ad720e31d94b96f1811e47c7e7559" kindref="member">XMC_SPI_CH_InitEx</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___s_p_i___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_SPI_CH_CONFIG_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>config,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>init_brg);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga8b16f43a349603e746885a6d0d00b312" kindref="member">XMC_SPI_CH_Init</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_x_m_c___s_p_i___c_h___c_o_n_f_i_g__t" kindref="compound">XMC_SPI_CH_CONFIG_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>config)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1gaf75ad720e31d94b96f1811e47c7e7559" kindref="member">XMC_SPI_CH_InitEx</ref>(channel,<sp/>config,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga4e3869696f61ef196fd2ea66a667bb0e" kindref="member">XMC_SPI_CH_Start</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="447"><highlight class="normal">{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USIC<sp/>channel<sp/>in<sp/>SPI<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga8c04c213fd44c14b1bed871bb658683c" kindref="member">XMC_USIC_CH_SetMode</ref>(channel,<sp/><ref refid="group___u_s_i_c_1ggac052842418ff3dda00900219ebda5de7a899e292213839edfb7d88e356cb9d18f" kindref="member">XMC_USIC_CH_OPERATING_MODE_SPI</ref>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><ref refid="group___s_p_i_1ga3f497bc1a5457fddd4f5e57f30c3531d" kindref="member">XMC_SPI_CH_STATUS_t</ref><sp/><ref refid="group___s_p_i_1ga7fd532dae41a2b9d754aa3de0f412a8d" kindref="member">XMC_SPI_CH_Stop</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><ref refid="group___s_p_i_1ga3f497bc1a5457fddd4f5e57f30c3531d" kindref="member">XMC_SPI_CH_STATUS_t</ref><sp/><ref refid="group___s_p_i_1ga41fd386bd95f41b0274c4fd162b1a539" kindref="member">XMC_SPI_CH_SetBaudrate</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>rate);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><ref refid="group___s_p_i_1ga3f497bc1a5457fddd4f5e57f30c3531d" kindref="member">XMC_SPI_CH_STATUS_t</ref><sp/><ref refid="group___s_p_i_1gab70defd631cb9e9210f779fedce93efd" kindref="member">XMC_SPI_CH_SetBaudrateEx</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>rate,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>normal_divider_mode);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga065897e36db1bbcffe141ad992cea9ce" kindref="member">XMC_SPI_CH_EnableSlaveSelect</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga770391e79549c7df020fdd0f3864a808" kindref="member">XMC_SPI_CH_SLAVE_SELECT_t</ref><sp/>slave);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga5b2480876aa7c3b1c9646156d015e398" kindref="member">XMC_SPI_CH_DisableSlaveSelect</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gabef8a168c4d9d5e229fd04ae66a92ed1" kindref="member">XMC_SPI_CH_SetTransmitMode</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a5e1322e27c40bf91d172f9673f205c97" kindref="member">CCR</ref><sp/>=<sp/>(channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a5e1322e27c40bf91d172f9673f205c97" kindref="member">CCR</ref><sp/>&amp;<sp/>(uint32_t)(~USIC_CH_CCR_HPCEN_Msk))<sp/>|</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)<sp/>mode<sp/>&lt;&lt;<sp/>USIC_CH_CCR_HPCEN_Pos)<sp/>&amp;<sp/>(uint32_t)USIC_CH_CCR_HPCEN_Msk);</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga273573d7d388e93ff9018ff87abe9dc0" kindref="member">XMC_SPI_CH_Transmit</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gae797c93243d5ab6ad7c5b1de311d6a3c" kindref="member">XMC_SPI_CH_Receive</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transmit<sp/>dummy<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><ref refid="group___s_p_i_1ga273573d7d388e93ff9018ff87abe9dc0" kindref="member">XMC_SPI_CH_Transmit</ref>(channel,<sp/>(uint16_t)0xffffU,<sp/>(<ref refid="group___s_p_i_1ga9dabbd3f51646f95b0719bf82c69c38f" kindref="member">XMC_SPI_CH_MODE_t</ref>)((uint16_t)mode<sp/>&amp;<sp/>0xfffbU));</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">uint16_t<sp/><ref refid="group___s_p_i_1ga55ae75a9f812ee0ed92303074e990f97" kindref="member">XMC_SPI_CH_GetReceivedData</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga72ca69c5bc68803067ff496538ff5f02" kindref="member">XMC_SPI_CH_SetBitOrderLsbFirst</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1ac005cdf6a4e1350830161ee7ef88b9a2" kindref="member">SCTR</ref><sp/>&amp;=<sp/>(uint32_t)~USIC_CH_SCTR_SDIR_Msk;</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga8f4bbed2c9583c7a454951c83acbe646" kindref="member">XMC_SPI_CH_SetBitOrderMsbFirst</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1ac005cdf6a4e1350830161ee7ef88b9a2" kindref="member">SCTR</ref><sp/>|=<sp/>(uint32_t)USIC_CH_SCTR_SDIR_Msk;</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga91fef97e4d595f37fbfb60a4fd5624e4" kindref="member">XMC_SPI_CH_EnableEvent</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>event);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga8f3bb2759c5dc83f4df9674bc7521dfa" kindref="member">XMC_SPI_CH_DisableEvent</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>event);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___s_p_i_1ga16747654a19c5dcef00d7f7e61d14f48" kindref="member">XMC_SPI_CH_GetStatusFlag</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="696"><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a3d6958b37a0c6e74508d01ad7085f734" kindref="member">PSR_SSCMode</ref>;</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga2a54f046194eee8c765c8c4ff4af73ed" kindref="member">XMC_SPI_CH_ClearStatusFlag</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>flag)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a725284f672801993f9ab5dcf3ef1e5c7" kindref="member">PSCR</ref><sp/>|=<sp/>flag;</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gaf1bf70c8e262bdf3727e7bc2d21b578b" kindref="member">XMC_SPI_CH_EnableMasterClock</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>|=<sp/>(uint32_t)USIC_CH_PCR_SSCMode_MCLK_Msk;</highlight></codeline>
<codeline lineno="738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gac7bd8be53e17d3285fd8fc87ec2a50bd" kindref="member">XMC_SPI_CH_DisableMasterClock</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>&amp;=<sp/>(uint32_t)~USIC_CH_PCR_SSCMode_MCLK_Msk;</highlight></codeline>
<codeline lineno="755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USIC_CH_PCR_SSCMode_SLPHSEL_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_SPI_CH_DataLatchedInTrailingEdge(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="769"><highlight class="normal">{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>&amp;=<sp/>(uint32_t)~USIC_CH_PCR_SSCMode_SLPHSEL_Msk;</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XMC_SPI_CH_DataLatchedInLeadingEdge(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>|=<sp/>USIC_CH_PCR_SSCMode_SLPHSEL_Msk;</highlight></codeline>
<codeline lineno="789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gad7b042f05c42e05efd3ba52df303f1d6" kindref="member">XMC_SPI_CH_EnableInterwordDelay</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>|=<sp/>(uint32_t)USIC_CH_PCR_SSCMode_TIWEN_Msk;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gaeb85102d1ba6a3387e578819de6ccb9d" kindref="member">XMC_SPI_CH_DisableInterwordDelay</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>&amp;=<sp/>(uint32_t)~USIC_CH_PCR_SSCMode_TIWEN_Msk;</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga3902d15aaff83cbce1d0d9b252183ef5" kindref="member">XMC_SPI_CH_SetInterwordDelay</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/>uint32_t<sp/>tinterword_delay_ns);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga5ebec7e4e0641a615e9a98ccb11ada78" kindref="member">XMC_SPI_CH_SetInterwordDelaySCLK</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/>uint32_t<sp/>sclk_period)</highlight></codeline>
<codeline lineno="865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>=<sp/>(uint32_t)((channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref>)<sp/>&amp;<sp/>(~(USIC_CH_PCR_SSCMode_DCTQ1_Msk<sp/>|</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_PCR_SSCMode_PCTQ1_Msk<sp/>|</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_PCR_SSCMode_CTQSEL1_Msk)))<sp/>|</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((sclk_period<sp/>-<sp/>1U)<sp/>&lt;&lt;<sp/><sp/>USIC_CH_PCR_SSCMode_DCTQ1_Pos)<sp/>|</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x02U<sp/>&lt;&lt;<sp/><sp/>USIC_CH_PCR_SSCMode_CTQSEL1_Pos));</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga916c987f6fafac74e740c6b626f37a8d" kindref="member">XMC_SPI_CH_SetSlaveSelectDelay</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/>uint32_t<sp/>sclk_period)</highlight></codeline>
<codeline lineno="886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a60442d8bed2e194af31a7bedbabf0c16" kindref="member">BRG</ref><sp/>=<sp/>(channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a60442d8bed2e194af31a7bedbabf0c16" kindref="member">BRG</ref><sp/>&amp;<sp/>~(USIC_CH_BRG_DCTQ_Msk<sp/>|</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USIC_CH_BRG_PCTQ_Msk))<sp/>|</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((sclk_period<sp/>-<sp/>1U)<sp/>&lt;&lt;<sp/>USIC_CH_BRG_DCTQ_Pos)<sp/>|<sp/>(0x01U<sp/>&lt;&lt;<sp/>USIC_CH_BRG_PCTQ_Pos));</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga50f619649550b90af1adfecb924ce0df" kindref="member">XMC_SPI_CH_EnableFEM</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="910"><highlight class="normal">{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>|=<sp/>(uint32_t)USIC_CH_PCR_SSCMode_FEM_Msk;</highlight></codeline>
<codeline lineno="912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga76bad04e2d660078ce675baa6320f1b7" kindref="member">XMC_SPI_CH_DisableFEM</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>&amp;=<sp/>(uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gadaf15fe97c6fc0b78ac661e923521ee3" kindref="member">XMC_SPI_CH_ConfigureShiftClockOutput</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gad62a419e5f01dc507f3f731995873fe4" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t</ref><sp/>passive_level,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gaf703b28cb6fe62eec40258bbb4b2381e" kindref="member">XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t</ref><sp/>clock_output)</highlight></codeline>
<codeline lineno="954"><highlight class="normal">{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1gaba9a2e95af4e455dddd73f324577c876" kindref="member">XMC_USIC_CH_ConfigureShiftClockOutput</ref>(channel,<sp/>(<ref refid="group___u_s_i_c_1gaabdebf7dc81a008ca887ab0336f9b3de" kindref="member">XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t</ref>)passive_level,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group___u_s_i_c_1ga373c90ba61a8cc0013f395840bc9acfd" kindref="member">XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t</ref>)clock_output);</highlight></codeline>
<codeline lineno="957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga874157094bd9b28c5a5493eee577df72" kindref="member">XMC_SPI_CH_SetWordLength</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>word_length)</highlight></codeline>
<codeline lineno="974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1gabb9d02b8388a03cd28190c976cdb8b78" kindref="member">XMC_USIC_CH_SetWordLength</ref>(channel,<sp/>word_length);</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gaedb545863be3b85d6b2ec51503926432" kindref="member">XMC_SPI_CH_SetFrameLength</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>frame_length)</highlight></codeline>
<codeline lineno="997"><highlight class="normal">{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga23964f6d982b35388f3a7c82f5634e0f" kindref="member">XMC_USIC_CH_SetFrameLength</ref>(channel,<sp/>frame_length);</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gad11bb01cc21d11bf8f7cfa0a1a2b8a46" kindref="member">XMC_SPI_CH_EnableSOF</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>channel-&gt;TCSR<sp/>|=<sp/>(uint32_t)USIC_CH_TCSR_SOF_Msk;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gac0243074b234e51bebab42c98a194a63" kindref="member">XMC_SPI_CH_DisableSOF</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>channel-&gt;TCSR<sp/>&amp;=<sp/>(uint32_t)~USIC_CH_TCSR_SOF_Msk;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gae37ff42efc15af1807458ff0a47053ea" kindref="member">XMC_SPI_CH_EnableEOF</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>channel-&gt;TCSR<sp/>|=<sp/>(uint32_t)USIC_CH_TCSR_EOF_Msk;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gaeb24e63f6664b519405dd75ca9d856fc" kindref="member">XMC_SPI_CH_DisableEOF</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>channel-&gt;TCSR<sp/>&amp;=<sp/>(uint32_t)~USIC_CH_TCSR_EOF_Msk;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gab5800f69155c1ecadedf587fd567e2b3" kindref="member">XMC_SPI_CH_SetInputSource</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref><sp/>input,</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>source)</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a2572b0472db52f72c68f523f48c35620" kindref="member">DXCR</ref>[input]<sp/>=<sp/>(uint32_t)(channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a2572b0472db52f72c68f523f48c35620" kindref="member">DXCR</ref>[input]<sp/>&amp;<sp/>(~USIC_CH_DX0CR_DSEN_Msk))<sp/>|<sp/>USIC_CH_DX0CR_INSW_Msk;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga7986fcfe3fd6bf9982e43b1eaabb02c2" kindref="member">XMC_USIC_CH_SetInputSource</ref>(channel,<sp/>(<ref refid="group___u_s_i_c_1ga7b7c285b4dfe6c9132f2f478a59b2ac5" kindref="member">XMC_USIC_CH_INPUT_t</ref>)input,<sp/>source);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga6c327beee42bdb3d24865f1bc19376d8" kindref="member">XMC_SPI_CH_SetSlaveSelectPolarity</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga01a43390cf6218a5f16976f0b6027096" kindref="member">XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t</ref><sp/>selo_inversion)</highlight></codeline>
<codeline lineno="1113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>Protocol<sp/>Control<sp/>Register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>=<sp/>(uint32_t)((channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>&amp;<sp/>(~USIC_CH_PCR_SSCMode_SELINV_Msk))<sp/>|<sp/>(uint32_t)selo_inversion);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga68c629a48d4d82c08c1017a9c822deeb" kindref="member">XMC_SPI_CH_EnableInputInversion</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref><sp/>input)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1gae13b2003ea4d8703a9990d1e90048dc3" kindref="member">XMC_USIC_CH_EnableInputInversion</ref>(channel,<sp/>(<ref refid="group___u_s_i_c_1ga7b7c285b4dfe6c9132f2f478a59b2ac5" kindref="member">XMC_USIC_CH_INPUT_t</ref>)input);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gadf00d5c823846ca5c13f627baa541663" kindref="member">XMC_SPI_CH_DisableInputInversion</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga5e1e7ef1aea059d58462c59b0fd75f8f" kindref="member">XMC_SPI_CH_INPUT_t</ref><sp/>input)</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1gaa018c766c173f43dbdba8c821a90a645" kindref="member">XMC_USIC_CH_DisableInputInversion</ref>(channel,<sp/>(<ref refid="group___u_s_i_c_1ga7b7c285b4dfe6c9132f2f478a59b2ac5" kindref="member">XMC_USIC_CH_INPUT_t</ref>)input);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga14b1f10c37e326b76cd214f7c006add2" kindref="member">XMC_SPI_CH_SetInterruptNodePointer</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>service_request)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga52f9fc18049dbc906b127e1f3662b4b3" kindref="member">XMC_USIC_CH_SetInterruptNodePointer</ref>(channel,<sp/><ref refid="group___u_s_i_c_1gga074b5b1abff43f98316c7a5b69523e62a3b99d0d6e93882ea791e8952cc993a7b" kindref="member">XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL</ref>,<sp/>(uint32_t)service_request);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga4a6b621ddf701529b5256181d40bbdac" kindref="member">XMC_SPI_CH_SelectInterruptNodePointer</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga6396e4407b48373dd88ce24c1e229635" kindref="member">XMC_SPI_CH_INTERRUPT_NODE_POINTER_t</ref><sp/>interrupt_node,</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>service_request)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga52f9fc18049dbc906b127e1f3662b4b3" kindref="member">XMC_USIC_CH_SetInterruptNodePointer</ref>(channel,<sp/>(<ref refid="group___u_s_i_c_1ga074b5b1abff43f98316c7a5b69523e62" kindref="member">XMC_USIC_CH_INTERRUPT_NODE_POINTER_t</ref>)interrupt_node,</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)service_request);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga69901d79102b4efda87bc822b0d1e5d0" kindref="member">XMC_SPI_CH_TriggerServiceRequest</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>service_request_line)</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga6fa0313a4dfcade23a7098631edefc50" kindref="member">XMC_USIC_CH_TriggerServiceRequest</ref>(channel,<sp/>(uint32_t)service_request_line);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gab1fb0a57f619c0d1872482196399a443" kindref="member">XMC_SPI_CH_EnableDelayCompensation</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga1eaad0f90219fa9bb43bfdf932ea2451" kindref="member">XMC_USIC_CH_EnableDelayCompensation</ref>(channel);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gac0b5cdd04a90124e347ba3ef897dc545" kindref="member">XMC_SPI_CH_DisableDelayCompensation</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga9896966f6e2e6109f8a7ca0de03d0b39" kindref="member">XMC_USIC_CH_DisableDelayCompensation</ref>(channel);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gac19e7d5bf3ff9b28764463d224b6e581" kindref="member">XMC_SPI_CH_ConfigExternalInputSignalToBRG</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>pdiv,</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group___u_s_i_c_1ga4c50ae5a7f12a5496d82d2bc665e1db2" kindref="member">XMC_USIC_CH_INPUT_COMBINATION_MODE_t</ref><sp/>combination_mode)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga00c6419dfc0f8ed4c4eab13ded598144" kindref="member">XMC_USIC_CH_ConfigExternalInputSignalToBRG</ref>(channel,<sp/>pdiv,<sp/>2U,<sp/>combination_mode);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gaa1d508df7f014140bc929286ef63a9c3" kindref="member">XMC_SPI_CH_EnableSlaveSelectCodedMode</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>Protocol<sp/>Control<sp/>Register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>=<sp/>(uint32_t)(channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>&amp;<sp/>(~USIC_CH_PCR_SSCMode_SELCTR_Msk));</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1gacb9748ed69822299ecb2a1488a3210e7" kindref="member">XMC_SPI_CH_DisableSlaveSelectCodedMode</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configuration<sp/>of<sp/>Protocol<sp/>Control<sp/>Register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>channel-&gt;<ref refid="struct_x_m_c___u_s_i_c___c_h__t_1a57a0d5b0046d995023f6555c94e7af6a" kindref="member">PCR_SSCMode</ref><sp/>|=<sp/>(uint32_t)USIC_CH_PCR_SSCMode_SELCTR_Msk;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga9ed5d8b86f55dd5a64316392b90c661b" kindref="member">XMC_SPI_CH_EnableDataTransmission</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga3b02352ba5e94e8f79751dea304084e0" kindref="member">XMC_USIC_CH_SetStartTransmisionMode</ref>(channel,<sp/><ref refid="group___u_s_i_c_1ggae2db2ec4c7c43ae1454373789443b793a7464a12e43e762ae3809838ed60b0848" kindref="member">XMC_USIC_CH_START_TRANSMISION_ON_TDV</ref>);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal">__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___s_p_i_1ga87d32f246cfd7eca010b38e90810277b" kindref="member">XMC_SPI_CH_DisableDataTransmission</ref>(<ref refid="struct_x_m_c___u_s_i_c___c_h__t" kindref="compound">XMC_USIC_CH_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>channel)</highlight></codeline>
<codeline lineno="1349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><ref refid="group___u_s_i_c_1ga3b02352ba5e94e8f79751dea304084e0" kindref="member">XMC_USIC_CH_SetStartTransmisionMode</ref>(channel,<sp/><ref refid="group___u_s_i_c_1ggae2db2ec4c7c43ae1454373789443b793a92234bf742ccdef5a487ab9fc7b7b47e" kindref="member">XMC_USIC_CH_START_TRANSMISION_DISABLED</ref>);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_spi.h"/>
  </compounddef>
</doxygen>

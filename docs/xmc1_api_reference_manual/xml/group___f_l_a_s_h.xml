<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="group___f_l_a_s_h" kind="group">
    <compoundname>FLASH</compoundname>
    <title>Flash driver (FLASH)</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___f_l_a_s_h_1ga1ef5e96ac5c0fd9dd006a9c3aead2a9d" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_FLASH_EVENT_t</name>
        <enumvalue id="group___f_l_a_s_h_1gga1ef5e96ac5c0fd9dd006a9c3aead2a9dac7785d858af40ee0b8897931f58f1add" prot="public">
          <name>XMC_FLASH_EVENT_READY</name>
          <initializer>= NVM_NVMCONF_INT_ON_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generates the NVM ready interrupts on flash sequence completion </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines NVM ready interrupt event. Use type <emphasis>XMC_FLASH_EVENT_t</emphasis> for this enum. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="132" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="enum" id="group___f_l_a_s_h_1gab0c36057e8d3848002e1bad7221badf9" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_FLASH_HARDREAD_LEVEL_t</name>
        <enumvalue id="group___f_l_a_s_h_1ggab0c36057e8d3848002e1bad7221badf9a35f5a67f64daf0ee5a278816750ec2a8" prot="public">
          <name>XMC_FLASH_HARDREAD_LEVEL_NORMAL</name>
          <initializer>= (uint16_t)0x0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No <emphasis>hardread</emphasis> level verification enabled (Normal read) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_l_a_s_h_1ggab0c36057e8d3848002e1bad7221badf9a2566fede36c5e94f1d0024869a69d3dd" prot="public">
          <name>XMC_FLASH_HARDREAD_LEVEL_WRITTEN</name>
          <initializer>= (uint16_t)0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enables strict margin compare for written data cells </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_l_a_s_h_1ggab0c36057e8d3848002e1bad7221badf9a576df2bd0dcf62e147fb2eba3e1770dd" prot="public">
          <name>XMC_FLASH_HARDREAD_LEVEL_ERASED</name>
          <initializer>= (uint16_t)0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enables strict margin compare for erased data cells </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines hard read levels for strict data verification. Use type <emphasis>XMC_FLASH_HARDREAD_LEVEL_t</emphasis> for this enum. These <emphasis>hardread</emphasis> levels provide some margin to ensure that the data is really programmed with suitably distinct levels for written and erased bits. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="142" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="141" bodyend="146"/>
      </memberdef>
      <memberdef kind="enum" id="group___f_l_a_s_h_1gaec69607b9daecffb4215faca73d02ebc" prot="public" static="no" strong="no">
        <type></type>
        <name>XMC_FLASH_STATUS_t</name>
        <enumvalue id="group___f_l_a_s_h_1ggaec69607b9daecffb4215faca73d02ebca083aba939fe424ed79247a2c2ae27807" prot="public">
          <name>XMC_FLASH_STATUS_OK</name>
          <initializer>= 0U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flash related operation was successfully completed </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_l_a_s_h_1ggaec69607b9daecffb4215faca73d02ebcaf9f87eda000da5d7cb50aed5d8d58835" prot="public">
          <name>XMC_FLASH_STATUS_BUSY</name>
          <initializer>= NVM_NVMSTATUS_BUSY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Cannot execute the flash request because another operation is in progress </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_l_a_s_h_1ggaec69607b9daecffb4215faca73d02ebcaac366f040e019a43084cac0959b51ce1" prot="public">
          <name>XMC_FLASH_STATUS_SLEEP_MODE</name>
          <initializer>= NVM_NVMSTATUS_SLEEP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flash is in sleep mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_l_a_s_h_1ggaec69607b9daecffb4215faca73d02ebca1bb4dde4b92f4e55b5f4ca9c8a7066f0" prot="public">
          <name>XMC_FLASH_STATUS_VERIFY_ERROR</name>
          <initializer>= NVM_NVMSTATUS_VERR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flash reported a verification failure </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_l_a_s_h_1ggaec69607b9daecffb4215faca73d02ebca8f630d2de1490fad7c5177ab40ba526a" prot="public">
          <name>XMC_FLASH_STATUS_ECC1_READ_ERROR</name>
          <initializer>= NVM_NVMSTATUS_ECC1READ_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flash reports a single bit failure, and it is automatically corrected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_l_a_s_h_1ggaec69607b9daecffb4215faca73d02ebcaa617dbe3ef66c6652ce6f14c0809ab21" prot="public">
          <name>XMC_FLASH_STATUS_ECC2_READ_ERROR</name>
          <initializer>= NVM_NVMSTATUS_ECC2READ_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flash reported at least two bit failure </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___f_l_a_s_h_1ggaec69607b9daecffb4215faca73d02ebcae985a7ab48f1505274690d83dffb1319" prot="public">
          <name>XMC_FLASH_STATUS_WRITE_PROTOCOL_ERROR</name>
          <initializer>= NVM_NVMSTATUS_WRPERR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Write/Verify operation on a block is failed due to protocol violations or write protected sectors </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines the status of flash, to verify the flash related API calls. Use type <emphasis>XMC_FLASH_STATUS_t</emphasis> for this enum. The members defines the respective masked status bits of <emphasis>NVMSTATUS</emphasis> register. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="113" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="112" bodyend="126"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___f_l_a_s_h_1gab3972a9f18acaa900499351a4843ff38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_ClearStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_FLASH_ClearStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Clears the previous error status by reseting the ECC and VERR error status bits of NVMSTATUS register.<linebreak/>
<linebreak/>
Call this API before starting any flash programming / erase related APIs to ensure all previous errors are cleared.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_flash.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga162346fadd0c8caacda1738259da404e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_DisableEvent</definition>
        <argsstring>(const uint32_t event_msk)</argsstring>
        <name>XMC_FLASH_DisableEvent</name>
        <param>
          <type>const uint32_t</type>
          <declname>event_msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_msk</parametername>
</parameternamelist>
<parameterdescription>
<para>ORed values of <ref refid="group___f_l_a_s_h_1ga1ef5e96ac5c0fd9dd006a9c3aead2a9d" kindref="member">XMC_FLASH_EVENT_t</ref> enumeration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Disables the particular flash events as specified in the input parameter.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___f_l_a_s_h_1ga2dae70005cbc3265b504a7232cc72b86" kindref="member">XMC_FLASH_EnableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_flash.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga2dae70005cbc3265b504a7232cc72b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_EnableEvent</definition>
        <argsstring>(const uint32_t event_msk)</argsstring>
        <name>XMC_FLASH_EnableEvent</name>
        <param>
          <type>const uint32_t</type>
          <declname>event_msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event_msk</parametername>
</parameternamelist>
<parameterdescription>
<para>ORed values of <ref refid="group___f_l_a_s_h_1ga1ef5e96ac5c0fd9dd006a9c3aead2a9d" kindref="member">XMC_FLASH_EVENT_t</ref> enumeration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the particular flash events as specified in the input parameter.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___f_l_a_s_h_1ga162346fadd0c8caacda1738259da404e" kindref="member">XMC_FLASH_DisableEvent()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_flash.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1gae0073bec84d093e51c76769d076d8df7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_EnterSleepMode</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_FLASH_EnterSleepMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the flash to enter into sleep mode by resetting the NVMCONF register NVM_ON bit.<linebreak/>
<linebreak/>
 Flash can wake up from sleep mode on any flash operation completion ready event trigger. To disable the sleep mode any time during execution call the API <ref refid="group___f_l_a_s_h_1ga032a6acea8c8b125cde1da5941f89c30" kindref="member">XMC_FLASH_ExitSleepMode()</ref>.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___f_l_a_s_h_1ga032a6acea8c8b125cde1da5941f89c30" kindref="member">XMC_FLASH_ExitSleepMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="360" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga1d782bca8ed5b31fca6fa58cf6106b7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_FLASH_ErasePage</definition>
        <argsstring>(uint32_t *address)</argsstring>
        <name>XMC_FLASH_ErasePage</name>
        <param>
          <type>uint32_t *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting address of the page to be erased</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status of operation (NVM_STATUS)</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Erases a single flash page associated to the specified <emphasis>address</emphasis>.<linebreak/>
<linebreak/>
 XMC1000 Flash can be erased with granularity of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It internally calls the Flash Firmware routine <emphasis>XMC1000_NvmErasePage(unsigned long pageAddr)</emphasis> to perform the erase operation. Refer XMC1000 reference manual for more details on flash firmware routines (Section 25.3). Call <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> API after calling this API, to verify the erase operation.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___f_l_a_s_h_1ga581a2ddaeddb1b1ea1fe31ec222521d7" kindref="member">XMC_FLASH_ErasePages()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga581a2ddaeddb1b1ea1fe31ec222521d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_FLASH_ErasePages</definition>
        <argsstring>(uint32_t *address, uint32_t num_pages)</argsstring>
        <name>XMC_FLASH_ErasePages</name>
        <param>
          <type>uint32_t *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_pages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting address of the flash page from where the erase starts </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_pages</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of pages to be erased.<linebreak/>
 Range: [1 to (flash size / 256)]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status of operation (NVM_STATUS)</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Erases a set of flash memory pages.<linebreak/>
<linebreak/>
 Erase starts from the specified <emphasis>address</emphasis>. It erases a maximum number of <emphasis>num_pages</emphasis> flash pages. The maximum erasable pages are limited to microcontroller flash size. It sets NVMPROG register to continuous page erase mode before erase and resets it action back to normal state on completion. Call <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> after calling this API to verify the erase operation.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Flash will be in busy state during erase operation. Hence no operations on flash are allowed until it completes.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___f_l_a_s_h_1gaf697ad9d71bc470ac59e0014bac57d43" kindref="member">XMC_FLASH_EraseSector()</ref>, <ref refid="group___f_l_a_s_h_1ga1d782bca8ed5b31fca6fa58cf6106b7b" kindref="member">XMC_FLASH_ErasePage()</ref> <linebreak/>
<linebreak/>
<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1gaf697ad9d71bc470ac59e0014bac57d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_FLASH_EraseSector</definition>
        <argsstring>(uint32_t *address)</argsstring>
        <name>XMC_FLASH_EraseSector</name>
        <param>
          <type>uint32_t *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting address of the page to be erased.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status of operation (NVM_STATUS)</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Erases a complete sector starting from the <emphasis>address</emphasis> specified.<linebreak/>
<linebreak/>
 XMC1000 Flash can be erased with granularity of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It internally calls XMC_FLASH_ErasePages API 16 times starting from the first page of the sector.. Call <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> API after calling this API, to verify the erase operation.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___f_l_a_s_h_1ga581a2ddaeddb1b1ea1fe31ec222521d7" kindref="member">XMC_FLASH_ErasePages()</ref> <linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga032a6acea8c8b125cde1da5941f89c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_ExitSleepMode</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_FLASH_ExitSleepMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Enables the flash to exit from sleep mode by setting the NVMCONF register NVM_ON bit.<linebreak/>
<linebreak/>
 Calling the API <ref refid="group___f_l_a_s_h_1gae0073bec84d093e51c76769d076d8df7" kindref="member">XMC_FLASH_EnterSleepMode()</ref> allows the flash to renter into sleep mode.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___f_l_a_s_h_1gae0073bec84d093e51c76769d076d8df7" kindref="member">XMC_FLASH_EnterSleepMode()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="379" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1gabc93e46f19331fe15be8cd0f2a8fa28b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_FLASH_GetSectorAddress</definition>
        <argsstring>(uint32_t sector)</argsstring>
        <name>XMC_FLASH_GetSectorAddress</name>
        <param>
          <type>uint32_t</type>
          <declname>sector</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sector</parametername>
</parameternamelist>
<parameterdescription>
<para>Flash sector number for which the address extraction is needed<linebreak/>
 Range: [0 to 51]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Starting address of the sector specified<linebreak/>
 Range: [0x10001000 to 0x10032000]</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Finds the starting address of the specified <emphasis>sector</emphasis> number.<linebreak/>
<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Starting address of flash for XMC1 family of microcontrollers</para>
<para>&lt; Number of bytes in a sector. (16 pages * 256 bytes = 4096 bytes) </para>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="398" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="398" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_FLASH_GetStatus</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_FLASH_GetStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t Status of the previous flash operation.</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Informs the status of flash by reading the NVMSTATUS register.<linebreak/>
<linebreak/>
 It indicates the ECC, VERR(verification error), WRPERR (Write protocol error) errors as well as the current flash state. After calling the flash read/write/erase operation related APIs, call this API to get the verification status. The return value of this API shall be checked against the members of <ref refid="group___f_l_a_s_h_1gaec69607b9daecffb4215faca73d02ebc" kindref="member">XMC_FLASH_STATUS_t</ref> enumeration to get the relevant status.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_flash.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga7d687d0d1d5bdc9173d96c7619172cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XMC_FLASH_IsBusy</definition>
        <argsstring>(void)</argsstring>
        <name>XMC_FLASH_IsBusy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if flash is in busy state else returns <emphasis>false</emphasis>.</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Checks whether flash is in busy state or not.<linebreak/>
<linebreak/>
 It is checked by calling the <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> API internally. Refer <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> for more details.<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref><linebreak/>
<linebreak/>
<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_flash.h" line="199" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc_flash.h" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga4374da8ed15f78a182dce3b262d4b6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_FLASH_ProgramPage</definition>
        <argsstring>(uint32_t *address, const uint32_t *data)</argsstring>
        <name>XMC_FLASH_ProgramPage</name>
        <param>
          <type>uint32_t *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting address of flash page from where the programming starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the source address where targeted data is located.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status of operation (NVM_STATUS)</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Programs a single flash page associated with the specified <emphasis>address</emphasis>.<linebreak/>
<linebreak/>
 XMC1000 Flash can be programmed with one page (256 bytes) using this API. It calls the Flash Firmware routine <emphasis>XMC1000_NvmProgVerify(unsigned long pageAddr)</emphasis> to perform the programming. Refer XMC1000 reference manual of for more details on flash firmware routines (Section 25.3). Call <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> API after calling this API, to verify the programming operation.</para>
</simplesect>
<simplesect kind="par"><title>Note:</title><para>Flash will be busy state during write is ongoing, hence no operations allowed until it completes.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1gab5d0302105a5696744a6dcfae19db64f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t XMC_FLASH_ProgramVerifyPage</definition>
        <argsstring>(uint32_t *address, const uint32_t *data)</argsstring>
        <name>XMC_FLASH_ProgramVerifyPage</name>
        <param>
          <type>uint32_t *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting address of flash page from where the programming starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the source address where targeted data blocks are located.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Status of operation (NVM_STATUS)</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Erases, programs and verifies a single flash page starting from the <emphasis>address</emphasis> specified.<linebreak/>
<linebreak/>
 XMC1000 Flash can be programmed with granularity of one page = 16 blocks of 16 Bytes = 256 Bytes using this API. It internally calls the Flash Firmware routine <emphasis>XMC1000_NvmProgVerify(unsigned long pageAddr)</emphasis> to perform the programming. Refer XMC1000 reference manual of for more details on flash firmware routines (Section 25.3). Call <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> API after calling this API, to verify the erase operation.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga90cec357405f2edafa4aa96cc3e1de1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_ReadBlocks</definition>
        <argsstring>(uint32_t *address, uint32_t *data, uint32_t num_blocks)</argsstring>
        <name>XMC_FLASH_ReadBlocks</name>
        <param>
          <type>uint32_t *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_blocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting address of flash block from where the read starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the destination address, where the read data blocks to be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of blocks to be read.<linebreak/>
 Range: [1 to (flash size / 16)]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Reads multiple blocks from flash in one shot, starting from the <emphasis>address</emphasis> specified.<linebreak/>
<linebreak/>
 The read blocks are stored into the locations starting from the <emphasis>data</emphasis> address. Calling <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> API after calling this API verifies the read operation.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga4dc344064838670ac3b0d7b4c2c9a0fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t XMC_FLASH_ReadWord</definition>
        <argsstring>(const uint32_t *const address)</argsstring>
        <name>XMC_FLASH_ReadWord</name>
        <param>
          <type>const uint32_t *const</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the flash word address from where the read is expected</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><linebreak/>
 a 32bit data word stored in the specified <emphasis>address</emphasis>.</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Reads a single word from the specified flash<emphasis>address</emphasis>.<linebreak/>
<linebreak/>
 Calling <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> API after calling this API returns the read status.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para><ref refid="group___f_l_a_s_h_1ga90cec357405f2edafa4aa96cc3e1de1d" kindref="member">XMC_FLASH_ReadBlocks()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="302" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1gab71e15fdc8ded3ce14f2f697f6ff3027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_SetHardReadLevel</definition>
        <argsstring>(XMC_FLASH_HARDREAD_LEVEL_t level)</argsstring>
        <name>XMC_FLASH_SetHardReadLevel</name>
        <param>
          <type><ref refid="group___f_l_a_s_h_1gab0c36057e8d3848002e1bad7221badf9" kindref="member">XMC_FLASH_HARDREAD_LEVEL_t</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>Hard read levels specified in <emphasis>XMC_FLASH_HARDREAD_LEVEL_t</emphasis>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Sets the hard read level for verification process.<linebreak/>
<linebreak/>
 It insists the flash to do a strict margin compare with the written/erased data against the internal buffer. Sets the NVMCONF register HRLEV field with <emphasis>level</emphasis> value. This hardread level is used until the end of the verification sequence and, may not be changed in between.<linebreak/>
<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="441" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="441" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1gab05fe59c132f2f7d9e5b8a5896aa4796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_SetSectorProtection</definition>
        <argsstring>(uint32_t num_sectors)</argsstring>
        <name>XMC_FLASH_SetSectorProtection</name>
        <param>
          <type>uint32_t</type>
          <declname>num_sectors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_sectors</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of sectors to be protected<linebreak/>
 Range: [0 to 51]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Protect the flash sectors starting from 0th sector to the specified <emphasis>num_sectors</emphasis>.<linebreak/>
<linebreak/>
 It sets the NVMCONF register SECPROT field with the value specified in <emphasis>num_sectors</emphasis>. Changing the protection limit can be achieved by calling this API at runtime with a different value of <emphasis>num_sectors</emphasis>.<linebreak/>
<linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="419" column="1" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="419" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga7159be439f872a52db4b20f74477e75d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_VerifyBlocks</definition>
        <argsstring>(uint32_t *address, const uint32_t *data, uint32_t num_blocks)</argsstring>
        <name>XMC_FLASH_VerifyBlocks</name>
        <param>
          <type>uint32_t *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_blocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting address of flash block from where the verification starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the source address where targeted data blocks are located. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of flash blocks writes needed.<linebreak/>
 Range: [1 to (flash size / 16)]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Performs verification of written data blocks.<linebreak/>
<linebreak/>
 After calling <ref refid="group___f_l_a_s_h_1ga9d23629533ee3a703972649db4372ebe" kindref="member">XMC_FLASH_WriteBlocks()</ref> API, calling this API will verify the correctness of written blocks. It sets the <emphasis>NVMPROG</emphasis> register into continuous block write mode before write and resets it action back to normal state on completion. It reads back the written data blocks from the flash and verify the values against the internal buffer values. Calling <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> API after calling this API validates the result of verification.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_l_a_s_h_1ga9d23629533ee3a703972649db4372ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XMC_FLASH_WriteBlocks</definition>
        <argsstring>(uint32_t *address, const uint32_t *data, uint32_t num_blocks, bool verify)</argsstring>
        <name>XMC_FLASH_WriteBlocks</name>
        <param>
          <type>uint32_t *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_blocks</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verify</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the starting address of flash block from where the write starts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the source address where targeted data blocks are located. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_blocks</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of flash block writes needed.<linebreak/>
 Range: [1 to (flash size / 16)] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verify</parametername>
</parameternamelist>
<parameterdescription>
<para>If <emphasis>true</emphasis>, hardware verification after block write is enabled else disabled.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>None</para>
</simplesect>
<simplesect kind="par"><title>Description:</title><para>Writes a set of data blocks into the flash.<linebreak/>
<linebreak/>
 Minimum possible writable area is 16 byte block. It sets the NVMPROG register to continuous block write mode before write and resets it action back to normal state on completion. Call <ref refid="group___f_l_a_s_h_1ga50275a88263d4fdfb85261d352eac1d5" kindref="member">XMC_FLASH_GetStatus()</ref> API after calling this API to verify the erase operation.</para>
</simplesect>
<simplesect kind="par"><title>Note</title><para>Flash will be busy state during write is ongoing, hence no operations allowed until it completes.</para>
</simplesect>
<simplesect kind="par"><title>Related APIs:</title><para>None </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="243" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___f_l_a_s_h_1ga0d2b9ed15806748ad4a5ec9f951be20e" prot="public" static="no">
        <name>FLASH_BLOCK_ADDR_MASK</name>
        <initializer>(15U)    /*   Bitwise AND with block address is done to check the address alignment.
                                                 Applicable to XMC_FLASH_WriteBlocks() and XMC_FLASH_VerifyBlocks()
                                                 APIs.*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="97" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1ga3f5991339fd9b6486a4840c010c3bdc6" prot="public" static="no">
        <name>FLASH_PAGE_ADDR_MASK</name>
        <initializer>(255U)   /*   Bitwise AND with page address is done to check the address alignment.
                                                 Applicable to XMC_FLASH_ErasePages() API.*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="99" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1ga3199fac224380bc7a638a3125ffacb8e" prot="public" static="no">
        <name>FLASH_SECTOR_ADDR_MASK</name>
        <initializer>(4095U)  /*   Bitwise AND with sector address is done to check the address alignment.
                                                 Applicable to XMC_FLASH_EraseSector API.*/</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="101" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1ga04349ce03dfa72d4f921e26fab7bb908" prot="public" static="no">
        <name>XMC_FLASH_BASE</name>
        <initializer>(0x10001000U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Starting address of flash for XMC1 family of microcontrollers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="103" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1ga4e9511c59c7236d5adfd24eccb00acf9" prot="public" static="no">
        <name>XMC_FLASH_BLOCKS_PER_PAGE</name>
        <initializer>(16U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of blocks in a page. A block consists of 4 words(16 bytes). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="85" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1ga264df7592f637691b17fda2a74f8e8b9" prot="public" static="no">
        <name>XMC_FLASH_BYTES_PER_BLOCK</name>
        <initializer>(16U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of bytes in a block. (128 bits = 16 bytes) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="89" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1ga00b2a643c63a3ce66dc6fd2fb9ba5508" prot="public" static="no">
        <name>XMC_FLASH_BYTES_PER_PAGE</name>
        <initializer>(256U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of bytes in a page. (16 blocks * 16 bytes = 256 bytes) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="88" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1ga3c8a7688649dce67701e362968ed8b71" prot="public" static="no">
        <name>XMC_FLASH_BYTES_PER_SECTOR</name>
        <initializer>(4096U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of bytes in a sector. (16 pages * 256 bytes = 4096 bytes) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="87" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1gae4af65ad5452c6e96162582b28dc012f" prot="public" static="no">
        <name>XMC_FLASH_PAGES_PER_SECTOR</name>
        <initializer>(16U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of pages in a sector. A page consists of 16 blocks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="84" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1gad3630a52ad62064d7ec32acb9f6e0ada" prot="public" static="no">
        <name>XMC_FLASH_WORDS_PER_BLOCK</name>
        <initializer>(4U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of words in a block. (128 bit / 32 bit = 4 words) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="93" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1ga8baf803359cd0c484bed4123ea4d8446" prot="public" static="no">
        <name>XMC_FLASH_WORDS_PER_PAGE</name>
        <initializer>(64U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of words in a page. (16 blocks * 4 words = 64 words) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="92" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_l_a_s_h_1ga26910796f9c90bb2c88060381bc45ff6" prot="public" static="no">
        <name>XMC_FLASH_WORDS_PER_SECTOR</name>
        <initializer>(1024U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of words in a sector. (16 pages * 64 words = 1024 words) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" line="91" column="9" bodyfile="/var/tmp/gitlab-runner1/builds/xyH-6YS9/0/repo/mtb-xmclib-cat3/XMCLib/inc/xmc1_flash.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Flash driver for XMC microcontroller family. </para>
    </briefdescription>
    <detaileddescription>
<para>Flash is a non volatile memory module used to store instruction code or constant data. The flash low level driver provides support to the following functionalities of flash memory.<linebreak/>
 <orderedlist>
<listitem>
<para>Provides functions to program and verify pages. ( <ref refid="group___f_l_a_s_h_1ga4374da8ed15f78a182dce3b262d4b6fa" kindref="member">XMC_FLASH_ProgramPage()</ref>, XMC_FLASH_ProgramPages() <ref refid="group___f_l_a_s_h_1gab5d0302105a5696744a6dcfae19db64f" kindref="member">XMC_FLASH_ProgramVerifyPage()</ref> )<linebreak/>
 </para>
</listitem>
<listitem>
<para>Provides functions to write and verify blocks. ( <ref refid="group___f_l_a_s_h_1ga9d23629533ee3a703972649db4372ebe" kindref="member">XMC_FLASH_WriteBlocks()</ref>, <ref refid="group___f_l_a_s_h_1ga7159be439f872a52db4b20f74477e75d" kindref="member">XMC_FLASH_VerifyBlocks()</ref> )<linebreak/>
 </para>
</listitem>
<listitem>
<para>Provides functions to read data in terms of word and blocks. ( <ref refid="group___f_l_a_s_h_1ga90cec357405f2edafa4aa96cc3e1de1d" kindref="member">XMC_FLASH_ReadBlocks()</ref>, <ref refid="group___f_l_a_s_h_1ga4dc344064838670ac3b0d7b4c2c9a0fb" kindref="member">XMC_FLASH_ReadWord()</ref> ) <linebreak/>
 </para>
</listitem>
<listitem>
<para>Provides function to erase page. ( <ref refid="group___f_l_a_s_h_1ga1d782bca8ed5b31fca6fa58cf6106b7b" kindref="member">XMC_FLASH_ErasePage()</ref> ) <linebreak/>
 </para>
</listitem>
</orderedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>

<?xml version="1.0" encoding="utf-8"?>

<!--****************************************************************************
* \file eth-1.0.cypersonality
* \version 1.0
*
* \brief
* Ethernet personality description file.
*
********************************************************************************
* \copyright
* Copyright 2021-2023 Cypress Semiconductor Corporation
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*****************************************************************************-->

<Personality id="xmc_eru-ogu" name="ERU-OGU" version="1.0" xmlns="http://cypress.com/xsd/cyhwpersonality_v7">
  <Dependencies>
    <IpBlock name="xmc_eru" />
    <Resource name="eru\.ogu" />
  </Dependencies>
  <ExposedMembers />
  <Parameters>
    <ParamString id="module_num" name="Module Number" group="Internal" default="`${getInstNumber(&quot;eru&quot;)}`" visible="false" editable="false" desc="ERU parent module index." />
    <ParamString id="channel_num" name="Channel Number" group="Internal" default="`${getInstNumber(&quot;ogu&quot;)}`" visible="false" editable="false" desc="ERU channel slice index." />

    <!-- Peripheral documentation -->
    <ParamDoc id="api_doc" name="API Help" group="Documentation" default="file:///`${cy_libs_path()}`/docs/`${lookupExpression(&quot;XMC1&quot;, 0) ? &quot;xmc1&quot; : &quot;xmc4&quot;}`_api_reference_manual/html/group___e_r_u.html" linkText="Open ERU Driver Documentation" visible="true" desc="Opens the XMC Peripheral Library Documentation" />
    <ParamDoc id="cfg_doc" name="Personality Help" group="Documentation" default="file:///`${cy_libs_path()}`/docs/`${lookupExpression(&quot;XMC1&quot;, 0) ? &quot;xmc1&quot; : &quot;xmc4&quot;}`_api_reference_manual/html/doc_personality_eru_1.0.html" linkText="Open ERU Personality Documentation" visible="true" desc="Opens the XMC Peripheral Library Personality Documentation" />

    <!-- Event Generator -->
    <ParamBool id="eru_pattern_detection" name="Pattern Detection" group="Event Generator" default="false" visible="true" editable="true" desc="Enables pattern detection." />
    <ParamChoice id="eru_generate_service_request" name="Generate Service Request" group="Event Generator" default="XMC_ERU_OGU_SERVICE_REQUEST_DISABLED" visible="true" editable="`${eru_pattern_detection}`" desc="Configures the gating scheme to apply on pattern match output.">
      <Entry name="No Service Request" value="XMC_ERU_OGU_SERVICE_REQUEST_DISABLED" visible="true" />
      <Entry name="Independent of Pattern Detection" value="XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER" visible="true" />
      <Entry name="On Pattern Detection Match" value="XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MATCH" visible="true" />
      <Entry name="On Pattern Detection Mismatch" value="XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MISMATCH" visible="true" />
    </ParamChoice>

    <Repeat count="4">
      <ParamSignal port="exicon$idxfl[0]" name="EXICON$idx FL" group="Connections" visible="true" desc="The status flags EXICONx.FL of the Input Channels can be enabled to take part in the pattern detection. A pattern match is detected while all enabled status flags are set." canBeEmpty="true" forbiddenBy="none" />
      <ParamSignal port="tr$idx[0]" name="Trigger $idx" group="Connections" visible="true" desc="All trigger signals TRxy from the Input Channels that are enabled and directed to OGUy, a selected peripheral-related trigger event, and a pattern change event (if enabled) are logically OR-combined." canBeEmpty="true" />
    </Repeat>
    <ParamSignal port="ogu1[0]" name="OGU 1" group="Connections" visible="`${hasVisibleOption(&quot;ogu1[0]&quot;)}`" desc="OGU 1 Connection signal." canBeEmpty="true" />
    <ParamSignal port="ogu2[0]" name="OGU 2" group="Connections" visible="`${hasVisibleOption(&quot;ogu2[0]&quot;)}`" desc="OGU 2 Connection signal." canBeEmpty="true" />
    <ParamSignal port="ogu3[0]" name="OGU 3" group="Connections" visible="`${hasVisibleOption(&quot;ogu3[0]&quot;)}`" desc="OGU 3 Connection signal." canBeEmpty="true" />
    <ParamSignal port="pdout[0]" name="PDOUT" group="Connections" visible="true" desc="Directly output the pattern match information for gating purposes in other modules" canBeEmpty="true" forbiddenBy="none" />
    <ParamSignal port="gout[0]" name="GOUT" group="Connections" visible="`${(eru_pattern_detection) &amp;&amp; (eru_generate_service_request ne XMC_ERU_OGU_SERVICE_REQUEST_DISABLED)}`" desc="Output the pattern match or pattern miss information (inverted pattern match), or a permanent 0 or 1 under software control for gating purposes in other modules" canBeEmpty="true" />
    <ParamSignal port="tout[0]" name="TOUT" group="Connections" visible="`${hasVisibleOption(&quot;tout[0]&quot;)}`" desc="Output the pattern match or pattern miss information (inverted pattern match), or a permanent 0 or 1 under software control for gating purposes in other modules." canBeEmpty="true" />
    <ParamSignal port="iout[0]" name="IOUT" group="Connections" visible="true" desc="Gated trigger output (ERU_GOUTy logical AND-combined with ERU_TOUTy) to trigger service requests (e.g. the service request generation can be gated to allow service request activation during a certain time window)." canBeEmpty="true" />

    <!-- Advanced Settings -->
    <ParamBool id="in_flash" name="Store Config in Flash" group="Advanced" default="true" visible="true" editable="true" desc="Controls whether the configuration structure is stored in flash (const, true) or SRAM (not const, false)." />
  </Parameters>
  <DRCs />
  <ConfigFirmware>
    <ConfigInclude value="xmc_eru.h" include="true" />
    <ConfigDefine name="`${INST_NAME}`_NUM" value="`${channel_num}`U" public="true" include="true" />
    <ConfigDefine name="`${INST_NAME}`_HW" value="ERU`${module_num}`_OGU`${channel_num}`" public="true" include="true"/>
    <ConfigDefine name="`${INST_NAME}`_INTERRUPT_HANDLER" value="ERU`${module_num}`_`${channel_num}`_IRQHandler" public="true" include="`${eru_generate_service_request ne XMC_ERU_OGU_SERVICE_REQUEST_DISABLED}`"/>
    <ConfigDefine name="`${INST_NAME}`_IRQN" value="ERU`${module_num}`_`${channel_num}`_IRQn" public="true" include="`${eru_generate_service_request ne XMC_ERU_OGU_SERVICE_REQUEST_DISABLED}`"/>

      <ConfigStruct name="`${INST_NAME}`_config" type="XMC_ERU_OGU_CONFIG_t" const="`${in_flash}`" public="true" include="true">
      <Member name="peripheral_trigger" value="`${hasConnection(&quot;ogu1&quot;, 0) ? &quot;XMC_ERU_OGU_PERIPHERAL_TRIGGER1&quot; : &quot;&quot;}``${(hasConnection(&quot;ogu1&quot;, 0) &amp;&amp; (hasConnection(&quot;ogu2&quot;, 0) || hasConnection(&quot;ogu3&quot;, 0))) ? &quot; | &quot; : &quot;&quot;}``${hasConnection(&quot;ogu2&quot;, 0) ? &quot;XMC_ERU_OGU_PERIPHERAL_TRIGGER2&quot; : &quot;&quot;}``${(hasConnection(&quot;ogu2&quot;, 0) &amp;&amp; hasConnection(&quot;ogu3&quot;, 0)) ? &quot; | &quot; : &quot;&quot;}``${hasConnection(&quot;ogu3&quot;, 0) ? &quot;XMC_ERU_OGU_PERIPHERAL_TRIGGER3&quot; : &quot;&quot;}`" include="`${hasConnection(&quot;ogu1&quot;, 0) || hasConnection(&quot;ogu2&quot;, 0) || hasConnection(&quot;ogu3&quot;, 0)}`" />
      <Member name="enable_pattern_detection" value="`${eru_pattern_detection ? &quot;1&quot; : &quot;0&quot;}`" />
      <Member name="service_request" value="`${eru_generate_service_request}`" />
      <Member name="pattern_detection_input" value="`${hasConnection(&quot;exicon0fl&quot;, 0) ? &quot;XMC_ERU_OGU_PATTERN_DETECTION_INPUT0&quot; : &quot;&quot; }``${(hasConnection(&quot;exicon0fl&quot;, 0) &amp;&amp; (hasConnection(&quot;exicon1fl&quot;, 0) || hasConnection(&quot;exicon2fl&quot;, 0) || hasConnection(&quot;exicon3fl&quot;, 0))) ? &quot; | &quot; : &quot;&quot;}``${ hasConnection(&quot;exicon1fl&quot;, 0) ? &quot;XMC_ERU_OGU_PATTERN_DETECTION_INPUT1&quot; : &quot;&quot;}``${(hasConnection(&quot;exicon1fl&quot;, 0) &amp;&amp; (hasConnection(&quot;exicon2fl&quot;, 0) || hasConnection(&quot;exicon3fl&quot;, 0))) ? &quot; | &quot; : &quot;&quot;}``${hasConnection(&quot;exicon2fl&quot;, 0) ? &quot;XMC_ERU_OGU_PATTERN_DETECTION_INPUT2&quot; : &quot;&quot;}``${(hasConnection(&quot;exicon2fl&quot;, 0) &amp;&amp; hasConnection(&quot;exicon3fl&quot;, 0)) ? &quot; | &quot; : &quot;&quot;}``${hasConnection(&quot;exicon3fl&quot;, 0) ? &quot;XMC_ERU_OGU_PATTERN_DETECTION_INPUT3&quot; : &quot;&quot;}`" include="`${hasConnection(&quot;exicon0fl&quot;, 0) || hasConnection(&quot;exicon1fl&quot;, 0) || hasConnection(&quot;exicon2fl&quot;, 0) || hasConnection(&quot;exicon3fl&quot;, 0)}`" />
    </ConfigStruct>

    <ConfigInstruction value="XMC_ERU_OGU_Init(`${INST_NAME}`_HW, &amp;`${INST_NAME}`_config);" include="true" />

  </ConfigFirmware>
</Personality>